// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * The integration account map.
 *
 * ## Example Usage
 * ### Create or update a map
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 *
 * const map = new azurerm.logic.v20160601.Map("map", {
 *     content: `<?xml version="1.0" encoding="UTF-16"?>
 * <xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:msxsl="urn:schemas-microsoft-com:xslt" xmlns:var="http://schemas.microsoft.com/BizTalk/2003/var" exclude-result-prefixes="msxsl var s0 userCSharp" version="1.0" xmlns:ns0="http://BizTalk_Server_Project4.StringFunctoidsDestinationSchema" xmlns:s0="http://BizTalk_Server_Project4.StringFunctoidsSourceSchema" xmlns:userCSharp="http://schemas.microsoft.com/BizTalk/2003/userCSharp">
 *   <xsl:import href="http://btsfunctoids.blob.core.windows.net/functoids/functoids.xslt" />
 *   <xsl:output omit-xml-declaration="yes" method="xml" version="1.0" />
 *   <xsl:template match="/">
 *     <xsl:apply-templates select="/s0:Root" />
 *   </xsl:template>
 *   <xsl:template match="/s0:Root">
 *     <xsl:variable name="var:v1" select="userCSharp:StringFind(string(StringFindSource/text()) , &quot;SearchString&quot;)" />
 *     <xsl:variable name="var:v2" select="userCSharp:StringLeft(string(StringLeftSource/text()) , &quot;2&quot;)" />
 *     <xsl:variable name="var:v3" select="userCSharp:StringRight(string(StringRightSource/text()) , &quot;2&quot;)" />
 *     <xsl:variable name="var:v4" select="userCSharp:StringUpperCase(string(UppercaseSource/text()))" />
 *     <xsl:variable name="var:v5" select="userCSharp:StringLowerCase(string(LowercaseSource/text()))" />
 *     <xsl:variable name="var:v6" select="userCSharp:StringSize(string(SizeSource/text()))" />
 *     <xsl:variable name="var:v7" select="userCSharp:StringSubstring(string(StringExtractSource/text()) , &quot;0&quot; , &quot;2&quot;)" />
 *     <xsl:variable name="var:v8" select="userCSharp:StringConcat(string(StringConcatSource/text()))" />
 *     <xsl:variable name="var:v9" select="userCSharp:StringTrimLeft(string(StringLeftTrimSource/text()))" />
 *     <xsl:variable name="var:v10" select="userCSharp:StringTrimRight(string(StringRightTrimSource/text()))" />
 *     <ns0:Root>
 *       <StringFindDestination>
 *         <xsl:value-of select="$var:v1" />
 *       </StringFindDestination>
 *       <StringLeftDestination>
 *         <xsl:value-of select="$var:v2" />
 *       </StringLeftDestination>
 *       <StringRightDestination>
 *         <xsl:value-of select="$var:v3" />
 *       </StringRightDestination>
 *       <UppercaseDestination>
 *         <xsl:value-of select="$var:v4" />
 *       </UppercaseDestination>
 *       <LowercaseDestination>
 *         <xsl:value-of select="$var:v5" />
 *       </LowercaseDestination>
 *       <SizeDestination>
 *         <xsl:value-of select="$var:v6" />
 *       </SizeDestination>
 *       <StringExtractDestination>
 *         <xsl:value-of select="$var:v7" />
 *       </StringExtractDestination>
 *       <StringConcatDestination>
 *         <xsl:value-of select="$var:v8" />
 *       </StringConcatDestination>
 *       <StringLeftTrimDestination>
 *         <xsl:value-of select="$var:v9" />
 *       </StringLeftTrimDestination>
 *       <StringRightTrimDestination>
 *         <xsl:value-of select="$var:v10" />
 *       </StringRightTrimDestination>
 *     </ns0:Root>
 *   </xsl:template>
 * </xsl:stylesheet>`,
 *     contentType: "application/xml",
 *     integrationAccountName: "testIntegrationAccount",
 *     location: "westus",
 *     mapName: "testMap",
 *     mapType: "Xslt",
 *     metadata: {},
 *     resourceGroupName: "testResourceGroup",
 * });
 *
 * ```
 */
export class Map extends pulumi.CustomResource {
    /**
     * Get an existing Map resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): Map {
        return new Map(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:logic/v20160601:Map';

    /**
     * Returns true if the given object is an instance of Map.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Map {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Map.__pulumiType;
    }

    /**
     * The changed time.
     */
    public /*out*/ readonly changedTime!: pulumi.Output<string>;
    /**
     * The content.
     */
    public readonly content!: pulumi.Output<string | undefined>;
    /**
     * The content link.
     */
    public /*out*/ readonly contentLink!: pulumi.Output<outputs.logic.v20160601.ContentLinkResponse>;
    /**
     * The content type.
     */
    public readonly contentType!: pulumi.Output<string | undefined>;
    /**
     * The created time.
     */
    public /*out*/ readonly createdTime!: pulumi.Output<string>;
    /**
     * The resource location.
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The map type.
     */
    public readonly mapType!: pulumi.Output<string>;
    /**
     * The metadata.
     */
    public readonly metadata!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Gets the resource name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The parameters schema of integration account map.
     */
    public readonly parametersSchema!: pulumi.Output<outputs.logic.v20160601.IntegrationAccountMapPropertiesResponseParametersSchema | undefined>;
    /**
     * The resource tags.
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Gets the resource type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a Map resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MapArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.integrationAccountName === undefined) {
                throw new Error("Missing required property 'integrationAccountName'");
            }
            if (!args || args.mapName === undefined) {
                throw new Error("Missing required property 'mapName'");
            }
            if (!args || args.mapType === undefined) {
                throw new Error("Missing required property 'mapType'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["content"] = args ? args.content : undefined;
            inputs["contentType"] = args ? args.contentType : undefined;
            inputs["integrationAccountName"] = args ? args.integrationAccountName : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["mapName"] = args ? args.mapName : undefined;
            inputs["mapType"] = args ? args.mapType : undefined;
            inputs["metadata"] = args ? args.metadata : undefined;
            inputs["parametersSchema"] = args ? args.parametersSchema : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["changedTime"] = undefined /*out*/;
            inputs["contentLink"] = undefined /*out*/;
            inputs["createdTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["changedTime"] = undefined /*out*/;
            inputs["content"] = undefined /*out*/;
            inputs["contentLink"] = undefined /*out*/;
            inputs["contentType"] = undefined /*out*/;
            inputs["createdTime"] = undefined /*out*/;
            inputs["location"] = undefined /*out*/;
            inputs["mapType"] = undefined /*out*/;
            inputs["metadata"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["parametersSchema"] = undefined /*out*/;
            inputs["tags"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azurerm:logic/latest:Map" }, { type: "azurerm:logic/v20150801preview:Map" }, { type: "azurerm:logic/v20180701preview:Map" }, { type: "azurerm:logic/v20190501:Map" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(Map.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a Map resource.
 */
export interface MapArgs {
    /**
     * The content.
     */
    readonly content?: pulumi.Input<string>;
    /**
     * The content type.
     */
    readonly contentType?: pulumi.Input<string>;
    /**
     * The integration account name.
     */
    readonly integrationAccountName: pulumi.Input<string>;
    /**
     * The resource location.
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The integration account map name.
     */
    readonly mapName: pulumi.Input<string>;
    /**
     * The map type.
     */
    readonly mapType: pulumi.Input<string>;
    /**
     * The metadata.
     */
    readonly metadata?: pulumi.Input<{[key: string]: any}>;
    /**
     * The parameters schema of integration account map.
     */
    readonly parametersSchema?: pulumi.Input<inputs.logic.v20160601.IntegrationAccountMapPropertiesParametersSchema>;
    /**
     * The resource group name.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The resource tags.
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}
