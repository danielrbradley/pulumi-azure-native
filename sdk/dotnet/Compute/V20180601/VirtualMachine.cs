// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Compute.V20180601
{
    /// <summary>
    /// Describes a Virtual Machine.
    /// 
    /// ## Example Usage
    /// ### Create a custom-image vm from an unmanaged generalized os image.
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var virtualMachine = new AzureRM.Compute.V20180601.VirtualMachine("virtualMachine", new AzureRM.Compute.V20180601.VirtualMachineArgs
    ///         {
    ///             HardwareProfile = new AzureRM.Compute.V20180601.Inputs.HardwareProfileArgs
    ///             {
    ///                 VmSize = "Standard_D1_v2",
    ///             },
    ///             Location = "westus",
    ///             NetworkProfile = new AzureRM.Compute.V20180601.Inputs.NetworkProfileArgs
    ///             {
    ///                 NetworkInterfaces = 
    ///                 {
    ///                     new AzureRM.Compute.V20180601.Inputs.NetworkInterfaceReferenceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
    ///                     },
    ///                 },
    ///             },
    ///             OsProfile = new AzureRM.Compute.V20180601.Inputs.OSProfileArgs
    ///             {
    ///                 AdminPassword = "{your-password}",
    ///                 AdminUsername = "{your-username}",
    ///                 ComputerName = "myVM",
    ///             },
    ///             ResourceGroupName = "myResourceGroup",
    ///             StorageProfile = new AzureRM.Compute.V20180601.Inputs.StorageProfileArgs
    ///             {
    ///                 OsDisk = new AzureRM.Compute.V20180601.Inputs.OSDiskArgs
    ///                 {
    ///                     Caching = "ReadWrite",
    ///                     CreateOption = "FromImage",
    ///                     Image = new AzureRM.Compute.V20180601.Inputs.VirtualHardDiskArgs
    ///                     {
    ///                         Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd",
    ///                     },
    ///                     Name = "myVMosdisk",
    ///                     OsType = "Windows",
    ///                     Vhd = new AzureRM.Compute.V20180601.Inputs.VirtualHardDiskArgs
    ///                     {
    ///                         Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd",
    ///                     },
    ///                 },
    ///             },
    ///             VmName = "{vm-name}",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### Create a platform-image vm with unmanaged os and data disks.
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var virtualMachine = new AzureRM.Compute.V20180601.VirtualMachine("virtualMachine", new AzureRM.Compute.V20180601.VirtualMachineArgs
    ///         {
    ///             HardwareProfile = new AzureRM.Compute.V20180601.Inputs.HardwareProfileArgs
    ///             {
    ///                 VmSize = "Standard_D2_v2",
    ///             },
    ///             Location = "westus",
    ///             NetworkProfile = new AzureRM.Compute.V20180601.Inputs.NetworkProfileArgs
    ///             {
    ///                 NetworkInterfaces = 
    ///                 {
    ///                     new AzureRM.Compute.V20180601.Inputs.NetworkInterfaceReferenceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
    ///                     },
    ///                 },
    ///             },
    ///             OsProfile = new AzureRM.Compute.V20180601.Inputs.OSProfileArgs
    ///             {
    ///                 AdminPassword = "{your-password}",
    ///                 AdminUsername = "{your-username}",
    ///                 ComputerName = "myVM",
    ///             },
    ///             ResourceGroupName = "myResourceGroup",
    ///             StorageProfile = new AzureRM.Compute.V20180601.Inputs.StorageProfileArgs
    ///             {
    ///                 DataDisks = 
    ///                 {
    ///                     new AzureRM.Compute.V20180601.Inputs.DataDiskArgs
    ///                     {
    ///                         CreateOption = "Empty",
    ///                         DiskSizeGB = 1023,
    ///                         Lun = 0,
    ///                         Vhd = new AzureRM.Compute.V20180601.Inputs.VirtualHardDiskArgs
    ///                         {
    ///                             Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk0.vhd",
    ///                         },
    ///                     },
    ///                     new AzureRM.Compute.V20180601.Inputs.DataDiskArgs
    ///                     {
    ///                         CreateOption = "Empty",
    ///                         DiskSizeGB = 1023,
    ///                         Lun = 1,
    ///                         Vhd = new AzureRM.Compute.V20180601.Inputs.VirtualHardDiskArgs
    ///                         {
    ///                             Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk1.vhd",
    ///                         },
    ///                     },
    ///                 },
    ///                 ImageReference = new AzureRM.Compute.V20180601.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Offer = "WindowsServer",
    ///                     Publisher = "MicrosoftWindowsServer",
    ///                     Sku = "2016-Datacenter",
    ///                     Version = "latest",
    ///                 },
    ///                 OsDisk = new AzureRM.Compute.V20180601.Inputs.OSDiskArgs
    ///                 {
    ///                     Caching = "ReadWrite",
    ///                     CreateOption = "FromImage",
    ///                     Name = "myVMosdisk",
    ///                     Vhd = new AzureRM.Compute.V20180601.Inputs.VirtualHardDiskArgs
    ///                     {
    ///                         Uri = "http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/myDisk.vhd",
    ///                     },
    ///                 },
    ///             },
    ///             VmName = "{vm-name}",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### Create a vm from a custom image.
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var virtualMachine = new AzureRM.Compute.V20180601.VirtualMachine("virtualMachine", new AzureRM.Compute.V20180601.VirtualMachineArgs
    ///         {
    ///             HardwareProfile = new AzureRM.Compute.V20180601.Inputs.HardwareProfileArgs
    ///             {
    ///                 VmSize = "Standard_D1_v2",
    ///             },
    ///             Location = "westus",
    ///             NetworkProfile = new AzureRM.Compute.V20180601.Inputs.NetworkProfileArgs
    ///             {
    ///                 NetworkInterfaces = 
    ///                 {
    ///                     new AzureRM.Compute.V20180601.Inputs.NetworkInterfaceReferenceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
    ///                     },
    ///                 },
    ///             },
    ///             OsProfile = new AzureRM.Compute.V20180601.Inputs.OSProfileArgs
    ///             {
    ///                 AdminPassword = "{your-password}",
    ///                 AdminUsername = "{your-username}",
    ///                 ComputerName = "myVM",
    ///             },
    ///             ResourceGroupName = "myResourceGroup",
    ///             StorageProfile = new AzureRM.Compute.V20180601.Inputs.StorageProfileArgs
    ///             {
    ///                 ImageReference = new AzureRM.Compute.V20180601.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}",
    ///                 },
    ///                 OsDisk = new AzureRM.Compute.V20180601.Inputs.OSDiskArgs
    ///                 {
    ///                     Caching = "ReadWrite",
    ///                     CreateOption = "FromImage",
    ///                     ManagedDisk = new AzureRM.Compute.V20180601.Inputs.ManagedDiskParametersArgs
    ///                     {
    ///                         StorageAccountType = "Standard_LRS",
    ///                     },
    ///                     Name = "myVMosdisk",
    ///                 },
    ///             },
    ///             VmName = "myVM",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### Create a vm in an availability set.
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var virtualMachine = new AzureRM.Compute.V20180601.VirtualMachine("virtualMachine", new AzureRM.Compute.V20180601.VirtualMachineArgs
    ///         {
    ///             AvailabilitySet = new AzureRM.Compute.V20180601.Inputs.SubResourceArgs
    ///             {
    ///                 Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/availabilitySets/{existing-availability-set-name}",
    ///             },
    ///             HardwareProfile = new AzureRM.Compute.V20180601.Inputs.HardwareProfileArgs
    ///             {
    ///                 VmSize = "Standard_D1_v2",
    ///             },
    ///             Location = "westus",
    ///             NetworkProfile = new AzureRM.Compute.V20180601.Inputs.NetworkProfileArgs
    ///             {
    ///                 NetworkInterfaces = 
    ///                 {
    ///                     new AzureRM.Compute.V20180601.Inputs.NetworkInterfaceReferenceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
    ///                     },
    ///                 },
    ///             },
    ///             OsProfile = new AzureRM.Compute.V20180601.Inputs.OSProfileArgs
    ///             {
    ///                 AdminPassword = "{your-password}",
    ///                 AdminUsername = "{your-username}",
    ///                 ComputerName = "myVM",
    ///             },
    ///             ResourceGroupName = "myResourceGroup",
    ///             StorageProfile = new AzureRM.Compute.V20180601.Inputs.StorageProfileArgs
    ///             {
    ///                 ImageReference = new AzureRM.Compute.V20180601.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Offer = "WindowsServer",
    ///                     Publisher = "MicrosoftWindowsServer",
    ///                     Sku = "2016-Datacenter",
    ///                     Version = "latest",
    ///                 },
    ///                 OsDisk = new AzureRM.Compute.V20180601.Inputs.OSDiskArgs
    ///                 {
    ///                     Caching = "ReadWrite",
    ///                     CreateOption = "FromImage",
    ///                     ManagedDisk = new AzureRM.Compute.V20180601.Inputs.ManagedDiskParametersArgs
    ///                     {
    ///                         StorageAccountType = "Standard_LRS",
    ///                     },
    ///                     Name = "myVMosdisk",
    ///                 },
    ///             },
    ///             VmName = "myVM",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### Create a vm with a marketplace image plan.
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var virtualMachine = new AzureRM.Compute.V20180601.VirtualMachine("virtualMachine", new AzureRM.Compute.V20180601.VirtualMachineArgs
    ///         {
    ///             HardwareProfile = new AzureRM.Compute.V20180601.Inputs.HardwareProfileArgs
    ///             {
    ///                 VmSize = "Standard_D1_v2",
    ///             },
    ///             Location = "westus",
    ///             NetworkProfile = new AzureRM.Compute.V20180601.Inputs.NetworkProfileArgs
    ///             {
    ///                 NetworkInterfaces = 
    ///                 {
    ///                     new AzureRM.Compute.V20180601.Inputs.NetworkInterfaceReferenceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
    ///                     },
    ///                 },
    ///             },
    ///             OsProfile = new AzureRM.Compute.V20180601.Inputs.OSProfileArgs
    ///             {
    ///                 AdminPassword = "{your-password}",
    ///                 AdminUsername = "{your-username}",
    ///                 ComputerName = "myVM",
    ///             },
    ///             Plan = new AzureRM.Compute.V20180601.Inputs.PlanArgs
    ///             {
    ///                 Name = "windows2016",
    ///                 Product = "windows-data-science-vm",
    ///                 Publisher = "microsoft-ads",
    ///             },
    ///             ResourceGroupName = "myResourceGroup",
    ///             StorageProfile = new AzureRM.Compute.V20180601.Inputs.StorageProfileArgs
    ///             {
    ///                 ImageReference = new AzureRM.Compute.V20180601.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Offer = "windows-data-science-vm",
    ///                     Publisher = "microsoft-ads",
    ///                     Sku = "windows2016",
    ///                     Version = "latest",
    ///                 },
    ///                 OsDisk = new AzureRM.Compute.V20180601.Inputs.OSDiskArgs
    ///                 {
    ///                     Caching = "ReadWrite",
    ///                     CreateOption = "FromImage",
    ///                     ManagedDisk = new AzureRM.Compute.V20180601.Inputs.ManagedDiskParametersArgs
    ///                     {
    ///                         StorageAccountType = "Standard_LRS",
    ///                     },
    ///                     Name = "myVMosdisk",
    ///                 },
    ///             },
    ///             VmName = "myVM",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### Create a vm with boot diagnostics.
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var virtualMachine = new AzureRM.Compute.V20180601.VirtualMachine("virtualMachine", new AzureRM.Compute.V20180601.VirtualMachineArgs
    ///         {
    ///             DiagnosticsProfile = new AzureRM.Compute.V20180601.Inputs.DiagnosticsProfileArgs
    ///             {
    ///                 BootDiagnostics = new AzureRM.Compute.V20180601.Inputs.BootDiagnosticsArgs
    ///                 {
    ///                     Enabled = true,
    ///                     StorageUri = "http://{existing-storage-account-name}.blob.core.windows.net",
    ///                 },
    ///             },
    ///             HardwareProfile = new AzureRM.Compute.V20180601.Inputs.HardwareProfileArgs
    ///             {
    ///                 VmSize = "Standard_D1_v2",
    ///             },
    ///             Location = "westus",
    ///             NetworkProfile = new AzureRM.Compute.V20180601.Inputs.NetworkProfileArgs
    ///             {
    ///                 NetworkInterfaces = 
    ///                 {
    ///                     new AzureRM.Compute.V20180601.Inputs.NetworkInterfaceReferenceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
    ///                     },
    ///                 },
    ///             },
    ///             OsProfile = new AzureRM.Compute.V20180601.Inputs.OSProfileArgs
    ///             {
    ///                 AdminPassword = "{your-password}",
    ///                 AdminUsername = "{your-username}",
    ///                 ComputerName = "myVM",
    ///             },
    ///             ResourceGroupName = "myResourceGroup",
    ///             StorageProfile = new AzureRM.Compute.V20180601.Inputs.StorageProfileArgs
    ///             {
    ///                 ImageReference = new AzureRM.Compute.V20180601.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Offer = "WindowsServer",
    ///                     Publisher = "MicrosoftWindowsServer",
    ///                     Sku = "2016-Datacenter",
    ///                     Version = "latest",
    ///                 },
    ///                 OsDisk = new AzureRM.Compute.V20180601.Inputs.OSDiskArgs
    ///                 {
    ///                     Caching = "ReadWrite",
    ///                     CreateOption = "FromImage",
    ///                     ManagedDisk = new AzureRM.Compute.V20180601.Inputs.ManagedDiskParametersArgs
    ///                     {
    ///                         StorageAccountType = "Standard_LRS",
    ///                     },
    ///                     Name = "myVMosdisk",
    ///                 },
    ///             },
    ///             VmName = "myVM",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### Create a vm with empty data disks.
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var virtualMachine = new AzureRM.Compute.V20180601.VirtualMachine("virtualMachine", new AzureRM.Compute.V20180601.VirtualMachineArgs
    ///         {
    ///             HardwareProfile = new AzureRM.Compute.V20180601.Inputs.HardwareProfileArgs
    ///             {
    ///                 VmSize = "Standard_D2_v2",
    ///             },
    ///             Location = "westus",
    ///             NetworkProfile = new AzureRM.Compute.V20180601.Inputs.NetworkProfileArgs
    ///             {
    ///                 NetworkInterfaces = 
    ///                 {
    ///                     new AzureRM.Compute.V20180601.Inputs.NetworkInterfaceReferenceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
    ///                     },
    ///                 },
    ///             },
    ///             OsProfile = new AzureRM.Compute.V20180601.Inputs.OSProfileArgs
    ///             {
    ///                 AdminPassword = "{your-password}",
    ///                 AdminUsername = "{your-username}",
    ///                 ComputerName = "myVM",
    ///             },
    ///             ResourceGroupName = "myResourceGroup",
    ///             StorageProfile = new AzureRM.Compute.V20180601.Inputs.StorageProfileArgs
    ///             {
    ///                 DataDisks = 
    ///                 {
    ///                     new AzureRM.Compute.V20180601.Inputs.DataDiskArgs
    ///                     {
    ///                         CreateOption = "Empty",
    ///                         DiskSizeGB = 1023,
    ///                         Lun = 0,
    ///                     },
    ///                     new AzureRM.Compute.V20180601.Inputs.DataDiskArgs
    ///                     {
    ///                         CreateOption = "Empty",
    ///                         DiskSizeGB = 1023,
    ///                         Lun = 1,
    ///                     },
    ///                 },
    ///                 ImageReference = new AzureRM.Compute.V20180601.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Offer = "WindowsServer",
    ///                     Publisher = "MicrosoftWindowsServer",
    ///                     Sku = "2016-Datacenter",
    ///                     Version = "latest",
    ///                 },
    ///                 OsDisk = new AzureRM.Compute.V20180601.Inputs.OSDiskArgs
    ///                 {
    ///                     Caching = "ReadWrite",
    ///                     CreateOption = "FromImage",
    ///                     ManagedDisk = new AzureRM.Compute.V20180601.Inputs.ManagedDiskParametersArgs
    ///                     {
    ///                         StorageAccountType = "Standard_LRS",
    ///                     },
    ///                     Name = "myVMosdisk",
    ///                 },
    ///             },
    ///             VmName = "myVM",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### Create a vm with ephemeral os disk.
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var virtualMachine = new AzureRM.Compute.V20180601.VirtualMachine("virtualMachine", new AzureRM.Compute.V20180601.VirtualMachineArgs
    ///         {
    ///             HardwareProfile = new AzureRM.Compute.V20180601.Inputs.HardwareProfileArgs
    ///             {
    ///                 VmSize = "Standard_DS1_v2",
    ///             },
    ///             Location = "westus",
    ///             NetworkProfile = new AzureRM.Compute.V20180601.Inputs.NetworkProfileArgs
    ///             {
    ///                 NetworkInterfaces = 
    ///                 {
    ///                     new AzureRM.Compute.V20180601.Inputs.NetworkInterfaceReferenceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
    ///                     },
    ///                 },
    ///             },
    ///             OsProfile = new AzureRM.Compute.V20180601.Inputs.OSProfileArgs
    ///             {
    ///                 AdminPassword = "{your-password}",
    ///                 AdminUsername = "{your-username}",
    ///                 ComputerName = "myVM",
    ///             },
    ///             Plan = new AzureRM.Compute.V20180601.Inputs.PlanArgs
    ///             {
    ///                 Name = "windows2016",
    ///                 Product = "windows-data-science-vm",
    ///                 Publisher = "microsoft-ads",
    ///             },
    ///             ResourceGroupName = "myResourceGroup",
    ///             StorageProfile = new AzureRM.Compute.V20180601.Inputs.StorageProfileArgs
    ///             {
    ///                 ImageReference = new AzureRM.Compute.V20180601.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Offer = "windows-data-science-vm",
    ///                     Publisher = "microsoft-ads",
    ///                     Sku = "windows2016",
    ///                     Version = "latest",
    ///                 },
    ///                 OsDisk = new AzureRM.Compute.V20180601.Inputs.OSDiskArgs
    ///                 {
    ///                     Caching = "ReadOnly",
    ///                     CreateOption = "FromImage",
    ///                     DiffDiskSettings = new AzureRM.Compute.V20180601.Inputs.DiffDiskSettingsArgs
    ///                     {
    ///                         Option = "Local",
    ///                     },
    ///                     ManagedDisk = new AzureRM.Compute.V20180601.Inputs.ManagedDiskParametersArgs
    ///                     {
    ///                         StorageAccountType = "Standard_LRS",
    ///                     },
    ///                     Name = "myVMosdisk",
    ///                 },
    ///             },
    ///             VmName = "myVM",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### Create a vm with password authentication.
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var virtualMachine = new AzureRM.Compute.V20180601.VirtualMachine("virtualMachine", new AzureRM.Compute.V20180601.VirtualMachineArgs
    ///         {
    ///             HardwareProfile = new AzureRM.Compute.V20180601.Inputs.HardwareProfileArgs
    ///             {
    ///                 VmSize = "Standard_D1_v2",
    ///             },
    ///             Location = "westus",
    ///             NetworkProfile = new AzureRM.Compute.V20180601.Inputs.NetworkProfileArgs
    ///             {
    ///                 NetworkInterfaces = 
    ///                 {
    ///                     new AzureRM.Compute.V20180601.Inputs.NetworkInterfaceReferenceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
    ///                     },
    ///                 },
    ///             },
    ///             OsProfile = new AzureRM.Compute.V20180601.Inputs.OSProfileArgs
    ///             {
    ///                 AdminPassword = "{your-password}",
    ///                 AdminUsername = "{your-username}",
    ///                 ComputerName = "myVM",
    ///             },
    ///             ResourceGroupName = "myResourceGroup",
    ///             StorageProfile = new AzureRM.Compute.V20180601.Inputs.StorageProfileArgs
    ///             {
    ///                 ImageReference = new AzureRM.Compute.V20180601.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Offer = "WindowsServer",
    ///                     Publisher = "MicrosoftWindowsServer",
    ///                     Sku = "2016-Datacenter",
    ///                     Version = "latest",
    ///                 },
    ///                 OsDisk = new AzureRM.Compute.V20180601.Inputs.OSDiskArgs
    ///                 {
    ///                     Caching = "ReadWrite",
    ///                     CreateOption = "FromImage",
    ///                     ManagedDisk = new AzureRM.Compute.V20180601.Inputs.ManagedDiskParametersArgs
    ///                     {
    ///                         StorageAccountType = "Standard_LRS",
    ///                     },
    ///                     Name = "myVMosdisk",
    ///                 },
    ///             },
    ///             VmName = "myVM",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### Create a vm with premium storage.
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var virtualMachine = new AzureRM.Compute.V20180601.VirtualMachine("virtualMachine", new AzureRM.Compute.V20180601.VirtualMachineArgs
    ///         {
    ///             HardwareProfile = new AzureRM.Compute.V20180601.Inputs.HardwareProfileArgs
    ///             {
    ///                 VmSize = "Standard_D1_v2",
    ///             },
    ///             Location = "westus",
    ///             NetworkProfile = new AzureRM.Compute.V20180601.Inputs.NetworkProfileArgs
    ///             {
    ///                 NetworkInterfaces = 
    ///                 {
    ///                     new AzureRM.Compute.V20180601.Inputs.NetworkInterfaceReferenceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
    ///                     },
    ///                 },
    ///             },
    ///             OsProfile = new AzureRM.Compute.V20180601.Inputs.OSProfileArgs
    ///             {
    ///                 AdminPassword = "{your-password}",
    ///                 AdminUsername = "{your-username}",
    ///                 ComputerName = "myVM",
    ///             },
    ///             ResourceGroupName = "myResourceGroup",
    ///             StorageProfile = new AzureRM.Compute.V20180601.Inputs.StorageProfileArgs
    ///             {
    ///                 ImageReference = new AzureRM.Compute.V20180601.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Offer = "WindowsServer",
    ///                     Publisher = "MicrosoftWindowsServer",
    ///                     Sku = "2016-Datacenter",
    ///                     Version = "latest",
    ///                 },
    ///                 OsDisk = new AzureRM.Compute.V20180601.Inputs.OSDiskArgs
    ///                 {
    ///                     Caching = "ReadWrite",
    ///                     CreateOption = "FromImage",
    ///                     ManagedDisk = new AzureRM.Compute.V20180601.Inputs.ManagedDiskParametersArgs
    ///                     {
    ///                         StorageAccountType = "Premium_LRS",
    ///                     },
    ///                     Name = "myVMosdisk",
    ///                 },
    ///             },
    ///             VmName = "myVM",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### Create a vm with ssh authentication.
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var virtualMachine = new AzureRM.Compute.V20180601.VirtualMachine("virtualMachine", new AzureRM.Compute.V20180601.VirtualMachineArgs
    ///         {
    ///             HardwareProfile = new AzureRM.Compute.V20180601.Inputs.HardwareProfileArgs
    ///             {
    ///                 VmSize = "Standard_D1_v2",
    ///             },
    ///             Location = "westus",
    ///             NetworkProfile = new AzureRM.Compute.V20180601.Inputs.NetworkProfileArgs
    ///             {
    ///                 NetworkInterfaces = 
    ///                 {
    ///                     new AzureRM.Compute.V20180601.Inputs.NetworkInterfaceReferenceArgs
    ///                     {
    ///                         Id = "/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Network/networkInterfaces/{existing-nic-name}",
    ///                     },
    ///                 },
    ///             },
    ///             OsProfile = new AzureRM.Compute.V20180601.Inputs.OSProfileArgs
    ///             {
    ///                 AdminUsername = "{your-username}",
    ///                 ComputerName = "myVM",
    ///                 LinuxConfiguration = new AzureRM.Compute.V20180601.Inputs.LinuxConfigurationArgs
    ///                 {
    ///                     DisablePasswordAuthentication = true,
    ///                     Ssh = new AzureRM.Compute.V20180601.Inputs.SshConfigurationArgs
    ///                     {
    ///                         PublicKeys = 
    ///                         {
    ///                             new AzureRM.Compute.V20180601.Inputs.SshPublicKeyArgs
    ///                             {
    ///                                 KeyData = "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1",
    ///                                 Path = "/home/{your-username}/.ssh/authorized_keys",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             ResourceGroupName = "myResourceGroup",
    ///             StorageProfile = new AzureRM.Compute.V20180601.Inputs.StorageProfileArgs
    ///             {
    ///                 ImageReference = new AzureRM.Compute.V20180601.Inputs.ImageReferenceArgs
    ///                 {
    ///                     Offer = "{image_offer}",
    ///                     Publisher = "{image_publisher}",
    ///                     Sku = "{image_sku}",
    ///                     Version = "latest",
    ///                 },
    ///                 OsDisk = new AzureRM.Compute.V20180601.Inputs.OSDiskArgs
    ///                 {
    ///                     Caching = "ReadWrite",
    ///                     CreateOption = "FromImage",
    ///                     ManagedDisk = new AzureRM.Compute.V20180601.Inputs.ManagedDiskParametersArgs
    ///                     {
    ///                         StorageAccountType = "Standard_LRS",
    ///                     },
    ///                     Name = "myVMosdisk",
    ///                 },
    ///             },
    ///             VmName = "myVM",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// </summary>
    public partial class VirtualMachine : Pulumi.CustomResource
    {
        /// <summary>
        /// Specifies additional capabilities enabled or disabled on the virtual machine.
        /// </summary>
        [Output("additionalCapabilities")]
        public Output<Outputs.AdditionalCapabilitiesResponseResult?> AdditionalCapabilities { get; private set; } = null!;

        /// <summary>
        /// Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Manage the availability of virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). &lt;br&gt;&lt;br&gt; For more information on Azure planned maintenance, see [Planned maintenance for virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) &lt;br&gt;&lt;br&gt; Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set.
        /// </summary>
        [Output("availabilitySet")]
        public Output<Outputs.SubResourceResponseResult?> AvailabilitySet { get; private set; } = null!;

        /// <summary>
        /// Specifies the boot diagnostic settings state. &lt;br&gt;&lt;br&gt;Minimum api-version: 2015-06-15.
        /// </summary>
        [Output("diagnosticsProfile")]
        public Output<Outputs.DiagnosticsProfileResponseResult?> DiagnosticsProfile { get; private set; } = null!;

        /// <summary>
        /// Specifies the hardware settings for the virtual machine.
        /// </summary>
        [Output("hardwareProfile")]
        public Output<Outputs.HardwareProfileResponseResult?> HardwareProfile { get; private set; } = null!;

        /// <summary>
        /// The identity of the virtual machine, if configured.
        /// </summary>
        [Output("identity")]
        public Output<Outputs.VirtualMachineIdentityResponseResult?> Identity { get; private set; } = null!;

        /// <summary>
        /// The virtual machine instance view.
        /// </summary>
        [Output("instanceView")]
        public Output<Outputs.VirtualMachineInstanceViewResponseResult> InstanceView { get; private set; } = null!;

        /// <summary>
        /// Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
        /// </summary>
        [Output("licenseType")]
        public Output<string?> LicenseType { get; private set; } = null!;

        /// <summary>
        /// Resource location
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Specifies the network interfaces of the virtual machine.
        /// </summary>
        [Output("networkProfile")]
        public Output<Outputs.NetworkProfileResponseResult?> NetworkProfile { get; private set; } = null!;

        /// <summary>
        /// Specifies the operating system settings for the virtual machine.
        /// </summary>
        [Output("osProfile")]
        public Output<Outputs.OSProfileResponseResult?> OsProfile { get; private set; } = null!;

        /// <summary>
        /// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click **Save**.
        /// </summary>
        [Output("plan")]
        public Output<Outputs.PlanResponseResult?> Plan { get; private set; } = null!;

        /// <summary>
        /// The provisioning state, which only appears in the response.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Specifies information about the proximity placement group that the virtual machine should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01.
        /// </summary>
        [Output("proximityPlacementGroup")]
        public Output<Outputs.SubResourceResponseResult?> ProximityPlacementGroup { get; private set; } = null!;

        /// <summary>
        /// The virtual machine child extension resources.
        /// </summary>
        [Output("resources")]
        public Output<ImmutableArray<Outputs.VirtualMachineExtensionResponseResult>> Resources { get; private set; } = null!;

        /// <summary>
        /// Specifies the storage settings for the virtual machine disks.
        /// </summary>
        [Output("storageProfile")]
        public Output<Outputs.StorageProfileResponseResult?> StorageProfile { get; private set; } = null!;

        /// <summary>
        /// Resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// Specifies the VM unique ID which is a 128-bits identifier that is encoded and stored in all Azure IaaS VMs SMBIOS and can be read using platform BIOS commands.
        /// </summary>
        [Output("vmId")]
        public Output<string> VmId { get; private set; } = null!;

        /// <summary>
        /// The virtual machine zones.
        /// </summary>
        [Output("zones")]
        public Output<ImmutableArray<string>> Zones { get; private set; } = null!;


        /// <summary>
        /// Create a VirtualMachine resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public VirtualMachine(string name, VirtualMachineArgs args, CustomResourceOptions? options = null)
            : base("azurerm:compute/v20180601:VirtualMachine", name, args ?? new VirtualMachineArgs(), MakeResourceOptions(options, ""))
        {
        }

        private VirtualMachine(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azurerm:compute/v20180601:VirtualMachine", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azurerm:compute/latest:VirtualMachine"},
                    new Pulumi.Alias { Type = "azurerm:compute/v20150615:VirtualMachine"},
                    new Pulumi.Alias { Type = "azurerm:compute/v20160330:VirtualMachine"},
                    new Pulumi.Alias { Type = "azurerm:compute/v20170330:VirtualMachine"},
                    new Pulumi.Alias { Type = "azurerm:compute/v20171201:VirtualMachine"},
                    new Pulumi.Alias { Type = "azurerm:compute/v20180401:VirtualMachine"},
                    new Pulumi.Alias { Type = "azurerm:compute/v20181001:VirtualMachine"},
                    new Pulumi.Alias { Type = "azurerm:compute/v20190301:VirtualMachine"},
                    new Pulumi.Alias { Type = "azurerm:compute/v20190701:VirtualMachine"},
                    new Pulumi.Alias { Type = "azurerm:compute/v20191201:VirtualMachine"},
                    new Pulumi.Alias { Type = "azurerm:compute/v20200601:VirtualMachine"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing VirtualMachine resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static VirtualMachine Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new VirtualMachine(name, id, options);
        }
    }

    public sealed class VirtualMachineArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Specifies additional capabilities enabled or disabled on the virtual machine.
        /// </summary>
        [Input("additionalCapabilities")]
        public Input<Inputs.AdditionalCapabilitiesArgs>? AdditionalCapabilities { get; set; }

        /// <summary>
        /// Specifies information about the availability set that the virtual machine should be assigned to. Virtual machines specified in the same availability set are allocated to different nodes to maximize availability. For more information about availability sets, see [Manage the availability of virtual machines](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-manage-availability?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json). &lt;br&gt;&lt;br&gt; For more information on Azure planned maintenance, see [Planned maintenance for virtual machines in Azure](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-planned-maintenance?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) &lt;br&gt;&lt;br&gt; Currently, a VM can only be added to availability set at creation time. An existing VM cannot be added to an availability set.
        /// </summary>
        [Input("availabilitySet")]
        public Input<Inputs.SubResourceArgs>? AvailabilitySet { get; set; }

        /// <summary>
        /// Specifies the boot diagnostic settings state. &lt;br&gt;&lt;br&gt;Minimum api-version: 2015-06-15.
        /// </summary>
        [Input("diagnosticsProfile")]
        public Input<Inputs.DiagnosticsProfileArgs>? DiagnosticsProfile { get; set; }

        /// <summary>
        /// Specifies the hardware settings for the virtual machine.
        /// </summary>
        [Input("hardwareProfile")]
        public Input<Inputs.HardwareProfileArgs>? HardwareProfile { get; set; }

        /// <summary>
        /// The identity of the virtual machine, if configured.
        /// </summary>
        [Input("identity")]
        public Input<Inputs.VirtualMachineIdentityArgs>? Identity { get; set; }

        /// <summary>
        /// Specifies that the image or disk that is being used was licensed on-premises. This element is only used for images that contain the Windows Server operating system. &lt;br&gt;&lt;br&gt; Possible values are: &lt;br&gt;&lt;br&gt; Windows_Client &lt;br&gt;&lt;br&gt; Windows_Server &lt;br&gt;&lt;br&gt; If this element is included in a request for an update, the value must match the initial value. This value cannot be updated. &lt;br&gt;&lt;br&gt; For more information, see [Azure Hybrid Use Benefit for Windows Server](https://docs.microsoft.com/azure/virtual-machines/virtual-machines-windows-hybrid-use-benefit-licensing?toc=%2fazure%2fvirtual-machines%2fwindows%2ftoc.json) &lt;br&gt;&lt;br&gt; Minimum api-version: 2015-06-15
        /// </summary>
        [Input("licenseType")]
        public Input<string>? LicenseType { get; set; }

        /// <summary>
        /// Resource location
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// Specifies the network interfaces of the virtual machine.
        /// </summary>
        [Input("networkProfile")]
        public Input<Inputs.NetworkProfileArgs>? NetworkProfile { get; set; }

        /// <summary>
        /// Specifies the operating system settings for the virtual machine.
        /// </summary>
        [Input("osProfile")]
        public Input<Inputs.OSProfileArgs>? OsProfile { get; set; }

        /// <summary>
        /// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started -&gt;**. Enter any required information and then click **Save**.
        /// </summary>
        [Input("plan")]
        public Input<Inputs.PlanArgs>? Plan { get; set; }

        /// <summary>
        /// Specifies information about the proximity placement group that the virtual machine should be assigned to. &lt;br&gt;&lt;br&gt;Minimum api-version: 2018-04-01.
        /// </summary>
        [Input("proximityPlacementGroup")]
        public Input<Inputs.SubResourceArgs>? ProximityPlacementGroup { get; set; }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// Specifies the storage settings for the virtual machine disks.
        /// </summary>
        [Input("storageProfile")]
        public Input<Inputs.StorageProfileArgs>? StorageProfile { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// The name of the virtual machine.
        /// </summary>
        [Input("vmName", required: true)]
        public Input<string> VmName { get; set; } = null!;

        [Input("zones")]
        private InputList<string>? _zones;

        /// <summary>
        /// The virtual machine zones.
        /// </summary>
        public InputList<string> Zones
        {
            get => _zones ?? (_zones = new InputList<string>());
            set => _zones = value;
        }

        public VirtualMachineArgs()
        {
        }
    }
}
