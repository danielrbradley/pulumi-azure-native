// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * The storage account credential
 *
 * ## StorageAccountCredentialsCreateOrUpdate
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 *
 * const storageAccountCredential = new azurerm.storsimple.v20161001.StorageAccountCredential("storageAccountCredential", {
 *     accessKey: {
 *         encryptionAlgorithm: "RSAES_PKCS1_v_1_5",
 *         encryptionCertificateThumbprint: "D73DB57C4CDD6761E159F8D1E8A7D759424983FD",
 *         value: "Ev1tm0QBmpGGm4a58GkqLqx8veJEEgQtg5K3Jizpmy7JdSv9dlcRwk59THw6KIdMDlEHcS8mPyneBtOEQsh4wkcFB7qrmQz+KsRAyIhEm6bwPEm3qN8+aDDzNcXn/6vu/sqV0AP7zit9/s7SxXGxjKrz4zKnOy16/DbzRRmUHNO+HO6JUM0cUfHXTX0mEecbsXqBq0A8IEG8z+bJgXX1EhoGkzE6yVsObm4S1AcKrLiwWjqmSLji5Q8gGO+y4KTTmC3p45h5GHHXjJyOccHhySWDAffxnTzUD/sOoh+aD2VkAYrL3DdnkVzhAdfcZfVI4soONx7tYMloZIVsfW1M2Q==",
 *     },
 *     cloudType: "Azure",
 *     credentialName: "DummySacForSDKTest",
 *     enableSSL: "Enabled",
 *     endPoint: "blob.core.windows.net",
 *     location: "West US",
 *     login: "SacForSDKTest",
 *     managerName: "hAzureSDKOperations",
 *     resourceGroupName: "ResourceGroupForSDKTest",
 * });
 *
 * ```
 */
export class StorageAccountCredential extends pulumi.CustomResource {
    /**
     * Get an existing StorageAccountCredential resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): StorageAccountCredential {
        return new StorageAccountCredential(name, undefined, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:storsimple/v20161001:StorageAccountCredential';

    /**
     * Returns true if the given object is an instance of StorageAccountCredential.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StorageAccountCredential {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StorageAccountCredential.__pulumiType;
    }

    /**
     * The details of the storage account password
     */
    public readonly accessKey!: pulumi.Output<outputs.storsimple.v20161001.AsymmetricEncryptedSecretResponse | undefined>;
    /**
     * The cloud service provider
     */
    public readonly cloudType!: pulumi.Output<string>;
    /**
     * SSL needs to be enabled or not
     */
    public readonly enableSSL!: pulumi.Output<string>;
    /**
     * The storage endpoint
     */
    public readonly endPoint!: pulumi.Output<string>;
    /**
     * The storage account's geo location
     */
    public readonly location!: pulumi.Output<string | undefined>;
    /**
     * The storage account login
     */
    public readonly login!: pulumi.Output<string>;
    /**
     * The name.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * The type.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a StorageAccountCredential resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StorageAccountCredentialArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, state: undefined, opts: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StorageAccountCredentialArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState as StorageAccountCredentialArgs | undefined;
            if (!args || args.cloudType === undefined) {
                throw new Error("Missing required property 'cloudType'");
            }
            if (!args || args.credentialName === undefined) {
                throw new Error("Missing required property 'credentialName'");
            }
            if (!args || args.enableSSL === undefined) {
                throw new Error("Missing required property 'enableSSL'");
            }
            if (!args || args.endPoint === undefined) {
                throw new Error("Missing required property 'endPoint'");
            }
            if (!args || args.login === undefined) {
                throw new Error("Missing required property 'login'");
            }
            if (!args || args.managerName === undefined) {
                throw new Error("Missing required property 'managerName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            inputs["accessKey"] = args ? args.accessKey : undefined;
            inputs["cloudType"] = args ? args.cloudType : undefined;
            inputs["credentialName"] = args ? args.credentialName : undefined;
            inputs["enableSSL"] = args ? args.enableSSL : undefined;
            inputs["endPoint"] = args ? args.endPoint : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["login"] = args ? args.login : undefined;
            inputs["managerName"] = args ? args.managerName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azurerm:storsimple/latest:StorageAccountCredential" }, { type: "azurerm:storsimple/v20170601:StorageAccountCredential" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(StorageAccountCredential.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a StorageAccountCredential resource.
 */
export interface StorageAccountCredentialArgs {
    /**
     * The details of the storage account password
     */
    readonly accessKey?: pulumi.Input<inputs.storsimple.v20161001.AsymmetricEncryptedSecret>;
    /**
     * The cloud service provider
     */
    readonly cloudType: pulumi.Input<string>;
    /**
     * The credential name.
     */
    readonly credentialName: pulumi.Input<string>;
    /**
     * SSL needs to be enabled or not
     */
    readonly enableSSL: pulumi.Input<string>;
    /**
     * The storage endpoint
     */
    readonly endPoint: pulumi.Input<string>;
    /**
     * The storage account's geo location
     */
    readonly location?: pulumi.Input<string>;
    /**
     * The storage account login
     */
    readonly login: pulumi.Input<string>;
    /**
     * The manager name
     */
    readonly managerName: pulumi.Input<string>;
    /**
     * The resource group name
     */
    readonly resourceGroupName: pulumi.Input<string>;
}
