# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs
from ._enums import *
from ._inputs import *

__all__ = ['WebAppConfiguration']


class WebAppConfiguration(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 always_on: Optional[pulumi.Input[bool]] = None,
                 api_definition: Optional[pulumi.Input[pulumi.InputType['ApiDefinitionInfoArgs']]] = None,
                 app_command_line: Optional[pulumi.Input[str]] = None,
                 app_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NameValuePairArgs']]]]] = None,
                 auto_heal_enabled: Optional[pulumi.Input[bool]] = None,
                 auto_heal_rules: Optional[pulumi.Input[pulumi.InputType['AutoHealRulesArgs']]] = None,
                 auto_swap_slot_name: Optional[pulumi.Input[str]] = None,
                 connection_strings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnStringInfoArgs']]]]] = None,
                 cors: Optional[pulumi.Input[pulumi.InputType['CorsSettingsArgs']]] = None,
                 default_documents: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 detailed_error_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 document_root: Optional[pulumi.Input[str]] = None,
                 experiments: Optional[pulumi.Input[pulumi.InputType['ExperimentsArgs']]] = None,
                 handler_mappings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HandlerMappingArgs']]]]] = None,
                 http20_enabled: Optional[pulumi.Input[bool]] = None,
                 http_logging_enabled: Optional[pulumi.Input[bool]] = None,
                 ip_security_restrictions: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IpSecurityRestrictionArgs']]]]] = None,
                 java_container: Optional[pulumi.Input[str]] = None,
                 java_container_version: Optional[pulumi.Input[str]] = None,
                 java_version: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 limits: Optional[pulumi.Input[pulumi.InputType['SiteLimitsArgs']]] = None,
                 linux_fx_version: Optional[pulumi.Input[str]] = None,
                 load_balancing: Optional[pulumi.Input['SiteLoadBalancing']] = None,
                 local_my_sql_enabled: Optional[pulumi.Input[bool]] = None,
                 logs_directory_size_limit: Optional[pulumi.Input[int]] = None,
                 managed_pipeline_mode: Optional[pulumi.Input['ManagedPipelineMode']] = None,
                 min_tls_version: Optional[pulumi.Input[Union[str, 'SupportedTlsVersions']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 net_framework_version: Optional[pulumi.Input[str]] = None,
                 node_version: Optional[pulumi.Input[str]] = None,
                 number_of_workers: Optional[pulumi.Input[int]] = None,
                 php_version: Optional[pulumi.Input[str]] = None,
                 publishing_username: Optional[pulumi.Input[str]] = None,
                 push: Optional[pulumi.Input[pulumi.InputType['PushSettingsArgs']]] = None,
                 python_version: Optional[pulumi.Input[str]] = None,
                 remote_debugging_enabled: Optional[pulumi.Input[bool]] = None,
                 remote_debugging_version: Optional[pulumi.Input[str]] = None,
                 request_tracing_enabled: Optional[pulumi.Input[bool]] = None,
                 request_tracing_expiration_time: Optional[pulumi.Input[str]] = None,
                 resource_group_name: Optional[pulumi.Input[str]] = None,
                 scm_type: Optional[pulumi.Input[Union[str, 'ScmType']]] = None,
                 tracing_options: Optional[pulumi.Input[str]] = None,
                 use32_bit_worker_process: Optional[pulumi.Input[bool]] = None,
                 virtual_applications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VirtualApplicationArgs']]]]] = None,
                 vnet_name: Optional[pulumi.Input[str]] = None,
                 web_sockets_enabled: Optional[pulumi.Input[bool]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Web app configuration ARM resource.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] always_on: <code>true</code> if Always On is enabled; otherwise, <code>false</code>.
        :param pulumi.Input[pulumi.InputType['ApiDefinitionInfoArgs']] api_definition: Information about the formal API definition for the app.
        :param pulumi.Input[str] app_command_line: App command line to launch.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['NameValuePairArgs']]]] app_settings: Application settings.
        :param pulumi.Input[bool] auto_heal_enabled: <code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.
        :param pulumi.Input[pulumi.InputType['AutoHealRulesArgs']] auto_heal_rules: Auto Heal rules.
        :param pulumi.Input[str] auto_swap_slot_name: Auto-swap slot name.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['ConnStringInfoArgs']]]] connection_strings: Connection strings.
        :param pulumi.Input[pulumi.InputType['CorsSettingsArgs']] cors: Cross-Origin Resource Sharing (CORS) settings.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] default_documents: Default documents.
        :param pulumi.Input[bool] detailed_error_logging_enabled: <code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.
        :param pulumi.Input[str] document_root: Document root.
        :param pulumi.Input[pulumi.InputType['ExperimentsArgs']] experiments: This is work around for polymorphic types.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['HandlerMappingArgs']]]] handler_mappings: Handler mappings.
        :param pulumi.Input[bool] http20_enabled: Http20Enabled: configures a web site to allow clients to connect over http2.0
        :param pulumi.Input[bool] http_logging_enabled: <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['IpSecurityRestrictionArgs']]]] ip_security_restrictions: IP security restrictions.
        :param pulumi.Input[str] java_container: Java container.
        :param pulumi.Input[str] java_container_version: Java container version.
        :param pulumi.Input[str] java_version: Java version.
        :param pulumi.Input[str] kind: Kind of resource.
        :param pulumi.Input[pulumi.InputType['SiteLimitsArgs']] limits: Site limits.
        :param pulumi.Input[str] linux_fx_version: Linux App Framework and version
        :param pulumi.Input['SiteLoadBalancing'] load_balancing: Site load balancing.
        :param pulumi.Input[bool] local_my_sql_enabled: <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
        :param pulumi.Input[int] logs_directory_size_limit: HTTP logs directory size limit.
        :param pulumi.Input['ManagedPipelineMode'] managed_pipeline_mode: Managed pipeline mode.
        :param pulumi.Input[Union[str, 'SupportedTlsVersions']] min_tls_version: MinTlsVersion: configures the minimum version of TLS required for SSL requests
        :param pulumi.Input[str] name: Name of the app.
        :param pulumi.Input[str] net_framework_version: .NET Framework version.
        :param pulumi.Input[str] node_version: Version of Node.js.
        :param pulumi.Input[int] number_of_workers: Number of workers.
        :param pulumi.Input[str] php_version: Version of PHP.
        :param pulumi.Input[str] publishing_username: Publishing user name.
        :param pulumi.Input[pulumi.InputType['PushSettingsArgs']] push: Push endpoint settings.
        :param pulumi.Input[str] python_version: Version of Python.
        :param pulumi.Input[bool] remote_debugging_enabled: <code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.
        :param pulumi.Input[str] remote_debugging_version: Remote debugging version.
        :param pulumi.Input[bool] request_tracing_enabled: <code>true</code> if request tracing is enabled; otherwise, <code>false</code>.
        :param pulumi.Input[str] request_tracing_expiration_time: Request tracing expiration time.
        :param pulumi.Input[str] resource_group_name: Name of the resource group to which the resource belongs.
        :param pulumi.Input[Union[str, 'ScmType']] scm_type: SCM type.
        :param pulumi.Input[str] tracing_options: Tracing options.
        :param pulumi.Input[bool] use32_bit_worker_process: <code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['VirtualApplicationArgs']]]] virtual_applications: Virtual applications.
        :param pulumi.Input[str] vnet_name: Virtual Network name.
        :param pulumi.Input[bool] web_sockets_enabled: <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['always_on'] = always_on
            __props__['api_definition'] = api_definition
            __props__['app_command_line'] = app_command_line
            __props__['app_settings'] = app_settings
            __props__['auto_heal_enabled'] = auto_heal_enabled
            __props__['auto_heal_rules'] = auto_heal_rules
            __props__['auto_swap_slot_name'] = auto_swap_slot_name
            __props__['connection_strings'] = connection_strings
            __props__['cors'] = cors
            __props__['default_documents'] = default_documents
            __props__['detailed_error_logging_enabled'] = detailed_error_logging_enabled
            __props__['document_root'] = document_root
            __props__['experiments'] = experiments
            __props__['handler_mappings'] = handler_mappings
            if http20_enabled is None:
                http20_enabled = True
            __props__['http20_enabled'] = http20_enabled
            __props__['http_logging_enabled'] = http_logging_enabled
            __props__['ip_security_restrictions'] = ip_security_restrictions
            __props__['java_container'] = java_container
            __props__['java_container_version'] = java_container_version
            __props__['java_version'] = java_version
            __props__['kind'] = kind
            __props__['limits'] = limits
            __props__['linux_fx_version'] = linux_fx_version
            __props__['load_balancing'] = load_balancing
            if local_my_sql_enabled is None:
                local_my_sql_enabled = False
            __props__['local_my_sql_enabled'] = local_my_sql_enabled
            __props__['logs_directory_size_limit'] = logs_directory_size_limit
            __props__['managed_pipeline_mode'] = managed_pipeline_mode
            __props__['min_tls_version'] = min_tls_version
            if name is None and not opts.urn:
                raise TypeError("Missing required property 'name'")
            __props__['name'] = name
            if net_framework_version is None:
                net_framework_version = 'v4.6'
            __props__['net_framework_version'] = net_framework_version
            __props__['node_version'] = node_version
            __props__['number_of_workers'] = number_of_workers
            __props__['php_version'] = php_version
            __props__['publishing_username'] = publishing_username
            __props__['push'] = push
            __props__['python_version'] = python_version
            __props__['remote_debugging_enabled'] = remote_debugging_enabled
            __props__['remote_debugging_version'] = remote_debugging_version
            __props__['request_tracing_enabled'] = request_tracing_enabled
            __props__['request_tracing_expiration_time'] = request_tracing_expiration_time
            if resource_group_name is None and not opts.urn:
                raise TypeError("Missing required property 'resource_group_name'")
            __props__['resource_group_name'] = resource_group_name
            __props__['scm_type'] = scm_type
            __props__['tracing_options'] = tracing_options
            __props__['use32_bit_worker_process'] = use32_bit_worker_process
            __props__['virtual_applications'] = virtual_applications
            __props__['vnet_name'] = vnet_name
            __props__['web_sockets_enabled'] = web_sockets_enabled
            __props__['machine_key'] = None
            __props__['type'] = None
        alias_opts = pulumi.ResourceOptions(aliases=[pulumi.Alias(type_="azure-nextgen:web/v20160801:WebAppConfiguration"), pulumi.Alias(type_="azure-native:web:WebAppConfiguration"), pulumi.Alias(type_="azure-nextgen:web:WebAppConfiguration"), pulumi.Alias(type_="azure-native:web/latest:WebAppConfiguration"), pulumi.Alias(type_="azure-nextgen:web/latest:WebAppConfiguration"), pulumi.Alias(type_="azure-native:web/v20150801:WebAppConfiguration"), pulumi.Alias(type_="azure-nextgen:web/v20150801:WebAppConfiguration"), pulumi.Alias(type_="azure-native:web/v20180201:WebAppConfiguration"), pulumi.Alias(type_="azure-nextgen:web/v20180201:WebAppConfiguration"), pulumi.Alias(type_="azure-native:web/v20181101:WebAppConfiguration"), pulumi.Alias(type_="azure-nextgen:web/v20181101:WebAppConfiguration"), pulumi.Alias(type_="azure-native:web/v20190801:WebAppConfiguration"), pulumi.Alias(type_="azure-nextgen:web/v20190801:WebAppConfiguration"), pulumi.Alias(type_="azure-native:web/v20200601:WebAppConfiguration"), pulumi.Alias(type_="azure-nextgen:web/v20200601:WebAppConfiguration"), pulumi.Alias(type_="azure-native:web/v20200901:WebAppConfiguration"), pulumi.Alias(type_="azure-nextgen:web/v20200901:WebAppConfiguration"), pulumi.Alias(type_="azure-native:web/v20201001:WebAppConfiguration"), pulumi.Alias(type_="azure-nextgen:web/v20201001:WebAppConfiguration")])
        opts = pulumi.ResourceOptions.merge(opts, alias_opts)
        super(WebAppConfiguration, __self__).__init__(
            'azure-native:web/v20160801:WebAppConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'WebAppConfiguration':
        """
        Get an existing WebAppConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["always_on"] = None
        __props__["api_definition"] = None
        __props__["app_command_line"] = None
        __props__["app_settings"] = None
        __props__["auto_heal_enabled"] = None
        __props__["auto_heal_rules"] = None
        __props__["auto_swap_slot_name"] = None
        __props__["connection_strings"] = None
        __props__["cors"] = None
        __props__["default_documents"] = None
        __props__["detailed_error_logging_enabled"] = None
        __props__["document_root"] = None
        __props__["experiments"] = None
        __props__["handler_mappings"] = None
        __props__["http20_enabled"] = None
        __props__["http_logging_enabled"] = None
        __props__["ip_security_restrictions"] = None
        __props__["java_container"] = None
        __props__["java_container_version"] = None
        __props__["java_version"] = None
        __props__["kind"] = None
        __props__["limits"] = None
        __props__["linux_fx_version"] = None
        __props__["load_balancing"] = None
        __props__["local_my_sql_enabled"] = None
        __props__["logs_directory_size_limit"] = None
        __props__["machine_key"] = None
        __props__["managed_pipeline_mode"] = None
        __props__["min_tls_version"] = None
        __props__["name"] = None
        __props__["net_framework_version"] = None
        __props__["node_version"] = None
        __props__["number_of_workers"] = None
        __props__["php_version"] = None
        __props__["publishing_username"] = None
        __props__["push"] = None
        __props__["python_version"] = None
        __props__["remote_debugging_enabled"] = None
        __props__["remote_debugging_version"] = None
        __props__["request_tracing_enabled"] = None
        __props__["request_tracing_expiration_time"] = None
        __props__["scm_type"] = None
        __props__["tracing_options"] = None
        __props__["type"] = None
        __props__["use32_bit_worker_process"] = None
        __props__["virtual_applications"] = None
        __props__["vnet_name"] = None
        __props__["web_sockets_enabled"] = None
        return WebAppConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alwaysOn")
    def always_on(self) -> pulumi.Output[Optional[bool]]:
        """
        <code>true</code> if Always On is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "always_on")

    @property
    @pulumi.getter(name="apiDefinition")
    def api_definition(self) -> pulumi.Output[Optional['outputs.ApiDefinitionInfoResponse']]:
        """
        Information about the formal API definition for the app.
        """
        return pulumi.get(self, "api_definition")

    @property
    @pulumi.getter(name="appCommandLine")
    def app_command_line(self) -> pulumi.Output[Optional[str]]:
        """
        App command line to launch.
        """
        return pulumi.get(self, "app_command_line")

    @property
    @pulumi.getter(name="appSettings")
    def app_settings(self) -> pulumi.Output[Optional[Sequence['outputs.NameValuePairResponse']]]:
        """
        Application settings.
        """
        return pulumi.get(self, "app_settings")

    @property
    @pulumi.getter(name="autoHealEnabled")
    def auto_heal_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        <code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "auto_heal_enabled")

    @property
    @pulumi.getter(name="autoHealRules")
    def auto_heal_rules(self) -> pulumi.Output[Optional['outputs.AutoHealRulesResponse']]:
        """
        Auto Heal rules.
        """
        return pulumi.get(self, "auto_heal_rules")

    @property
    @pulumi.getter(name="autoSwapSlotName")
    def auto_swap_slot_name(self) -> pulumi.Output[Optional[str]]:
        """
        Auto-swap slot name.
        """
        return pulumi.get(self, "auto_swap_slot_name")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> pulumi.Output[Optional[Sequence['outputs.ConnStringInfoResponse']]]:
        """
        Connection strings.
        """
        return pulumi.get(self, "connection_strings")

    @property
    @pulumi.getter
    def cors(self) -> pulumi.Output[Optional['outputs.CorsSettingsResponse']]:
        """
        Cross-Origin Resource Sharing (CORS) settings.
        """
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="defaultDocuments")
    def default_documents(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Default documents.
        """
        return pulumi.get(self, "default_documents")

    @property
    @pulumi.getter(name="detailedErrorLoggingEnabled")
    def detailed_error_logging_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        <code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "detailed_error_logging_enabled")

    @property
    @pulumi.getter(name="documentRoot")
    def document_root(self) -> pulumi.Output[Optional[str]]:
        """
        Document root.
        """
        return pulumi.get(self, "document_root")

    @property
    @pulumi.getter
    def experiments(self) -> pulumi.Output[Optional['outputs.ExperimentsResponse']]:
        """
        This is work around for polymorphic types.
        """
        return pulumi.get(self, "experiments")

    @property
    @pulumi.getter(name="handlerMappings")
    def handler_mappings(self) -> pulumi.Output[Optional[Sequence['outputs.HandlerMappingResponse']]]:
        """
        Handler mappings.
        """
        return pulumi.get(self, "handler_mappings")

    @property
    @pulumi.getter(name="http20Enabled")
    def http20_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        Http20Enabled: configures a web site to allow clients to connect over http2.0
        """
        return pulumi.get(self, "http20_enabled")

    @property
    @pulumi.getter(name="httpLoggingEnabled")
    def http_logging_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "http_logging_enabled")

    @property
    @pulumi.getter(name="ipSecurityRestrictions")
    def ip_security_restrictions(self) -> pulumi.Output[Optional[Sequence['outputs.IpSecurityRestrictionResponse']]]:
        """
        IP security restrictions.
        """
        return pulumi.get(self, "ip_security_restrictions")

    @property
    @pulumi.getter(name="javaContainer")
    def java_container(self) -> pulumi.Output[Optional[str]]:
        """
        Java container.
        """
        return pulumi.get(self, "java_container")

    @property
    @pulumi.getter(name="javaContainerVersion")
    def java_container_version(self) -> pulumi.Output[Optional[str]]:
        """
        Java container version.
        """
        return pulumi.get(self, "java_container_version")

    @property
    @pulumi.getter(name="javaVersion")
    def java_version(self) -> pulumi.Output[Optional[str]]:
        """
        Java version.
        """
        return pulumi.get(self, "java_version")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[str]]:
        """
        Kind of resource.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def limits(self) -> pulumi.Output[Optional['outputs.SiteLimitsResponse']]:
        """
        Site limits.
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter(name="linuxFxVersion")
    def linux_fx_version(self) -> pulumi.Output[Optional[str]]:
        """
        Linux App Framework and version
        """
        return pulumi.get(self, "linux_fx_version")

    @property
    @pulumi.getter(name="loadBalancing")
    def load_balancing(self) -> pulumi.Output[Optional[str]]:
        """
        Site load balancing.
        """
        return pulumi.get(self, "load_balancing")

    @property
    @pulumi.getter(name="localMySqlEnabled")
    def local_my_sql_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "local_my_sql_enabled")

    @property
    @pulumi.getter(name="logsDirectorySizeLimit")
    def logs_directory_size_limit(self) -> pulumi.Output[Optional[int]]:
        """
        HTTP logs directory size limit.
        """
        return pulumi.get(self, "logs_directory_size_limit")

    @property
    @pulumi.getter(name="machineKey")
    def machine_key(self) -> pulumi.Output['outputs.SiteMachineKeyResponse']:
        """
        Site MachineKey.
        """
        return pulumi.get(self, "machine_key")

    @property
    @pulumi.getter(name="managedPipelineMode")
    def managed_pipeline_mode(self) -> pulumi.Output[Optional[str]]:
        """
        Managed pipeline mode.
        """
        return pulumi.get(self, "managed_pipeline_mode")

    @property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> pulumi.Output[Optional[str]]:
        """
        MinTlsVersion: configures the minimum version of TLS required for SSL requests
        """
        return pulumi.get(self, "min_tls_version")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="netFrameworkVersion")
    def net_framework_version(self) -> pulumi.Output[Optional[str]]:
        """
        .NET Framework version.
        """
        return pulumi.get(self, "net_framework_version")

    @property
    @pulumi.getter(name="nodeVersion")
    def node_version(self) -> pulumi.Output[Optional[str]]:
        """
        Version of Node.js.
        """
        return pulumi.get(self, "node_version")

    @property
    @pulumi.getter(name="numberOfWorkers")
    def number_of_workers(self) -> pulumi.Output[Optional[int]]:
        """
        Number of workers.
        """
        return pulumi.get(self, "number_of_workers")

    @property
    @pulumi.getter(name="phpVersion")
    def php_version(self) -> pulumi.Output[Optional[str]]:
        """
        Version of PHP.
        """
        return pulumi.get(self, "php_version")

    @property
    @pulumi.getter(name="publishingUsername")
    def publishing_username(self) -> pulumi.Output[Optional[str]]:
        """
        Publishing user name.
        """
        return pulumi.get(self, "publishing_username")

    @property
    @pulumi.getter
    def push(self) -> pulumi.Output[Optional['outputs.PushSettingsResponse']]:
        """
        Push endpoint settings.
        """
        return pulumi.get(self, "push")

    @property
    @pulumi.getter(name="pythonVersion")
    def python_version(self) -> pulumi.Output[Optional[str]]:
        """
        Version of Python.
        """
        return pulumi.get(self, "python_version")

    @property
    @pulumi.getter(name="remoteDebuggingEnabled")
    def remote_debugging_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        <code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "remote_debugging_enabled")

    @property
    @pulumi.getter(name="remoteDebuggingVersion")
    def remote_debugging_version(self) -> pulumi.Output[Optional[str]]:
        """
        Remote debugging version.
        """
        return pulumi.get(self, "remote_debugging_version")

    @property
    @pulumi.getter(name="requestTracingEnabled")
    def request_tracing_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        <code>true</code> if request tracing is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "request_tracing_enabled")

    @property
    @pulumi.getter(name="requestTracingExpirationTime")
    def request_tracing_expiration_time(self) -> pulumi.Output[Optional[str]]:
        """
        Request tracing expiration time.
        """
        return pulumi.get(self, "request_tracing_expiration_time")

    @property
    @pulumi.getter(name="scmType")
    def scm_type(self) -> pulumi.Output[Optional[str]]:
        """
        SCM type.
        """
        return pulumi.get(self, "scm_type")

    @property
    @pulumi.getter(name="tracingOptions")
    def tracing_options(self) -> pulumi.Output[Optional[str]]:
        """
        Tracing options.
        """
        return pulumi.get(self, "tracing_options")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="use32BitWorkerProcess")
    def use32_bit_worker_process(self) -> pulumi.Output[Optional[bool]]:
        """
        <code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "use32_bit_worker_process")

    @property
    @pulumi.getter(name="virtualApplications")
    def virtual_applications(self) -> pulumi.Output[Optional[Sequence['outputs.VirtualApplicationResponse']]]:
        """
        Virtual applications.
        """
        return pulumi.get(self, "virtual_applications")

    @property
    @pulumi.getter(name="vnetName")
    def vnet_name(self) -> pulumi.Output[Optional[str]]:
        """
        Virtual Network name.
        """
        return pulumi.get(self, "vnet_name")

    @property
    @pulumi.getter(name="webSocketsEnabled")
    def web_sockets_enabled(self) -> pulumi.Output[Optional[bool]]:
        """
        <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "web_sockets_enabled")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

