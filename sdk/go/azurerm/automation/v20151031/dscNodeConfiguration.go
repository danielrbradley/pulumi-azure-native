// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20151031

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Definition of the dsc node configuration.
//
// ## Example Usage
// ### Get a DSC node configuration
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	automation "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/automation/v20151031"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := automation.NewDscNodeConfiguration(ctx, "dscNodeConfiguration", &automation.DscNodeConfigurationArgs{
// 			AutomationAccountName: pulumi.String("myAutomationAccount20"),
// 			Configuration: &automation.DscConfigurationAssociationPropertyArgs{
// 				Name: pulumi.String("configName"),
// 			},
// 			IncrementNodeConfigurationBuild: pulumi.Bool(true),
// 			Name:                            pulumi.String("configName.nodeConfigName"),
// 			NodeConfigurationName:           pulumi.String("configName.nodeConfigName"),
// 			ResourceGroupName:               pulumi.String("rg"),
// 			Source: &automation.ContentSourceArgs{
// 				Hash: &automation.ContentHashArgs{
// 					Algorithm: pulumi.String("sha256"),
// 					Value:     pulumi.String("6DE256A57F01BFA29B88696D5E77A383D6E61484C7686E8DB955FA10ACE9FFE5"),
// 				},
// 				Type: pulumi.String("embeddedContent"),
// 				Value: pulumi.String(fmt.Sprintf("%v%v%v", "\ninstance of MSFT_RoleResource as ", "$", "MSFT_RoleResource1ref\n{\nResourceID = \"[WindowsFeature]IIS\";\n Ensure = \"Present\";\n SourceInfo = \"::3::32::WindowsFeature\";\n Name = \"Web-Server\";\n ModuleName = \"PsDesiredStateConfiguration\";\n\nModuleVersion = \"1.0\";\n ConfigurationName = \"configName\";\n};\ninstance of OMI_ConfigurationDocument\n\n                    {\n Version=\"2.0.0\";\n \n                        MinimumCompatibleVersion = \"1.0.0\";\n \n                        CompatibleVersionAdditionalProperties= {\"Omi_BaseResource:ConfigurationName\"};\n \n                        Author=\"weijiel\";\n \n                        GenerationDate=\"03/30/2017 13:40:25\";\n \n                        GenerationHost=\"TEST-BACKEND\";\n \n                        Name=\"configName\";\n\n                    };\n")),
// 				Version: pulumi.String("1.0"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
type DscNodeConfiguration struct {
	pulumi.CustomResourceState

	// Gets or sets the configuration of the node.
	Configuration DscConfigurationAssociationPropertyResponsePtrOutput `pulumi:"configuration"`
	// Gets or sets creation time.
	CreationTime pulumi.StringPtrOutput `pulumi:"creationTime"`
	// Gets or sets the last modified time.
	LastModifiedTime pulumi.StringPtrOutput `pulumi:"lastModifiedTime"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewDscNodeConfiguration registers a new resource with the given unique name, arguments, and options.
func NewDscNodeConfiguration(ctx *pulumi.Context,
	name string, args *DscNodeConfigurationArgs, opts ...pulumi.ResourceOption) (*DscNodeConfiguration, error) {
	if args == nil || args.AutomationAccountName == nil {
		return nil, errors.New("missing required argument 'AutomationAccountName'")
	}
	if args == nil || args.Configuration == nil {
		return nil, errors.New("missing required argument 'Configuration'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.NodeConfigurationName == nil {
		return nil, errors.New("missing required argument 'NodeConfigurationName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Source == nil {
		return nil, errors.New("missing required argument 'Source'")
	}
	if args == nil {
		args = &DscNodeConfigurationArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azurerm:automation/latest:DscNodeConfiguration"),
		},
		{
			Type: pulumi.String("azurerm:automation/v20180115:DscNodeConfiguration"),
		},
	})
	opts = append(opts, aliases)
	var resource DscNodeConfiguration
	err := ctx.RegisterResource("azurerm:automation/v20151031:DscNodeConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDscNodeConfiguration gets an existing DscNodeConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDscNodeConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DscNodeConfigurationState, opts ...pulumi.ResourceOption) (*DscNodeConfiguration, error) {
	var resource DscNodeConfiguration
	err := ctx.ReadResource("azurerm:automation/v20151031:DscNodeConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DscNodeConfiguration resources.
type dscNodeConfigurationState struct {
	// Gets or sets the configuration of the node.
	Configuration *DscConfigurationAssociationPropertyResponse `pulumi:"configuration"`
	// Gets or sets creation time.
	CreationTime *string `pulumi:"creationTime"`
	// Gets or sets the last modified time.
	LastModifiedTime *string `pulumi:"lastModifiedTime"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// The type of the resource.
	Type *string `pulumi:"type"`
}

type DscNodeConfigurationState struct {
	// Gets or sets the configuration of the node.
	Configuration DscConfigurationAssociationPropertyResponsePtrInput
	// Gets or sets creation time.
	CreationTime pulumi.StringPtrInput
	// Gets or sets the last modified time.
	LastModifiedTime pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// The type of the resource.
	Type pulumi.StringPtrInput
}

func (DscNodeConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*dscNodeConfigurationState)(nil)).Elem()
}

type dscNodeConfigurationArgs struct {
	// The name of the automation account.
	AutomationAccountName string `pulumi:"automationAccountName"`
	// Gets or sets the configuration of the node.
	Configuration DscConfigurationAssociationProperty `pulumi:"configuration"`
	// If a new build version of NodeConfiguration is required.
	IncrementNodeConfigurationBuild *bool `pulumi:"incrementNodeConfigurationBuild"`
	// Name of the node configuration.
	Name string `pulumi:"name"`
	// The create or update parameters for configuration.
	NodeConfigurationName string `pulumi:"nodeConfigurationName"`
	// Name of an Azure Resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Gets or sets the source.
	Source ContentSource `pulumi:"source"`
}

// The set of arguments for constructing a DscNodeConfiguration resource.
type DscNodeConfigurationArgs struct {
	// The name of the automation account.
	AutomationAccountName pulumi.StringInput
	// Gets or sets the configuration of the node.
	Configuration DscConfigurationAssociationPropertyInput
	// If a new build version of NodeConfiguration is required.
	IncrementNodeConfigurationBuild pulumi.BoolPtrInput
	// Name of the node configuration.
	Name pulumi.StringInput
	// The create or update parameters for configuration.
	NodeConfigurationName pulumi.StringInput
	// Name of an Azure Resource group.
	ResourceGroupName pulumi.StringInput
	// Gets or sets the source.
	Source ContentSourceInput
}

func (DscNodeConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dscNodeConfigurationArgs)(nil)).Elem()
}
