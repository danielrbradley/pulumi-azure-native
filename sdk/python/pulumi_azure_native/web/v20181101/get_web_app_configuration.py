# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from ... import _utilities, _tables
from . import outputs

__all__ = [
    'GetWebAppConfigurationResult',
    'AwaitableGetWebAppConfigurationResult',
    'get_web_app_configuration',
]

@pulumi.output_type
class GetWebAppConfigurationResult:
    """
    Web app configuration ARM resource.
    """
    def __init__(__self__, always_on=None, api_definition=None, app_command_line=None, app_settings=None, auto_heal_enabled=None, auto_heal_rules=None, auto_swap_slot_name=None, azure_storage_accounts=None, connection_strings=None, cors=None, default_documents=None, detailed_error_logging_enabled=None, document_root=None, experiments=None, ftps_state=None, handler_mappings=None, http20_enabled=None, http_logging_enabled=None, id=None, ip_security_restrictions=None, java_container=None, java_container_version=None, java_version=None, kind=None, limits=None, linux_fx_version=None, load_balancing=None, local_my_sql_enabled=None, logs_directory_size_limit=None, machine_key=None, managed_pipeline_mode=None, managed_service_identity_id=None, min_tls_version=None, name=None, net_framework_version=None, node_version=None, number_of_workers=None, php_version=None, publishing_username=None, push=None, python_version=None, remote_debugging_enabled=None, remote_debugging_version=None, request_tracing_enabled=None, request_tracing_expiration_time=None, reserved_instance_count=None, scm_ip_security_restrictions=None, scm_ip_security_restrictions_use_main=None, scm_type=None, tracing_options=None, type=None, use32_bit_worker_process=None, virtual_applications=None, vnet_name=None, web_sockets_enabled=None, windows_fx_version=None, x_managed_service_identity_id=None):
        if always_on and not isinstance(always_on, bool):
            raise TypeError("Expected argument 'always_on' to be a bool")
        pulumi.set(__self__, "always_on", always_on)
        if api_definition and not isinstance(api_definition, dict):
            raise TypeError("Expected argument 'api_definition' to be a dict")
        pulumi.set(__self__, "api_definition", api_definition)
        if app_command_line and not isinstance(app_command_line, str):
            raise TypeError("Expected argument 'app_command_line' to be a str")
        pulumi.set(__self__, "app_command_line", app_command_line)
        if app_settings and not isinstance(app_settings, list):
            raise TypeError("Expected argument 'app_settings' to be a list")
        pulumi.set(__self__, "app_settings", app_settings)
        if auto_heal_enabled and not isinstance(auto_heal_enabled, bool):
            raise TypeError("Expected argument 'auto_heal_enabled' to be a bool")
        pulumi.set(__self__, "auto_heal_enabled", auto_heal_enabled)
        if auto_heal_rules and not isinstance(auto_heal_rules, dict):
            raise TypeError("Expected argument 'auto_heal_rules' to be a dict")
        pulumi.set(__self__, "auto_heal_rules", auto_heal_rules)
        if auto_swap_slot_name and not isinstance(auto_swap_slot_name, str):
            raise TypeError("Expected argument 'auto_swap_slot_name' to be a str")
        pulumi.set(__self__, "auto_swap_slot_name", auto_swap_slot_name)
        if azure_storage_accounts and not isinstance(azure_storage_accounts, dict):
            raise TypeError("Expected argument 'azure_storage_accounts' to be a dict")
        pulumi.set(__self__, "azure_storage_accounts", azure_storage_accounts)
        if connection_strings and not isinstance(connection_strings, list):
            raise TypeError("Expected argument 'connection_strings' to be a list")
        pulumi.set(__self__, "connection_strings", connection_strings)
        if cors and not isinstance(cors, dict):
            raise TypeError("Expected argument 'cors' to be a dict")
        pulumi.set(__self__, "cors", cors)
        if default_documents and not isinstance(default_documents, list):
            raise TypeError("Expected argument 'default_documents' to be a list")
        pulumi.set(__self__, "default_documents", default_documents)
        if detailed_error_logging_enabled and not isinstance(detailed_error_logging_enabled, bool):
            raise TypeError("Expected argument 'detailed_error_logging_enabled' to be a bool")
        pulumi.set(__self__, "detailed_error_logging_enabled", detailed_error_logging_enabled)
        if document_root and not isinstance(document_root, str):
            raise TypeError("Expected argument 'document_root' to be a str")
        pulumi.set(__self__, "document_root", document_root)
        if experiments and not isinstance(experiments, dict):
            raise TypeError("Expected argument 'experiments' to be a dict")
        pulumi.set(__self__, "experiments", experiments)
        if ftps_state and not isinstance(ftps_state, str):
            raise TypeError("Expected argument 'ftps_state' to be a str")
        pulumi.set(__self__, "ftps_state", ftps_state)
        if handler_mappings and not isinstance(handler_mappings, list):
            raise TypeError("Expected argument 'handler_mappings' to be a list")
        pulumi.set(__self__, "handler_mappings", handler_mappings)
        if http20_enabled and not isinstance(http20_enabled, bool):
            raise TypeError("Expected argument 'http20_enabled' to be a bool")
        pulumi.set(__self__, "http20_enabled", http20_enabled)
        if http_logging_enabled and not isinstance(http_logging_enabled, bool):
            raise TypeError("Expected argument 'http_logging_enabled' to be a bool")
        pulumi.set(__self__, "http_logging_enabled", http_logging_enabled)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ip_security_restrictions and not isinstance(ip_security_restrictions, list):
            raise TypeError("Expected argument 'ip_security_restrictions' to be a list")
        pulumi.set(__self__, "ip_security_restrictions", ip_security_restrictions)
        if java_container and not isinstance(java_container, str):
            raise TypeError("Expected argument 'java_container' to be a str")
        pulumi.set(__self__, "java_container", java_container)
        if java_container_version and not isinstance(java_container_version, str):
            raise TypeError("Expected argument 'java_container_version' to be a str")
        pulumi.set(__self__, "java_container_version", java_container_version)
        if java_version and not isinstance(java_version, str):
            raise TypeError("Expected argument 'java_version' to be a str")
        pulumi.set(__self__, "java_version", java_version)
        if kind and not isinstance(kind, str):
            raise TypeError("Expected argument 'kind' to be a str")
        pulumi.set(__self__, "kind", kind)
        if limits and not isinstance(limits, dict):
            raise TypeError("Expected argument 'limits' to be a dict")
        pulumi.set(__self__, "limits", limits)
        if linux_fx_version and not isinstance(linux_fx_version, str):
            raise TypeError("Expected argument 'linux_fx_version' to be a str")
        pulumi.set(__self__, "linux_fx_version", linux_fx_version)
        if load_balancing and not isinstance(load_balancing, str):
            raise TypeError("Expected argument 'load_balancing' to be a str")
        pulumi.set(__self__, "load_balancing", load_balancing)
        if local_my_sql_enabled and not isinstance(local_my_sql_enabled, bool):
            raise TypeError("Expected argument 'local_my_sql_enabled' to be a bool")
        pulumi.set(__self__, "local_my_sql_enabled", local_my_sql_enabled)
        if logs_directory_size_limit and not isinstance(logs_directory_size_limit, int):
            raise TypeError("Expected argument 'logs_directory_size_limit' to be a int")
        pulumi.set(__self__, "logs_directory_size_limit", logs_directory_size_limit)
        if machine_key and not isinstance(machine_key, dict):
            raise TypeError("Expected argument 'machine_key' to be a dict")
        pulumi.set(__self__, "machine_key", machine_key)
        if managed_pipeline_mode and not isinstance(managed_pipeline_mode, str):
            raise TypeError("Expected argument 'managed_pipeline_mode' to be a str")
        pulumi.set(__self__, "managed_pipeline_mode", managed_pipeline_mode)
        if managed_service_identity_id and not isinstance(managed_service_identity_id, int):
            raise TypeError("Expected argument 'managed_service_identity_id' to be a int")
        pulumi.set(__self__, "managed_service_identity_id", managed_service_identity_id)
        if min_tls_version and not isinstance(min_tls_version, str):
            raise TypeError("Expected argument 'min_tls_version' to be a str")
        pulumi.set(__self__, "min_tls_version", min_tls_version)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if net_framework_version and not isinstance(net_framework_version, str):
            raise TypeError("Expected argument 'net_framework_version' to be a str")
        pulumi.set(__self__, "net_framework_version", net_framework_version)
        if node_version and not isinstance(node_version, str):
            raise TypeError("Expected argument 'node_version' to be a str")
        pulumi.set(__self__, "node_version", node_version)
        if number_of_workers and not isinstance(number_of_workers, int):
            raise TypeError("Expected argument 'number_of_workers' to be a int")
        pulumi.set(__self__, "number_of_workers", number_of_workers)
        if php_version and not isinstance(php_version, str):
            raise TypeError("Expected argument 'php_version' to be a str")
        pulumi.set(__self__, "php_version", php_version)
        if publishing_username and not isinstance(publishing_username, str):
            raise TypeError("Expected argument 'publishing_username' to be a str")
        pulumi.set(__self__, "publishing_username", publishing_username)
        if push and not isinstance(push, dict):
            raise TypeError("Expected argument 'push' to be a dict")
        pulumi.set(__self__, "push", push)
        if python_version and not isinstance(python_version, str):
            raise TypeError("Expected argument 'python_version' to be a str")
        pulumi.set(__self__, "python_version", python_version)
        if remote_debugging_enabled and not isinstance(remote_debugging_enabled, bool):
            raise TypeError("Expected argument 'remote_debugging_enabled' to be a bool")
        pulumi.set(__self__, "remote_debugging_enabled", remote_debugging_enabled)
        if remote_debugging_version and not isinstance(remote_debugging_version, str):
            raise TypeError("Expected argument 'remote_debugging_version' to be a str")
        pulumi.set(__self__, "remote_debugging_version", remote_debugging_version)
        if request_tracing_enabled and not isinstance(request_tracing_enabled, bool):
            raise TypeError("Expected argument 'request_tracing_enabled' to be a bool")
        pulumi.set(__self__, "request_tracing_enabled", request_tracing_enabled)
        if request_tracing_expiration_time and not isinstance(request_tracing_expiration_time, str):
            raise TypeError("Expected argument 'request_tracing_expiration_time' to be a str")
        pulumi.set(__self__, "request_tracing_expiration_time", request_tracing_expiration_time)
        if reserved_instance_count and not isinstance(reserved_instance_count, int):
            raise TypeError("Expected argument 'reserved_instance_count' to be a int")
        pulumi.set(__self__, "reserved_instance_count", reserved_instance_count)
        if scm_ip_security_restrictions and not isinstance(scm_ip_security_restrictions, list):
            raise TypeError("Expected argument 'scm_ip_security_restrictions' to be a list")
        pulumi.set(__self__, "scm_ip_security_restrictions", scm_ip_security_restrictions)
        if scm_ip_security_restrictions_use_main and not isinstance(scm_ip_security_restrictions_use_main, bool):
            raise TypeError("Expected argument 'scm_ip_security_restrictions_use_main' to be a bool")
        pulumi.set(__self__, "scm_ip_security_restrictions_use_main", scm_ip_security_restrictions_use_main)
        if scm_type and not isinstance(scm_type, str):
            raise TypeError("Expected argument 'scm_type' to be a str")
        pulumi.set(__self__, "scm_type", scm_type)
        if tracing_options and not isinstance(tracing_options, str):
            raise TypeError("Expected argument 'tracing_options' to be a str")
        pulumi.set(__self__, "tracing_options", tracing_options)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)
        if use32_bit_worker_process and not isinstance(use32_bit_worker_process, bool):
            raise TypeError("Expected argument 'use32_bit_worker_process' to be a bool")
        pulumi.set(__self__, "use32_bit_worker_process", use32_bit_worker_process)
        if virtual_applications and not isinstance(virtual_applications, list):
            raise TypeError("Expected argument 'virtual_applications' to be a list")
        pulumi.set(__self__, "virtual_applications", virtual_applications)
        if vnet_name and not isinstance(vnet_name, str):
            raise TypeError("Expected argument 'vnet_name' to be a str")
        pulumi.set(__self__, "vnet_name", vnet_name)
        if web_sockets_enabled and not isinstance(web_sockets_enabled, bool):
            raise TypeError("Expected argument 'web_sockets_enabled' to be a bool")
        pulumi.set(__self__, "web_sockets_enabled", web_sockets_enabled)
        if windows_fx_version and not isinstance(windows_fx_version, str):
            raise TypeError("Expected argument 'windows_fx_version' to be a str")
        pulumi.set(__self__, "windows_fx_version", windows_fx_version)
        if x_managed_service_identity_id and not isinstance(x_managed_service_identity_id, int):
            raise TypeError("Expected argument 'x_managed_service_identity_id' to be a int")
        pulumi.set(__self__, "x_managed_service_identity_id", x_managed_service_identity_id)

    @property
    @pulumi.getter(name="alwaysOn")
    def always_on(self) -> Optional[bool]:
        """
        <code>true</code> if Always On is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "always_on")

    @property
    @pulumi.getter(name="apiDefinition")
    def api_definition(self) -> Optional['outputs.ApiDefinitionInfoResponse']:
        """
        Information about the formal API definition for the app.
        """
        return pulumi.get(self, "api_definition")

    @property
    @pulumi.getter(name="appCommandLine")
    def app_command_line(self) -> Optional[str]:
        """
        App command line to launch.
        """
        return pulumi.get(self, "app_command_line")

    @property
    @pulumi.getter(name="appSettings")
    def app_settings(self) -> Optional[Sequence['outputs.NameValuePairResponse']]:
        """
        Application settings.
        """
        return pulumi.get(self, "app_settings")

    @property
    @pulumi.getter(name="autoHealEnabled")
    def auto_heal_enabled(self) -> Optional[bool]:
        """
        <code>true</code> if Auto Heal is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "auto_heal_enabled")

    @property
    @pulumi.getter(name="autoHealRules")
    def auto_heal_rules(self) -> Optional['outputs.AutoHealRulesResponse']:
        """
        Auto Heal rules.
        """
        return pulumi.get(self, "auto_heal_rules")

    @property
    @pulumi.getter(name="autoSwapSlotName")
    def auto_swap_slot_name(self) -> Optional[str]:
        """
        Auto-swap slot name.
        """
        return pulumi.get(self, "auto_swap_slot_name")

    @property
    @pulumi.getter(name="azureStorageAccounts")
    def azure_storage_accounts(self) -> Optional[Mapping[str, 'outputs.AzureStorageInfoValueResponse']]:
        """
        User-provided Azure storage accounts.
        """
        return pulumi.get(self, "azure_storage_accounts")

    @property
    @pulumi.getter(name="connectionStrings")
    def connection_strings(self) -> Optional[Sequence['outputs.ConnStringInfoResponse']]:
        """
        Connection strings.
        """
        return pulumi.get(self, "connection_strings")

    @property
    @pulumi.getter
    def cors(self) -> Optional['outputs.CorsSettingsResponse']:
        """
        Cross-Origin Resource Sharing (CORS) settings.
        """
        return pulumi.get(self, "cors")

    @property
    @pulumi.getter(name="defaultDocuments")
    def default_documents(self) -> Optional[Sequence[str]]:
        """
        Default documents.
        """
        return pulumi.get(self, "default_documents")

    @property
    @pulumi.getter(name="detailedErrorLoggingEnabled")
    def detailed_error_logging_enabled(self) -> Optional[bool]:
        """
        <code>true</code> if detailed error logging is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "detailed_error_logging_enabled")

    @property
    @pulumi.getter(name="documentRoot")
    def document_root(self) -> Optional[str]:
        """
        Document root.
        """
        return pulumi.get(self, "document_root")

    @property
    @pulumi.getter
    def experiments(self) -> Optional['outputs.ExperimentsResponse']:
        """
        This is work around for polymorphic types.
        """
        return pulumi.get(self, "experiments")

    @property
    @pulumi.getter(name="ftpsState")
    def ftps_state(self) -> Optional[str]:
        """
        State of FTP / FTPS service
        """
        return pulumi.get(self, "ftps_state")

    @property
    @pulumi.getter(name="handlerMappings")
    def handler_mappings(self) -> Optional[Sequence['outputs.HandlerMappingResponse']]:
        """
        Handler mappings.
        """
        return pulumi.get(self, "handler_mappings")

    @property
    @pulumi.getter(name="http20Enabled")
    def http20_enabled(self) -> Optional[bool]:
        """
        Http20Enabled: configures a web site to allow clients to connect over http2.0
        """
        return pulumi.get(self, "http20_enabled")

    @property
    @pulumi.getter(name="httpLoggingEnabled")
    def http_logging_enabled(self) -> Optional[bool]:
        """
        <code>true</code> if HTTP logging is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "http_logging_enabled")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Resource Id.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="ipSecurityRestrictions")
    def ip_security_restrictions(self) -> Optional[Sequence['outputs.IpSecurityRestrictionResponse']]:
        """
        IP security restrictions for main.
        """
        return pulumi.get(self, "ip_security_restrictions")

    @property
    @pulumi.getter(name="javaContainer")
    def java_container(self) -> Optional[str]:
        """
        Java container.
        """
        return pulumi.get(self, "java_container")

    @property
    @pulumi.getter(name="javaContainerVersion")
    def java_container_version(self) -> Optional[str]:
        """
        Java container version.
        """
        return pulumi.get(self, "java_container_version")

    @property
    @pulumi.getter(name="javaVersion")
    def java_version(self) -> Optional[str]:
        """
        Java version.
        """
        return pulumi.get(self, "java_version")

    @property
    @pulumi.getter
    def kind(self) -> Optional[str]:
        """
        Kind of resource.
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def limits(self) -> Optional['outputs.SiteLimitsResponse']:
        """
        Site limits.
        """
        return pulumi.get(self, "limits")

    @property
    @pulumi.getter(name="linuxFxVersion")
    def linux_fx_version(self) -> Optional[str]:
        """
        Linux App Framework and version
        """
        return pulumi.get(self, "linux_fx_version")

    @property
    @pulumi.getter(name="loadBalancing")
    def load_balancing(self) -> Optional[str]:
        """
        Site load balancing.
        """
        return pulumi.get(self, "load_balancing")

    @property
    @pulumi.getter(name="localMySqlEnabled")
    def local_my_sql_enabled(self) -> Optional[bool]:
        """
        <code>true</code> to enable local MySQL; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "local_my_sql_enabled")

    @property
    @pulumi.getter(name="logsDirectorySizeLimit")
    def logs_directory_size_limit(self) -> Optional[int]:
        """
        HTTP logs directory size limit.
        """
        return pulumi.get(self, "logs_directory_size_limit")

    @property
    @pulumi.getter(name="machineKey")
    def machine_key(self) -> 'outputs.SiteMachineKeyResponse':
        """
        Site MachineKey.
        """
        return pulumi.get(self, "machine_key")

    @property
    @pulumi.getter(name="managedPipelineMode")
    def managed_pipeline_mode(self) -> Optional[str]:
        """
        Managed pipeline mode.
        """
        return pulumi.get(self, "managed_pipeline_mode")

    @property
    @pulumi.getter(name="managedServiceIdentityId")
    def managed_service_identity_id(self) -> Optional[int]:
        """
        Managed Service Identity Id
        """
        return pulumi.get(self, "managed_service_identity_id")

    @property
    @pulumi.getter(name="minTlsVersion")
    def min_tls_version(self) -> Optional[str]:
        """
        MinTlsVersion: configures the minimum version of TLS required for SSL requests
        """
        return pulumi.get(self, "min_tls_version")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Resource Name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="netFrameworkVersion")
    def net_framework_version(self) -> Optional[str]:
        """
        .NET Framework version.
        """
        return pulumi.get(self, "net_framework_version")

    @property
    @pulumi.getter(name="nodeVersion")
    def node_version(self) -> Optional[str]:
        """
        Version of Node.js.
        """
        return pulumi.get(self, "node_version")

    @property
    @pulumi.getter(name="numberOfWorkers")
    def number_of_workers(self) -> Optional[int]:
        """
        Number of workers.
        """
        return pulumi.get(self, "number_of_workers")

    @property
    @pulumi.getter(name="phpVersion")
    def php_version(self) -> Optional[str]:
        """
        Version of PHP.
        """
        return pulumi.get(self, "php_version")

    @property
    @pulumi.getter(name="publishingUsername")
    def publishing_username(self) -> Optional[str]:
        """
        Publishing user name.
        """
        return pulumi.get(self, "publishing_username")

    @property
    @pulumi.getter
    def push(self) -> Optional['outputs.PushSettingsResponse']:
        """
        Push endpoint settings.
        """
        return pulumi.get(self, "push")

    @property
    @pulumi.getter(name="pythonVersion")
    def python_version(self) -> Optional[str]:
        """
        Version of Python.
        """
        return pulumi.get(self, "python_version")

    @property
    @pulumi.getter(name="remoteDebuggingEnabled")
    def remote_debugging_enabled(self) -> Optional[bool]:
        """
        <code>true</code> if remote debugging is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "remote_debugging_enabled")

    @property
    @pulumi.getter(name="remoteDebuggingVersion")
    def remote_debugging_version(self) -> Optional[str]:
        """
        Remote debugging version.
        """
        return pulumi.get(self, "remote_debugging_version")

    @property
    @pulumi.getter(name="requestTracingEnabled")
    def request_tracing_enabled(self) -> Optional[bool]:
        """
        <code>true</code> if request tracing is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "request_tracing_enabled")

    @property
    @pulumi.getter(name="requestTracingExpirationTime")
    def request_tracing_expiration_time(self) -> Optional[str]:
        """
        Request tracing expiration time.
        """
        return pulumi.get(self, "request_tracing_expiration_time")

    @property
    @pulumi.getter(name="reservedInstanceCount")
    def reserved_instance_count(self) -> Optional[int]:
        """
        Number of reserved instances.
        This setting only applies to the Consumption Plan
        """
        return pulumi.get(self, "reserved_instance_count")

    @property
    @pulumi.getter(name="scmIpSecurityRestrictions")
    def scm_ip_security_restrictions(self) -> Optional[Sequence['outputs.IpSecurityRestrictionResponse']]:
        """
        IP security restrictions for scm.
        """
        return pulumi.get(self, "scm_ip_security_restrictions")

    @property
    @pulumi.getter(name="scmIpSecurityRestrictionsUseMain")
    def scm_ip_security_restrictions_use_main(self) -> Optional[bool]:
        """
        IP security restrictions for scm to use main.
        """
        return pulumi.get(self, "scm_ip_security_restrictions_use_main")

    @property
    @pulumi.getter(name="scmType")
    def scm_type(self) -> Optional[str]:
        """
        SCM type.
        """
        return pulumi.get(self, "scm_type")

    @property
    @pulumi.getter(name="tracingOptions")
    def tracing_options(self) -> Optional[str]:
        """
        Tracing options.
        """
        return pulumi.get(self, "tracing_options")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        Resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="use32BitWorkerProcess")
    def use32_bit_worker_process(self) -> Optional[bool]:
        """
        <code>true</code> to use 32-bit worker process; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "use32_bit_worker_process")

    @property
    @pulumi.getter(name="virtualApplications")
    def virtual_applications(self) -> Optional[Sequence['outputs.VirtualApplicationResponse']]:
        """
        Virtual applications.
        """
        return pulumi.get(self, "virtual_applications")

    @property
    @pulumi.getter(name="vnetName")
    def vnet_name(self) -> Optional[str]:
        """
        Virtual Network name.
        """
        return pulumi.get(self, "vnet_name")

    @property
    @pulumi.getter(name="webSocketsEnabled")
    def web_sockets_enabled(self) -> Optional[bool]:
        """
        <code>true</code> if WebSocket is enabled; otherwise, <code>false</code>.
        """
        return pulumi.get(self, "web_sockets_enabled")

    @property
    @pulumi.getter(name="windowsFxVersion")
    def windows_fx_version(self) -> Optional[str]:
        """
        Xenon App Framework and version
        """
        return pulumi.get(self, "windows_fx_version")

    @property
    @pulumi.getter(name="xManagedServiceIdentityId")
    def x_managed_service_identity_id(self) -> Optional[int]:
        """
        Explicit Managed Service Identity Id
        """
        return pulumi.get(self, "x_managed_service_identity_id")


class AwaitableGetWebAppConfigurationResult(GetWebAppConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetWebAppConfigurationResult(
            always_on=self.always_on,
            api_definition=self.api_definition,
            app_command_line=self.app_command_line,
            app_settings=self.app_settings,
            auto_heal_enabled=self.auto_heal_enabled,
            auto_heal_rules=self.auto_heal_rules,
            auto_swap_slot_name=self.auto_swap_slot_name,
            azure_storage_accounts=self.azure_storage_accounts,
            connection_strings=self.connection_strings,
            cors=self.cors,
            default_documents=self.default_documents,
            detailed_error_logging_enabled=self.detailed_error_logging_enabled,
            document_root=self.document_root,
            experiments=self.experiments,
            ftps_state=self.ftps_state,
            handler_mappings=self.handler_mappings,
            http20_enabled=self.http20_enabled,
            http_logging_enabled=self.http_logging_enabled,
            id=self.id,
            ip_security_restrictions=self.ip_security_restrictions,
            java_container=self.java_container,
            java_container_version=self.java_container_version,
            java_version=self.java_version,
            kind=self.kind,
            limits=self.limits,
            linux_fx_version=self.linux_fx_version,
            load_balancing=self.load_balancing,
            local_my_sql_enabled=self.local_my_sql_enabled,
            logs_directory_size_limit=self.logs_directory_size_limit,
            machine_key=self.machine_key,
            managed_pipeline_mode=self.managed_pipeline_mode,
            managed_service_identity_id=self.managed_service_identity_id,
            min_tls_version=self.min_tls_version,
            name=self.name,
            net_framework_version=self.net_framework_version,
            node_version=self.node_version,
            number_of_workers=self.number_of_workers,
            php_version=self.php_version,
            publishing_username=self.publishing_username,
            push=self.push,
            python_version=self.python_version,
            remote_debugging_enabled=self.remote_debugging_enabled,
            remote_debugging_version=self.remote_debugging_version,
            request_tracing_enabled=self.request_tracing_enabled,
            request_tracing_expiration_time=self.request_tracing_expiration_time,
            reserved_instance_count=self.reserved_instance_count,
            scm_ip_security_restrictions=self.scm_ip_security_restrictions,
            scm_ip_security_restrictions_use_main=self.scm_ip_security_restrictions_use_main,
            scm_type=self.scm_type,
            tracing_options=self.tracing_options,
            type=self.type,
            use32_bit_worker_process=self.use32_bit_worker_process,
            virtual_applications=self.virtual_applications,
            vnet_name=self.vnet_name,
            web_sockets_enabled=self.web_sockets_enabled,
            windows_fx_version=self.windows_fx_version,
            x_managed_service_identity_id=self.x_managed_service_identity_id)


def get_web_app_configuration(name: Optional[str] = None,
                              resource_group_name: Optional[str] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetWebAppConfigurationResult:
    """
    Web app configuration ARM resource.


    :param str name: Name of the app.
    :param str resource_group_name: Name of the resource group to which the resource belongs.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['resourceGroupName'] = resource_group_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('azure-native:web/v20181101:getWebAppConfiguration', __args__, opts=opts, typ=GetWebAppConfigurationResult).value

    return AwaitableGetWebAppConfigurationResult(
        always_on=__ret__.always_on,
        api_definition=__ret__.api_definition,
        app_command_line=__ret__.app_command_line,
        app_settings=__ret__.app_settings,
        auto_heal_enabled=__ret__.auto_heal_enabled,
        auto_heal_rules=__ret__.auto_heal_rules,
        auto_swap_slot_name=__ret__.auto_swap_slot_name,
        azure_storage_accounts=__ret__.azure_storage_accounts,
        connection_strings=__ret__.connection_strings,
        cors=__ret__.cors,
        default_documents=__ret__.default_documents,
        detailed_error_logging_enabled=__ret__.detailed_error_logging_enabled,
        document_root=__ret__.document_root,
        experiments=__ret__.experiments,
        ftps_state=__ret__.ftps_state,
        handler_mappings=__ret__.handler_mappings,
        http20_enabled=__ret__.http20_enabled,
        http_logging_enabled=__ret__.http_logging_enabled,
        id=__ret__.id,
        ip_security_restrictions=__ret__.ip_security_restrictions,
        java_container=__ret__.java_container,
        java_container_version=__ret__.java_container_version,
        java_version=__ret__.java_version,
        kind=__ret__.kind,
        limits=__ret__.limits,
        linux_fx_version=__ret__.linux_fx_version,
        load_balancing=__ret__.load_balancing,
        local_my_sql_enabled=__ret__.local_my_sql_enabled,
        logs_directory_size_limit=__ret__.logs_directory_size_limit,
        machine_key=__ret__.machine_key,
        managed_pipeline_mode=__ret__.managed_pipeline_mode,
        managed_service_identity_id=__ret__.managed_service_identity_id,
        min_tls_version=__ret__.min_tls_version,
        name=__ret__.name,
        net_framework_version=__ret__.net_framework_version,
        node_version=__ret__.node_version,
        number_of_workers=__ret__.number_of_workers,
        php_version=__ret__.php_version,
        publishing_username=__ret__.publishing_username,
        push=__ret__.push,
        python_version=__ret__.python_version,
        remote_debugging_enabled=__ret__.remote_debugging_enabled,
        remote_debugging_version=__ret__.remote_debugging_version,
        request_tracing_enabled=__ret__.request_tracing_enabled,
        request_tracing_expiration_time=__ret__.request_tracing_expiration_time,
        reserved_instance_count=__ret__.reserved_instance_count,
        scm_ip_security_restrictions=__ret__.scm_ip_security_restrictions,
        scm_ip_security_restrictions_use_main=__ret__.scm_ip_security_restrictions_use_main,
        scm_type=__ret__.scm_type,
        tracing_options=__ret__.tracing_options,
        type=__ret__.type,
        use32_bit_worker_process=__ret__.use32_bit_worker_process,
        virtual_applications=__ret__.virtual_applications,
        vnet_name=__ret__.vnet_name,
        web_sockets_enabled=__ret__.web_sockets_enabled,
        windows_fx_version=__ret__.windows_fx_version,
        x_managed_service_identity_id=__ret__.x_managed_service_identity_id)
