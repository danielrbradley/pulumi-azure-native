// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20170501preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The diagnostic setting resource.
//
// ## Example Usage
// ### Creates or Updates the diagnostic setting
//
// ```go
// package main
//
// import (
// 	insights "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/insights/v20170501preview"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := insights.NewDiagnosticSetting(ctx, "diagnosticSetting", &insights.DiagnosticSettingArgs{
// 			EventHubAuthorizationRuleId: pulumi.String("/subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourceGroups/montest/providers/microsoft.eventhub/namespaces/mynamespace/eventhubs/myeventhub/authorizationrules/myrule"),
// 			EventHubName:                pulumi.String("myeventhub"),
// 			LogAnalyticsDestinationType: pulumi.String("Dedicated"),
// 			Logs: insights.LogSettingsArray{
// 				&insights.LogSettingsArgs{
// 					Category: pulumi.String("WorkflowRuntime"),
// 					Enabled:  pulumi.Bool(true),
// 					RetentionPolicy: &insights.RetentionPolicyArgs{
// 						Days:    pulumi.Int(0),
// 						Enabled: pulumi.Bool(false),
// 					},
// 				},
// 			},
// 			Metrics: insights.MetricSettingsArray{
// 				&insights.MetricSettingsArgs{
// 					Category: pulumi.String("WorkflowMetrics"),
// 					Enabled:  pulumi.Bool(true),
// 					RetentionPolicy: &insights.RetentionPolicyArgs{
// 						Days:    pulumi.Int(0),
// 						Enabled: pulumi.Bool(false),
// 					},
// 				},
// 			},
// 			Name:             pulumi.String("mysetting"),
// 			ResourceUri:      pulumi.String("subscriptions/1a66ce04-b633-4a0b-b2bc-a912ec8986a6/resourcegroups/viruela1/providers/microsoft.logic/workflows/viruela6"),
// 			StorageAccountId: pulumi.String("/subscriptions/df602c9c-7aa0-407d-a6fb-eb20c8bd1192/resourceGroups/apptest/providers/Microsoft.Storage/storageAccounts/appteststorage1"),
// 			WorkspaceId:      pulumi.String(""),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
type DiagnosticSetting struct {
	pulumi.CustomResourceState

	// The resource Id for the event hub authorization rule.
	EventHubAuthorizationRuleId pulumi.StringPtrOutput `pulumi:"eventHubAuthorizationRuleId"`
	// The name of the event hub. If none is specified, the default event hub will be selected.
	EventHubName pulumi.StringPtrOutput `pulumi:"eventHubName"`
	// A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type constructed as follows: <normalized service identity>_<normalized category name>. Possible values are: Dedicated and null (null is default.)
	LogAnalyticsDestinationType pulumi.StringPtrOutput `pulumi:"logAnalyticsDestinationType"`
	// The list of logs settings.
	Logs LogSettingsResponseArrayOutput `pulumi:"logs"`
	// The list of metric settings.
	Metrics MetricSettingsResponseArrayOutput `pulumi:"metrics"`
	// Azure resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
	ServiceBusRuleId pulumi.StringPtrOutput `pulumi:"serviceBusRuleId"`
	// The resource ID of the storage account to which you would like to send Diagnostic Logs.
	StorageAccountId pulumi.StringPtrOutput `pulumi:"storageAccountId"`
	// Azure resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// The full ARM resource ID of the Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
	WorkspaceId pulumi.StringPtrOutput `pulumi:"workspaceId"`
}

// NewDiagnosticSetting registers a new resource with the given unique name, arguments, and options.
func NewDiagnosticSetting(ctx *pulumi.Context,
	name string, args *DiagnosticSettingArgs, opts ...pulumi.ResourceOption) (*DiagnosticSetting, error) {
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	if args == nil || args.ResourceUri == nil {
		return nil, errors.New("missing required argument 'ResourceUri'")
	}
	if args == nil {
		args = &DiagnosticSettingArgs{}
	}
	var resource DiagnosticSetting
	err := ctx.RegisterResource("azurerm:insights/v20170501preview:DiagnosticSetting", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDiagnosticSetting gets an existing DiagnosticSetting resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDiagnosticSetting(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DiagnosticSettingState, opts ...pulumi.ResourceOption) (*DiagnosticSetting, error) {
	var resource DiagnosticSetting
	err := ctx.ReadResource("azurerm:insights/v20170501preview:DiagnosticSetting", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DiagnosticSetting resources.
type diagnosticSettingState struct {
	// The resource Id for the event hub authorization rule.
	EventHubAuthorizationRuleId *string `pulumi:"eventHubAuthorizationRuleId"`
	// The name of the event hub. If none is specified, the default event hub will be selected.
	EventHubName *string `pulumi:"eventHubName"`
	// A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type constructed as follows: <normalized service identity>_<normalized category name>. Possible values are: Dedicated and null (null is default.)
	LogAnalyticsDestinationType *string `pulumi:"logAnalyticsDestinationType"`
	// The list of logs settings.
	Logs []LogSettingsResponse `pulumi:"logs"`
	// The list of metric settings.
	Metrics []MetricSettingsResponse `pulumi:"metrics"`
	// Azure resource name
	Name *string `pulumi:"name"`
	// The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
	ServiceBusRuleId *string `pulumi:"serviceBusRuleId"`
	// The resource ID of the storage account to which you would like to send Diagnostic Logs.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// Azure resource type
	Type *string `pulumi:"type"`
	// The full ARM resource ID of the Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
	WorkspaceId *string `pulumi:"workspaceId"`
}

type DiagnosticSettingState struct {
	// The resource Id for the event hub authorization rule.
	EventHubAuthorizationRuleId pulumi.StringPtrInput
	// The name of the event hub. If none is specified, the default event hub will be selected.
	EventHubName pulumi.StringPtrInput
	// A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type constructed as follows: <normalized service identity>_<normalized category name>. Possible values are: Dedicated and null (null is default.)
	LogAnalyticsDestinationType pulumi.StringPtrInput
	// The list of logs settings.
	Logs LogSettingsResponseArrayInput
	// The list of metric settings.
	Metrics MetricSettingsResponseArrayInput
	// Azure resource name
	Name pulumi.StringPtrInput
	// The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
	ServiceBusRuleId pulumi.StringPtrInput
	// The resource ID of the storage account to which you would like to send Diagnostic Logs.
	StorageAccountId pulumi.StringPtrInput
	// Azure resource type
	Type pulumi.StringPtrInput
	// The full ARM resource ID of the Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
	WorkspaceId pulumi.StringPtrInput
}

func (DiagnosticSettingState) ElementType() reflect.Type {
	return reflect.TypeOf((*diagnosticSettingState)(nil)).Elem()
}

type diagnosticSettingArgs struct {
	// The resource Id for the event hub authorization rule.
	EventHubAuthorizationRuleId *string `pulumi:"eventHubAuthorizationRuleId"`
	// The name of the event hub. If none is specified, the default event hub will be selected.
	EventHubName *string `pulumi:"eventHubName"`
	// A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type constructed as follows: <normalized service identity>_<normalized category name>. Possible values are: Dedicated and null (null is default.)
	LogAnalyticsDestinationType *string `pulumi:"logAnalyticsDestinationType"`
	// The list of logs settings.
	Logs []LogSettings `pulumi:"logs"`
	// The list of metric settings.
	Metrics []MetricSettings `pulumi:"metrics"`
	// The name of the diagnostic setting.
	Name string `pulumi:"name"`
	// The identifier of the resource.
	ResourceUri string `pulumi:"resourceUri"`
	// The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
	ServiceBusRuleId *string `pulumi:"serviceBusRuleId"`
	// The resource ID of the storage account to which you would like to send Diagnostic Logs.
	StorageAccountId *string `pulumi:"storageAccountId"`
	// The full ARM resource ID of the Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
	WorkspaceId *string `pulumi:"workspaceId"`
}

// The set of arguments for constructing a DiagnosticSetting resource.
type DiagnosticSettingArgs struct {
	// The resource Id for the event hub authorization rule.
	EventHubAuthorizationRuleId pulumi.StringPtrInput
	// The name of the event hub. If none is specified, the default event hub will be selected.
	EventHubName pulumi.StringPtrInput
	// A string indicating whether the export to Log Analytics should use the default destination type, i.e. AzureDiagnostics, or use a destination type constructed as follows: <normalized service identity>_<normalized category name>. Possible values are: Dedicated and null (null is default.)
	LogAnalyticsDestinationType pulumi.StringPtrInput
	// The list of logs settings.
	Logs LogSettingsArrayInput
	// The list of metric settings.
	Metrics MetricSettingsArrayInput
	// The name of the diagnostic setting.
	Name pulumi.StringInput
	// The identifier of the resource.
	ResourceUri pulumi.StringInput
	// The service bus rule Id of the diagnostic setting. This is here to maintain backwards compatibility.
	ServiceBusRuleId pulumi.StringPtrInput
	// The resource ID of the storage account to which you would like to send Diagnostic Logs.
	StorageAccountId pulumi.StringPtrInput
	// The full ARM resource ID of the Log Analytics workspace to which you would like to send Diagnostic Logs. Example: /subscriptions/4b9e8510-67ab-4e9a-95a9-e2f1e570ea9c/resourceGroups/insights-integration/providers/Microsoft.OperationalInsights/workspaces/viruela2
	WorkspaceId pulumi.StringPtrInput
}

func (DiagnosticSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*diagnosticSettingArgs)(nil)).Elem()
}
