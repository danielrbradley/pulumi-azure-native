// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * The Media Graph.
 *
 * ## Example Usage
 * ### Create or update a Media Graph with a clear RTSP Source
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 *
 * const mediaGraph = new azurerm.media.v20200201preview.MediaGraph("mediaGraph", {
 *     accountName: "contosomedia",
 *     description: "updated description",
 *     mediaGraphName: "SampleMediaGraph",
 *     resourceGroupName: "contoso",
 *     sinks: [{
 *         assetName: "SampleAsset",
 *         inputs: ["rtspSource"],
 *         name: "AssetSink",
 *         odataType: "#Microsoft.Media.MediaGraphAssetSink",
 *     }],
 *     sources: [{
 *         endpoint: {
 *             "@odata.type": "#Microsoft.Media.MediaGraphClearEndpoint",
 *             credentials: {
 *                 "@odata.type": "#Microsoft.Media.MediaGraphUsernamePasswordCredentials",
 *                 password: "examplepassword",
 *                 username: "exampleusername",
 *             },
 *             url: "rtsp://contoso.com:554/stream1",
 *         },
 *         name: "rtspSource",
 *         odataType: "#Microsoft.Media.MediaGraphRtspSource",
 *         transport: "Http",
 *     }],
 * });
 *
 * ```
 * ### Create or update a Media Graph with an encrypted RTSP Source
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 *
 * const mediaGraph = new azurerm.media.v20200201preview.MediaGraph("mediaGraph", {
 *     accountName: "contosomedia",
 *     description: "updated description",
 *     mediaGraphName: "SampleMediaGraph",
 *     resourceGroupName: "contoso",
 *     sinks: [{
 *         assetName: "SampleAsset",
 *         inputs: ["rtspSource"],
 *         name: "AssetSink",
 *         odataType: "#Microsoft.Media.MediaGraphAssetSink",
 *     }],
 *     sources: [{
 *         endpoint: {
 *             "@odata.type": "#Microsoft.Media.MediaGraphTlsEndpoint",
 *             credentials: {
 *                 "@odata.type": "#Microsoft.Media.MediaGraphUsernamePasswordCredentials",
 *                 password: "examplepassword",
 *                 username: "exampleusername",
 *             },
 *             trustedCertificates: {
 *                 "@odata.type": "#Microsoft.Media.MediaGraphPemCertificateList",
 *                 certificates: [`-----BEGIN CERTIFICATE-----
 * MIIDhTCCAm2gAwIBAgIUajvPKmoO+8qaO89/ZGATl7ZYnTswDQYJKoZIhvcNAQEL
 * BQAwUTESMBAGA1UECgwJTWljcm9zb2Z0MRQwEgYDVQQLDAtBenVyZSBNZWRpYTEl
 * MCMGA1UEAwwcKFVudHJ1c3RlZCkgVGVzdCBDZXJ0aWZpY2F0ZTAgFw0yMDAyMDYy
 * MTI5MTlaGA8zMDE5MDYwOTIxMjkxOVowUTESMBAGA1UECgwJTWljcm9zb2Z0MRQw
 * EgYDVQQLDAtBenVyZSBNZWRpYTElMCMGA1UEAwwcKFVudHJ1c3RlZCkgVGVzdCBD
 * ZXJ0aWZpY2F0ZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK2lg5ff
 * 7xXPaBZXHl/zrTukdiBtu7BNIOchHba51eloruPRzpvQx7Pedk3CVTut7LYinijf
 * uol0EwkQ2FLt2i2jOqiva9nXR95ujIZHcKsEeMC4RSNSP4++k6SpP8FgyYVdv5ru
 * f8GC+HyYQ4j0TqpR/cJs53l/LGRSldaFZ6fcDde1jeyca4VivAbAH1/WDIOvmjzo
 * 9XIGxZ10VSS5l5+DIgdkJZ+mDMLJIuVZ0YVF16ZGEB3beq1trk5lItvmSjQLTllH
 * qMFm9UGY8jKZSo/BY8ewHEtnGSAFQK0TVuRx1HhUWwu6C9jk+2zmRS2090BNpQWa
 * JMKFJrSPzFDPRX8CAwEAAaNTMFEwHQYDVR0OBBYEFIumbhu0lYk0EFDThEg0yyIn
 * /wZZMB8GA1UdIwQYMBaAFIumbhu0lYk0EFDThEg0yyIn/wZZMA8GA1UdEwEB/wQF
 * MAMBAf8wDQYJKoZIhvcNAQELBQADggEBADUNw+/NGNVtigq9tMJKqlk39MTpDn1s
 * Z1BVIAuAWSQjlevYZJeDIPUiWNWFhRe+xN7oOLnn2+NIXEKKeMSyuPoZYbN0mBkB
 * 99oS3XVipSANpmDvIepNdCrOnjfqDFIifRF1Dqjtb6i1hb6v/qYKVPLQvcrgGur7
 * PKKkAu9p4YRZ3RBdwwaUuMgojrj/l6DGbeJY6IRVnVMY39rryMnZjA5xUlhCu55n
 * oB3t/jsJLwnQN+JbAjLAeuqgOWtgARsEFzvpt+VvDsaj0YLOJPhyJwTvHgaa/slB
 * nECzd3TuyFKYeGssSni/QQ1e7yZcLapQqz66g5otdriw0IRdOfDxm5M=
 * -----END CERTIFICATE-----`],
 *             },
 *             url: "rtsps://contoso.com:443/stream1",
 *             validationOptions: {
 *                 ignoreHostname: true,
 *                 ignoreSignature: false,
 *             },
 *         },
 *         name: "rtspSource",
 *         odataType: "#Microsoft.Media.MediaGraphRtspSource",
 *         transport: "Http",
 *     }],
 * });
 *
 * ```
 */
export class MediaGraph extends pulumi.CustomResource {
    /**
     * Get an existing MediaGraph resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MediaGraph {
        return new MediaGraph(name, undefined as any, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:media/v20200201preview:MediaGraph';

    /**
     * Returns true if the given object is an instance of MediaGraph.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MediaGraph {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MediaGraph.__pulumiType;
    }

    /**
     * Date the Media Graph was created.
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * Media Graph description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Date the Media Graph was last modified.
     */
    public /*out*/ readonly lastModified!: pulumi.Output<string>;
    /**
     * The name of the resource.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Media Graph sinks.
     */
    public readonly sinks!: pulumi.Output<outputs.media.v20200201preview.MediaGraphAssetSinkResponse[]>;
    /**
     * Media Graph sources.
     */
    public readonly sources!: pulumi.Output<outputs.media.v20200201preview.MediaGraphRtspSourceResponse[]>;
    /**
     * Media Graph state which indicates the resource allocation status for running the media graph pipeline.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * The type of the resource.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a MediaGraph resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MediaGraphArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            if (!args || args.accountName === undefined) {
                throw new Error("Missing required property 'accountName'");
            }
            if (!args || args.mediaGraphName === undefined) {
                throw new Error("Missing required property 'mediaGraphName'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.sinks === undefined) {
                throw new Error("Missing required property 'sinks'");
            }
            if (!args || args.sources === undefined) {
                throw new Error("Missing required property 'sources'");
            }
            inputs["accountName"] = args ? args.accountName : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["mediaGraphName"] = args ? args.mediaGraphName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["sinks"] = args ? args.sinks : undefined;
            inputs["sources"] = args ? args.sources : undefined;
            inputs["created"] = undefined /*out*/;
            inputs["lastModified"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        } else {
            inputs["created"] = undefined /*out*/;
            inputs["description"] = undefined /*out*/;
            inputs["lastModified"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["sinks"] = undefined /*out*/;
            inputs["sources"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azurerm:media/v20190901preview:MediaGraph" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(MediaGraph.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a MediaGraph resource.
 */
export interface MediaGraphArgs {
    /**
     * The Media Services account name.
     */
    readonly accountName: pulumi.Input<string>;
    /**
     * Media Graph description.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * The Media Graph name.
     */
    readonly mediaGraphName: pulumi.Input<string>;
    /**
     * The name of the resource group within the Azure subscription.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * Media Graph sinks.
     */
    readonly sinks: pulumi.Input<pulumi.Input<inputs.media.v20200201preview.MediaGraphAssetSink>[]>;
    /**
     * Media Graph sources.
     */
    readonly sources: pulumi.Input<pulumi.Input<inputs.media.v20200201preview.MediaGraphRtspSource>[]>;
}
