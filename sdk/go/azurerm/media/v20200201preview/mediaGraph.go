// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200201preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// The Media Graph.
//
// ## Example Usage
// ### Create or update a Media Graph with a clear RTSP Source
//
// ```go
// package main
//
// import (
// 	media "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/media/v20200201preview"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := media.NewMediaGraph(ctx, "mediaGraph", &media.MediaGraphArgs{
// 			AccountName:       pulumi.String("contosomedia"),
// 			Description:       pulumi.String("updated description"),
// 			MediaGraphName:    pulumi.String("SampleMediaGraph"),
// 			ResourceGroupName: pulumi.String("contoso"),
// 			Sinks: media.MediaGraphSinkArray{
// 				&media.MediaGraphSinkArgs{
// 					AssetName: pulumi.String("SampleAsset"),
// 					Inputs: pulumi.StringArray{
// 						pulumi.String("rtspSource"),
// 					},
// 					Name:      pulumi.String("AssetSink"),
// 					OdataType: pulumi.String("#Microsoft.Media.MediaGraphAssetSink"),
// 				},
// 			},
// 			Sources: media.MediaGraphSourceArray{
// 				&media.MediaGraphSourceArgs{
// 					Endpoint: pulumi.Map{
// 						"@odata.type": pulumi.String("#Microsoft.Media.MediaGraphClearEndpoint"),
// 						"credentials": pulumi.StringMap{
// 							"@odata.type": pulumi.String("#Microsoft.Media.MediaGraphUsernamePasswordCredentials"),
// 							"password":    pulumi.String("examplepassword"),
// 							"username":    pulumi.String("exampleusername"),
// 						},
// 						"url": pulumi.String("rtsp://contoso.com:554/stream1"),
// 					},
// 					Name:      pulumi.String("rtspSource"),
// 					OdataType: pulumi.String("#Microsoft.Media.MediaGraphRtspSource"),
// 					Transport: pulumi.String("Http"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create or update a Media Graph with an encrypted RTSP Source
//
// ```go
// package main
//
// import (
// 	media "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/media/v20200201preview"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := media.NewMediaGraph(ctx, "mediaGraph", &media.MediaGraphArgs{
// 			AccountName:       pulumi.String("contosomedia"),
// 			Description:       pulumi.String("updated description"),
// 			MediaGraphName:    pulumi.String("SampleMediaGraph"),
// 			ResourceGroupName: pulumi.String("contoso"),
// 			Sinks: media.MediaGraphSinkArray{
// 				&media.MediaGraphSinkArgs{
// 					AssetName: pulumi.String("SampleAsset"),
// 					Inputs: pulumi.StringArray{
// 						pulumi.String("rtspSource"),
// 					},
// 					Name:      pulumi.String("AssetSink"),
// 					OdataType: pulumi.String("#Microsoft.Media.MediaGraphAssetSink"),
// 				},
// 			},
// 			Sources: media.MediaGraphSourceArray{
// 				&media.MediaGraphSourceArgs{
// 					Endpoint: pulumi.Map{
// 						"@odata.type": pulumi.String("#Microsoft.Media.MediaGraphTlsEndpoint"),
// 						"credentials": pulumi.StringMap{
// 							"@odata.type": pulumi.String("#Microsoft.Media.MediaGraphUsernamePasswordCredentials"),
// 							"password":    pulumi.String("examplepassword"),
// 							"username":    pulumi.String("exampleusername"),
// 						},
// 						"trustedCertificates": pulumi.Map{
// 							"@odata.type": pulumi.String("#Microsoft.Media.MediaGraphPemCertificateList"),
// 							"certificates": pulumi.StringArray{
// 								pulumi.String("-----BEGIN CERTIFICATE-----\nMIIDhTCCAm2gAwIBAgIUajvPKmoO+8qaO89/ZGATl7ZYnTswDQYJKoZIhvcNAQEL\nBQAwUTESMBAGA1UECgwJTWljcm9zb2Z0MRQwEgYDVQQLDAtBenVyZSBNZWRpYTEl\nMCMGA1UEAwwcKFVudHJ1c3RlZCkgVGVzdCBDZXJ0aWZpY2F0ZTAgFw0yMDAyMDYy\nMTI5MTlaGA8zMDE5MDYwOTIxMjkxOVowUTESMBAGA1UECgwJTWljcm9zb2Z0MRQw\nEgYDVQQLDAtBenVyZSBNZWRpYTElMCMGA1UEAwwcKFVudHJ1c3RlZCkgVGVzdCBD\nZXJ0aWZpY2F0ZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK2lg5ff\n7xXPaBZXHl/zrTukdiBtu7BNIOchHba51eloruPRzpvQx7Pedk3CVTut7LYinijf\nuol0EwkQ2FLt2i2jOqiva9nXR95ujIZHcKsEeMC4RSNSP4++k6SpP8FgyYVdv5ru\nf8GC+HyYQ4j0TqpR/cJs53l/LGRSldaFZ6fcDde1jeyca4VivAbAH1/WDIOvmjzo\n9XIGxZ10VSS5l5+DIgdkJZ+mDMLJIuVZ0YVF16ZGEB3beq1trk5lItvmSjQLTllH\nqMFm9UGY8jKZSo/BY8ewHEtnGSAFQK0TVuRx1HhUWwu6C9jk+2zmRS2090BNpQWa\nJMKFJrSPzFDPRX8CAwEAAaNTMFEwHQYDVR0OBBYEFIumbhu0lYk0EFDThEg0yyIn\n/wZZMB8GA1UdIwQYMBaAFIumbhu0lYk0EFDThEg0yyIn/wZZMA8GA1UdEwEB/wQF\nMAMBAf8wDQYJKoZIhvcNAQELBQADggEBADUNw+/NGNVtigq9tMJKqlk39MTpDn1s\nZ1BVIAuAWSQjlevYZJeDIPUiWNWFhRe+xN7oOLnn2+NIXEKKeMSyuPoZYbN0mBkB\n99oS3XVipSANpmDvIepNdCrOnjfqDFIifRF1Dqjtb6i1hb6v/qYKVPLQvcrgGur7\nPKKkAu9p4YRZ3RBdwwaUuMgojrj/l6DGbeJY6IRVnVMY39rryMnZjA5xUlhCu55n\noB3t/jsJLwnQN+JbAjLAeuqgOWtgARsEFzvpt+VvDsaj0YLOJPhyJwTvHgaa/slB\nnECzd3TuyFKYeGssSni/QQ1e7yZcLapQqz66g5otdriw0IRdOfDxm5M=\n-----END CERTIFICATE-----"),
// 							},
// 						},
// 						"url": pulumi.String("rtsps://contoso.com:443/stream1"),
// 						"validationOptions": pulumi.BoolMap{
// 							"ignoreHostname":  pulumi.Bool(true),
// 							"ignoreSignature": pulumi.Bool(false),
// 						},
// 					},
// 					Name:      pulumi.String("rtspSource"),
// 					OdataType: pulumi.String("#Microsoft.Media.MediaGraphRtspSource"),
// 					Transport: pulumi.String("Http"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
type MediaGraph struct {
	pulumi.CustomResourceState

	// Date the Media Graph was created.
	Created pulumi.StringOutput `pulumi:"created"`
	// Media Graph description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Date the Media Graph was last modified.
	LastModified pulumi.StringOutput `pulumi:"lastModified"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Media Graph sinks.
	Sinks MediaGraphAssetSinkResponseArrayOutput `pulumi:"sinks"`
	// Media Graph sources.
	Sources MediaGraphRtspSourceResponseArrayOutput `pulumi:"sources"`
	// Media Graph state which indicates the resource allocation status for running the media graph pipeline.
	State pulumi.StringOutput `pulumi:"state"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMediaGraph registers a new resource with the given unique name, arguments, and options.
func NewMediaGraph(ctx *pulumi.Context,
	name string, args *MediaGraphArgs, opts ...pulumi.ResourceOption) (*MediaGraph, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.MediaGraphName == nil {
		return nil, errors.New("missing required argument 'MediaGraphName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Sinks == nil {
		return nil, errors.New("missing required argument 'Sinks'")
	}
	if args == nil || args.Sources == nil {
		return nil, errors.New("missing required argument 'Sources'")
	}
	if args == nil {
		args = &MediaGraphArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azurerm:media/v20190901preview:MediaGraph"),
		},
	})
	opts = append(opts, aliases)
	var resource MediaGraph
	err := ctx.RegisterResource("azurerm:media/v20200201preview:MediaGraph", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMediaGraph gets an existing MediaGraph resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMediaGraph(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MediaGraphState, opts ...pulumi.ResourceOption) (*MediaGraph, error) {
	var resource MediaGraph
	err := ctx.ReadResource("azurerm:media/v20200201preview:MediaGraph", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MediaGraph resources.
type mediaGraphState struct {
	// Date the Media Graph was created.
	Created *string `pulumi:"created"`
	// Media Graph description.
	Description *string `pulumi:"description"`
	// Date the Media Graph was last modified.
	LastModified *string `pulumi:"lastModified"`
	// The name of the resource.
	Name *string `pulumi:"name"`
	// Media Graph sinks.
	Sinks []MediaGraphAssetSinkResponse `pulumi:"sinks"`
	// Media Graph sources.
	Sources []MediaGraphRtspSourceResponse `pulumi:"sources"`
	// Media Graph state which indicates the resource allocation status for running the media graph pipeline.
	State *string `pulumi:"state"`
	// The type of the resource.
	Type *string `pulumi:"type"`
}

type MediaGraphState struct {
	// Date the Media Graph was created.
	Created pulumi.StringPtrInput
	// Media Graph description.
	Description pulumi.StringPtrInput
	// Date the Media Graph was last modified.
	LastModified pulumi.StringPtrInput
	// The name of the resource.
	Name pulumi.StringPtrInput
	// Media Graph sinks.
	Sinks MediaGraphAssetSinkResponseArrayInput
	// Media Graph sources.
	Sources MediaGraphRtspSourceResponseArrayInput
	// Media Graph state which indicates the resource allocation status for running the media graph pipeline.
	State pulumi.StringPtrInput
	// The type of the resource.
	Type pulumi.StringPtrInput
}

func (MediaGraphState) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaGraphState)(nil)).Elem()
}

type mediaGraphArgs struct {
	// The Media Services account name.
	AccountName string `pulumi:"accountName"`
	// Media Graph description.
	Description *string `pulumi:"description"`
	// The Media Graph name.
	MediaGraphName string `pulumi:"mediaGraphName"`
	// The name of the resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Media Graph sinks.
	Sinks []MediaGraphAssetSink `pulumi:"sinks"`
	// Media Graph sources.
	Sources []MediaGraphRtspSource `pulumi:"sources"`
}

// The set of arguments for constructing a MediaGraph resource.
type MediaGraphArgs struct {
	// The Media Services account name.
	AccountName pulumi.StringInput
	// Media Graph description.
	Description pulumi.StringPtrInput
	// The Media Graph name.
	MediaGraphName pulumi.StringInput
	// The name of the resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput
	// Media Graph sinks.
	Sinks MediaGraphAssetSinkArrayInput
	// Media Graph sources.
	Sources MediaGraphRtspSourceArrayInput
}

func (MediaGraphArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mediaGraphArgs)(nil)).Elem()
}
