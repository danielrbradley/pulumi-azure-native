// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20190301

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Describes a Virtual Machine Scale Set.
//
// ## Example Usage
// ### Create a custom-image scale set from an unmanaged generalized os image.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:          pulumi.String("westus"),
// 			Overprovision:     pulumi.Bool(true),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_D1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						Image: &compute.VirtualHardDiskArgs{
// 							Uri: pulumi.String("http://{existing-storage-account-name}.blob.core.windows.net/{existing-container-name}/{existing-generalized-os-image-blob-name}.vhd"),
// 						},
// 						Name: pulumi.String("osDisk"),
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a platform-image scale set with unmanaged os disks.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:          pulumi.String("westus"),
// 			Overprovision:     pulumi.Bool(true),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_D1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Offer:     pulumi.String("WindowsServer"),
// 						Publisher: pulumi.String("MicrosoftWindowsServer"),
// 						Sku:       pulumi.String("2016-Datacenter"),
// 						Version:   pulumi.String("latest"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						Name:         pulumi.String("osDisk"),
// 						VhdContainers: pulumi.StringArray{
// 							pulumi.String("http://{existing-storage-account-name-0}.blob.core.windows.net/vhdContainer"),
// 							pulumi.String("http://{existing-storage-account-name-1}.blob.core.windows.net/vhdContainer"),
// 							pulumi.String("http://{existing-storage-account-name-2}.blob.core.windows.net/vhdContainer"),
// 							pulumi.String("http://{existing-storage-account-name-3}.blob.core.windows.net/vhdContainer"),
// 							pulumi.String("http://{existing-storage-account-name-4}.blob.core.windows.net/vhdContainer"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a scale set from a custom image.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:          pulumi.String("westus"),
// 			Overprovision:     pulumi.Bool(true),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_D1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Id: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/myResourceGroup/providers/Microsoft.Compute/images/{existing-custom-image-name}"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						ManagedDisk: &compute.VirtualMachineScaleSetManagedDiskParametersArgs{
// 							StorageAccountType: pulumi.String("Standard_LRS"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a scale set with a marketplace image plan.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:      pulumi.String("westus"),
// 			Overprovision: pulumi.Bool(true),
// 			Plan: &compute.PlanArgs{
// 				Name:      pulumi.String("windows2016"),
// 				Product:   pulumi.String("windows-data-science-vm"),
// 				Publisher: pulumi.String("microsoft-ads"),
// 			},
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_D1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Offer:     pulumi.String("windows-data-science-vm"),
// 						Publisher: pulumi.String("microsoft-ads"),
// 						Sku:       pulumi.String("windows2016"),
// 						Version:   pulumi.String("latest"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						ManagedDisk: &compute.VirtualMachineScaleSetManagedDiskParametersArgs{
// 							StorageAccountType: pulumi.String("Standard_LRS"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a scale set with an azure application gateway.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:          pulumi.String("westus"),
// 			Overprovision:     pulumi.Bool(true),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_D1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Offer:     pulumi.String("WindowsServer"),
// 						Publisher: pulumi.String("MicrosoftWindowsServer"),
// 						Sku:       pulumi.String("2016-Datacenter"),
// 						Version:   pulumi.String("latest"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						ManagedDisk: &compute.VirtualMachineScaleSetManagedDiskParametersArgs{
// 							StorageAccountType: pulumi.String("Standard_LRS"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a scale set with an azure load balancer.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:          pulumi.String("westus"),
// 			Overprovision:     pulumi.Bool(true),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_D1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Offer:     pulumi.String("WindowsServer"),
// 						Publisher: pulumi.String("MicrosoftWindowsServer"),
// 						Sku:       pulumi.String("2016-Datacenter"),
// 						Version:   pulumi.String("latest"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						ManagedDisk: &compute.VirtualMachineScaleSetManagedDiskParametersArgs{
// 							StorageAccountType: pulumi.String("Standard_LRS"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a scale set with automatic repairs enabled
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			AutomaticRepairsPolicy: &compute.AutomaticRepairsPolicyArgs{
// 				Enabled:     pulumi.Bool(true),
// 				GracePeriod: pulumi.String("PT30M"),
// 			},
// 			Location:          pulumi.String("westus"),
// 			Overprovision:     pulumi.Bool(true),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_D1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Offer:     pulumi.String("WindowsServer"),
// 						Publisher: pulumi.String("MicrosoftWindowsServer"),
// 						Sku:       pulumi.String("2016-Datacenter"),
// 						Version:   pulumi.String("latest"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						ManagedDisk: &compute.VirtualMachineScaleSetManagedDiskParametersArgs{
// 							StorageAccountType: pulumi.String("Standard_LRS"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a scale set with boot diagnostics.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:          pulumi.String("westus"),
// 			Overprovision:     pulumi.Bool(true),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_D1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				DiagnosticsProfile: &compute.DiagnosticsProfileArgs{
// 					BootDiagnostics: &compute.BootDiagnosticsArgs{
// 						Enabled:    pulumi.Bool(true),
// 						StorageUri: pulumi.String("http://{existing-storage-account-name}.blob.core.windows.net"),
// 					},
// 				},
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Offer:     pulumi.String("WindowsServer"),
// 						Publisher: pulumi.String("MicrosoftWindowsServer"),
// 						Sku:       pulumi.String("2016-Datacenter"),
// 						Version:   pulumi.String("latest"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						ManagedDisk: &compute.VirtualMachineScaleSetManagedDiskParametersArgs{
// 							StorageAccountType: pulumi.String("Standard_LRS"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a scale set with empty data disks on each vm.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:          pulumi.String("westus"),
// 			Overprovision:     pulumi.Bool(true),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_D2_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					DataDisks: compute.VirtualMachineScaleSetDataDiskArray{
// 						&compute.VirtualMachineScaleSetDataDiskArgs{
// 							CreateOption: pulumi.String("Empty"),
// 							DiskSizeGB:   pulumi.Int(1023),
// 							Lun:          pulumi.Int(0),
// 						},
// 						&compute.VirtualMachineScaleSetDataDiskArgs{
// 							CreateOption: pulumi.String("Empty"),
// 							DiskSizeGB:   pulumi.Int(1023),
// 							Lun:          pulumi.Int(1),
// 						},
// 					},
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Offer:     pulumi.String("WindowsServer"),
// 						Publisher: pulumi.String("MicrosoftWindowsServer"),
// 						Sku:       pulumi.String("2016-Datacenter"),
// 						Version:   pulumi.String("latest"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						DiskSizeGB:   pulumi.Int(512),
// 						ManagedDisk: &compute.VirtualMachineScaleSetManagedDiskParametersArgs{
// 							StorageAccountType: pulumi.String("Standard_LRS"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a scale set with ephemeral os disks.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:      pulumi.String("westus"),
// 			Overprovision: pulumi.Bool(true),
// 			Plan: &compute.PlanArgs{
// 				Name:      pulumi.String("windows2016"),
// 				Product:   pulumi.String("windows-data-science-vm"),
// 				Publisher: pulumi.String("microsoft-ads"),
// 			},
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_DS1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Offer:     pulumi.String("windows-data-science-vm"),
// 						Publisher: pulumi.String("microsoft-ads"),
// 						Sku:       pulumi.String("windows2016"),
// 						Version:   pulumi.String("latest"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadOnly"),
// 						CreateOption: pulumi.String("FromImage"),
// 						DiffDiskSettings: &compute.DiffDiskSettingsArgs{
// 							Option: pulumi.String("Local"),
// 						},
// 						ManagedDisk: &compute.VirtualMachineScaleSetManagedDiskParametersArgs{
// 							StorageAccountType: pulumi.String("Standard_LRS"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a scale set with password authentication.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:          pulumi.String("westus"),
// 			Overprovision:     pulumi.Bool(true),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_D1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Offer:     pulumi.String("WindowsServer"),
// 						Publisher: pulumi.String("MicrosoftWindowsServer"),
// 						Sku:       pulumi.String("2016-Datacenter"),
// 						Version:   pulumi.String("latest"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						ManagedDisk: &compute.VirtualMachineScaleSetManagedDiskParametersArgs{
// 							StorageAccountType: pulumi.String("Standard_LRS"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a scale set with premium storage.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:          pulumi.String("westus"),
// 			Overprovision:     pulumi.Bool(true),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_D1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Offer:     pulumi.String("WindowsServer"),
// 						Publisher: pulumi.String("MicrosoftWindowsServer"),
// 						Sku:       pulumi.String("2016-Datacenter"),
// 						Version:   pulumi.String("latest"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						ManagedDisk: &compute.VirtualMachineScaleSetManagedDiskParametersArgs{
// 							StorageAccountType: pulumi.String("Premium_LRS"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a scale set with ssh authentication.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:          pulumi.String("westus"),
// 			Overprovision:     pulumi.Bool(true),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_D1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 					LinuxConfiguration: &compute.LinuxConfigurationArgs{
// 						DisablePasswordAuthentication: pulumi.Bool(true),
// 						Ssh: &compute.SshConfigurationArgs{
// 							PublicKeys: compute.SshPublicKeyArray{
// 								&compute.SshPublicKeyArgs{
// 									KeyData: pulumi.String("ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCeClRAk2ipUs/l5voIsDC5q9RI+YSRd1Bvd/O+axgY4WiBzG+4FwJWZm/mLLe5DoOdHQwmU2FrKXZSW4w2sYE70KeWnrFViCOX5MTVvJgPE8ClugNl8RWth/tU849DvM9sT7vFgfVSHcAS2yDRyDlueii+8nF2ym8XWAPltFVCyLHRsyBp5YPqK8JFYIa1eybKsY3hEAxRCA+/7bq8et+Gj3coOsuRmrehav7rE6N12Pb80I6ofa6SM5XNYq4Xk0iYNx7R3kdz0Jj9XgZYWjAHjJmT0gTRoOnt6upOuxK7xI/ykWrllgpXrCPu3Ymz+c+ujaqcxDopnAl2lmf69/J1"),
// 									Path:    pulumi.String("/home/{your-username}/.ssh/authorized_keys"),
// 								},
// 							},
// 						},
// 					},
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Offer:     pulumi.String("WindowsServer"),
// 						Publisher: pulumi.String("MicrosoftWindowsServer"),
// 						Sku:       pulumi.String("2016-Datacenter"),
// 						Version:   pulumi.String("latest"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						ManagedDisk: &compute.VirtualMachineScaleSetManagedDiskParametersArgs{
// 							StorageAccountType: pulumi.String("Standard_LRS"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a scale set with terminate scheduled events enabled.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:          pulumi.String("westus"),
// 			Overprovision:     pulumi.Bool(true),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(3),
// 				Name:     pulumi.String("Standard_D1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Manual"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				ScheduledEventsProfile: &compute.ScheduledEventsProfileArgs{
// 					TerminateNotificationProfile: &compute.TerminateNotificationProfileArgs{
// 						Enable:           pulumi.Bool(true),
// 						NotBeforeTimeout: pulumi.String("PT5M"),
// 					},
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Offer:     pulumi.String("WindowsServer"),
// 						Publisher: pulumi.String("MicrosoftWindowsServer"),
// 						Sku:       pulumi.String("2016-Datacenter"),
// 						Version:   pulumi.String("latest"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						ManagedDisk: &compute.VirtualMachineScaleSetManagedDiskParametersArgs{
// 							StorageAccountType: pulumi.String("Standard_LRS"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a scale set with virtual machines in different zones.
//
// ```go
// package main
//
// import (
// 	compute "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/compute/v20190301"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := compute.NewVirtualMachineScaleSet(ctx, "virtualMachineScaleSet", &compute.VirtualMachineScaleSetArgs{
// 			Location:          pulumi.String("centralus"),
// 			Overprovision:     pulumi.Bool(true),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Sku: &compute.SkuArgs{
// 				Capacity: pulumi.Int(2),
// 				Name:     pulumi.String("Standard_A1_v2"),
// 				Tier:     pulumi.String("Standard"),
// 			},
// 			UpgradePolicy: &compute.UpgradePolicyArgs{
// 				Mode: pulumi.String("Automatic"),
// 			},
// 			VirtualMachineProfile: &compute.VirtualMachineScaleSetVMProfileArgs{
// 				NetworkProfile: &compute.VirtualMachineScaleSetNetworkProfileArgs{
// 					NetworkInterfaceConfigurations: compute.VirtualMachineScaleSetNetworkConfigurationArray{
// 						&compute.VirtualMachineScaleSetNetworkConfigurationArgs{
// 							Name: pulumi.String("{vmss-name}"),
// 						},
// 					},
// 				},
// 				OsProfile: &compute.VirtualMachineScaleSetOSProfileArgs{
// 					AdminPassword:      pulumi.String("{your-password}"),
// 					AdminUsername:      pulumi.String("{your-username}"),
// 					ComputerNamePrefix: pulumi.String("{vmss-name}"),
// 				},
// 				StorageProfile: &compute.VirtualMachineScaleSetStorageProfileArgs{
// 					DataDisks: compute.VirtualMachineScaleSetDataDiskArray{
// 						&compute.VirtualMachineScaleSetDataDiskArgs{
// 							CreateOption: pulumi.String("Empty"),
// 							DiskSizeGB:   pulumi.Int(1023),
// 							Lun:          pulumi.Int(0),
// 						},
// 						&compute.VirtualMachineScaleSetDataDiskArgs{
// 							CreateOption: pulumi.String("Empty"),
// 							DiskSizeGB:   pulumi.Int(1023),
// 							Lun:          pulumi.Int(1),
// 						},
// 					},
// 					ImageReference: &compute.ImageReferenceArgs{
// 						Offer:     pulumi.String("WindowsServer"),
// 						Publisher: pulumi.String("MicrosoftWindowsServer"),
// 						Sku:       pulumi.String("2016-Datacenter"),
// 						Version:   pulumi.String("latest"),
// 					},
// 					OsDisk: &compute.VirtualMachineScaleSetOSDiskArgs{
// 						Caching:      pulumi.String("ReadWrite"),
// 						CreateOption: pulumi.String("FromImage"),
// 						DiskSizeGB:   pulumi.Int(512),
// 						ManagedDisk: &compute.VirtualMachineScaleSetManagedDiskParametersArgs{
// 							StorageAccountType: pulumi.String("Standard_LRS"),
// 						},
// 					},
// 				},
// 			},
// 			VmScaleSetName: pulumi.String("{vmss-name}"),
// 			Zones: pulumi.StringArray{
// 				pulumi.String("1"),
// 				pulumi.String("3"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
type VirtualMachineScaleSet struct {
	pulumi.CustomResourceState

	// Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
	AdditionalCapabilities AdditionalCapabilitiesResponsePtrOutput `pulumi:"additionalCapabilities"`
	// Policy for automatic repairs.
	AutomaticRepairsPolicy AutomaticRepairsPolicyResponsePtrOutput `pulumi:"automaticRepairsPolicy"`
	// When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.
	DoNotRunExtensionsOnOverprovisionedVMs pulumi.BoolPtrOutput `pulumi:"doNotRunExtensionsOnOverprovisionedVMs"`
	// The identity of the virtual machine scale set, if configured.
	Identity VirtualMachineScaleSetIdentityResponsePtrOutput `pulumi:"identity"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Specifies whether the Virtual Machine Scale Set should be overprovisioned.
	Overprovision pulumi.BoolPtrOutput `pulumi:"overprovision"`
	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
	Plan PlanResponsePtrOutput `pulumi:"plan"`
	// Fault Domain count for each placement group.
	PlatformFaultDomainCount pulumi.IntPtrOutput `pulumi:"platformFaultDomainCount"`
	// The provisioning state, which only appears in the response.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. <br><br>Minimum api-version: 2018-04-01.
	ProximityPlacementGroup SubResourceResponsePtrOutput `pulumi:"proximityPlacementGroup"`
	// Specifies the scale-in policy that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled-in.
	ScaleInPolicy ScaleInPolicyResponsePtrOutput `pulumi:"scaleInPolicy"`
	// When true this limits the scale set to a single placement group, of max size 100 virtual machines.
	SinglePlacementGroup pulumi.BoolPtrOutput `pulumi:"singlePlacementGroup"`
	// The virtual machine scale set sku.
	Sku SkuResponsePtrOutput `pulumi:"sku"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
	UniqueId pulumi.StringOutput `pulumi:"uniqueId"`
	// The upgrade policy.
	UpgradePolicy UpgradePolicyResponsePtrOutput `pulumi:"upgradePolicy"`
	// The virtual machine profile.
	VirtualMachineProfile VirtualMachineScaleSetVMProfileResponsePtrOutput `pulumi:"virtualMachineProfile"`
	// Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage.
	ZoneBalance pulumi.BoolPtrOutput `pulumi:"zoneBalance"`
	// The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set.
	Zones pulumi.StringArrayOutput `pulumi:"zones"`
}

// NewVirtualMachineScaleSet registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachineScaleSet(ctx *pulumi.Context,
	name string, args *VirtualMachineScaleSetArgs, opts ...pulumi.ResourceOption) (*VirtualMachineScaleSet, error) {
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.VmScaleSetName == nil {
		return nil, errors.New("missing required argument 'VmScaleSetName'")
	}
	if args == nil {
		args = &VirtualMachineScaleSetArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azurerm:compute/latest:VirtualMachineScaleSet"),
		},
		{
			Type: pulumi.String("azurerm:compute/v20150615:VirtualMachineScaleSet"),
		},
		{
			Type: pulumi.String("azurerm:compute/v20160330:VirtualMachineScaleSet"),
		},
		{
			Type: pulumi.String("azurerm:compute/v20160430preview:VirtualMachineScaleSet"),
		},
		{
			Type: pulumi.String("azurerm:compute/v20170330:VirtualMachineScaleSet"),
		},
		{
			Type: pulumi.String("azurerm:compute/v20171201:VirtualMachineScaleSet"),
		},
		{
			Type: pulumi.String("azurerm:compute/v20180401:VirtualMachineScaleSet"),
		},
		{
			Type: pulumi.String("azurerm:compute/v20180601:VirtualMachineScaleSet"),
		},
		{
			Type: pulumi.String("azurerm:compute/v20181001:VirtualMachineScaleSet"),
		},
		{
			Type: pulumi.String("azurerm:compute/v20190701:VirtualMachineScaleSet"),
		},
		{
			Type: pulumi.String("azurerm:compute/v20191201:VirtualMachineScaleSet"),
		},
		{
			Type: pulumi.String("azurerm:compute/v20200601:VirtualMachineScaleSet"),
		},
	})
	opts = append(opts, aliases)
	var resource VirtualMachineScaleSet
	err := ctx.RegisterResource("azurerm:compute/v20190301:VirtualMachineScaleSet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachineScaleSet gets an existing VirtualMachineScaleSet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachineScaleSet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineScaleSetState, opts ...pulumi.ResourceOption) (*VirtualMachineScaleSet, error) {
	var resource VirtualMachineScaleSet
	err := ctx.ReadResource("azurerm:compute/v20190301:VirtualMachineScaleSet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachineScaleSet resources.
type virtualMachineScaleSetState struct {
	// Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
	AdditionalCapabilities *AdditionalCapabilitiesResponse `pulumi:"additionalCapabilities"`
	// Policy for automatic repairs.
	AutomaticRepairsPolicy *AutomaticRepairsPolicyResponse `pulumi:"automaticRepairsPolicy"`
	// When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.
	DoNotRunExtensionsOnOverprovisionedVMs *bool `pulumi:"doNotRunExtensionsOnOverprovisionedVMs"`
	// The identity of the virtual machine scale set, if configured.
	Identity *VirtualMachineScaleSetIdentityResponse `pulumi:"identity"`
	// Resource location
	Location *string `pulumi:"location"`
	// Resource name
	Name *string `pulumi:"name"`
	// Specifies whether the Virtual Machine Scale Set should be overprovisioned.
	Overprovision *bool `pulumi:"overprovision"`
	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
	Plan *PlanResponse `pulumi:"plan"`
	// Fault Domain count for each placement group.
	PlatformFaultDomainCount *int `pulumi:"platformFaultDomainCount"`
	// The provisioning state, which only appears in the response.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. <br><br>Minimum api-version: 2018-04-01.
	ProximityPlacementGroup *SubResourceResponse `pulumi:"proximityPlacementGroup"`
	// Specifies the scale-in policy that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled-in.
	ScaleInPolicy *ScaleInPolicyResponse `pulumi:"scaleInPolicy"`
	// When true this limits the scale set to a single placement group, of max size 100 virtual machines.
	SinglePlacementGroup *bool `pulumi:"singlePlacementGroup"`
	// The virtual machine scale set sku.
	Sku *SkuResponse `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
	// Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
	UniqueId *string `pulumi:"uniqueId"`
	// The upgrade policy.
	UpgradePolicy *UpgradePolicyResponse `pulumi:"upgradePolicy"`
	// The virtual machine profile.
	VirtualMachineProfile *VirtualMachineScaleSetVMProfileResponse `pulumi:"virtualMachineProfile"`
	// Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage.
	ZoneBalance *bool `pulumi:"zoneBalance"`
	// The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set.
	Zones []string `pulumi:"zones"`
}

type VirtualMachineScaleSetState struct {
	// Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
	AdditionalCapabilities AdditionalCapabilitiesResponsePtrInput
	// Policy for automatic repairs.
	AutomaticRepairsPolicy AutomaticRepairsPolicyResponsePtrInput
	// When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.
	DoNotRunExtensionsOnOverprovisionedVMs pulumi.BoolPtrInput
	// The identity of the virtual machine scale set, if configured.
	Identity VirtualMachineScaleSetIdentityResponsePtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// Resource name
	Name pulumi.StringPtrInput
	// Specifies whether the Virtual Machine Scale Set should be overprovisioned.
	Overprovision pulumi.BoolPtrInput
	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
	Plan PlanResponsePtrInput
	// Fault Domain count for each placement group.
	PlatformFaultDomainCount pulumi.IntPtrInput
	// The provisioning state, which only appears in the response.
	ProvisioningState pulumi.StringPtrInput
	// Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. <br><br>Minimum api-version: 2018-04-01.
	ProximityPlacementGroup SubResourceResponsePtrInput
	// Specifies the scale-in policy that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled-in.
	ScaleInPolicy ScaleInPolicyResponsePtrInput
	// When true this limits the scale set to a single placement group, of max size 100 virtual machines.
	SinglePlacementGroup pulumi.BoolPtrInput
	// The virtual machine scale set sku.
	Sku SkuResponsePtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
	// Specifies the ID which uniquely identifies a Virtual Machine Scale Set.
	UniqueId pulumi.StringPtrInput
	// The upgrade policy.
	UpgradePolicy UpgradePolicyResponsePtrInput
	// The virtual machine profile.
	VirtualMachineProfile VirtualMachineScaleSetVMProfileResponsePtrInput
	// Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage.
	ZoneBalance pulumi.BoolPtrInput
	// The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set.
	Zones pulumi.StringArrayInput
}

func (VirtualMachineScaleSetState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineScaleSetState)(nil)).Elem()
}

type virtualMachineScaleSetArgs struct {
	// Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
	AdditionalCapabilities *AdditionalCapabilities `pulumi:"additionalCapabilities"`
	// Policy for automatic repairs.
	AutomaticRepairsPolicy *AutomaticRepairsPolicy `pulumi:"automaticRepairsPolicy"`
	// When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.
	DoNotRunExtensionsOnOverprovisionedVMs *bool `pulumi:"doNotRunExtensionsOnOverprovisionedVMs"`
	// The identity of the virtual machine scale set, if configured.
	Identity *VirtualMachineScaleSetIdentity `pulumi:"identity"`
	// Resource location
	Location string `pulumi:"location"`
	// Specifies whether the Virtual Machine Scale Set should be overprovisioned.
	Overprovision *bool `pulumi:"overprovision"`
	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
	Plan *Plan `pulumi:"plan"`
	// Fault Domain count for each placement group.
	PlatformFaultDomainCount *int `pulumi:"platformFaultDomainCount"`
	// Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. <br><br>Minimum api-version: 2018-04-01.
	ProximityPlacementGroup *SubResource `pulumi:"proximityPlacementGroup"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the scale-in policy that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled-in.
	ScaleInPolicy *ScaleInPolicy `pulumi:"scaleInPolicy"`
	// When true this limits the scale set to a single placement group, of max size 100 virtual machines.
	SinglePlacementGroup *bool `pulumi:"singlePlacementGroup"`
	// The virtual machine scale set sku.
	Sku *Sku `pulumi:"sku"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// The upgrade policy.
	UpgradePolicy *UpgradePolicy `pulumi:"upgradePolicy"`
	// The virtual machine profile.
	VirtualMachineProfile *VirtualMachineScaleSetVMProfile `pulumi:"virtualMachineProfile"`
	// The name of the VM scale set to create or update.
	VmScaleSetName string `pulumi:"vmScaleSetName"`
	// Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage.
	ZoneBalance *bool `pulumi:"zoneBalance"`
	// The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set.
	Zones []string `pulumi:"zones"`
}

// The set of arguments for constructing a VirtualMachineScaleSet resource.
type VirtualMachineScaleSetArgs struct {
	// Specifies additional capabilities enabled or disabled on the Virtual Machines in the Virtual Machine Scale Set. For instance: whether the Virtual Machines have the capability to support attaching managed data disks with UltraSSD_LRS storage account type.
	AdditionalCapabilities AdditionalCapabilitiesPtrInput
	// Policy for automatic repairs.
	AutomaticRepairsPolicy AutomaticRepairsPolicyPtrInput
	// When Overprovision is enabled, extensions are launched only on the requested number of VMs which are finally kept. This property will hence ensure that the extensions do not run on the extra overprovisioned VMs.
	DoNotRunExtensionsOnOverprovisionedVMs pulumi.BoolPtrInput
	// The identity of the virtual machine scale set, if configured.
	Identity VirtualMachineScaleSetIdentityPtrInput
	// Resource location
	Location pulumi.StringInput
	// Specifies whether the Virtual Machine Scale Set should be overprovisioned.
	Overprovision pulumi.BoolPtrInput
	// Specifies information about the marketplace image used to create the virtual machine. This element is only used for marketplace images. Before you can use a marketplace image from an API, you must enable the image for programmatic use.  In the Azure portal, find the marketplace image that you want to use and then click **Want to deploy programmatically, Get Started ->**. Enter any required information and then click **Save**.
	Plan PlanPtrInput
	// Fault Domain count for each placement group.
	PlatformFaultDomainCount pulumi.IntPtrInput
	// Specifies information about the proximity placement group that the virtual machine scale set should be assigned to. <br><br>Minimum api-version: 2018-04-01.
	ProximityPlacementGroup SubResourcePtrInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Specifies the scale-in policy that decides which virtual machines are chosen for removal when a Virtual Machine Scale Set is scaled-in.
	ScaleInPolicy ScaleInPolicyPtrInput
	// When true this limits the scale set to a single placement group, of max size 100 virtual machines.
	SinglePlacementGroup pulumi.BoolPtrInput
	// The virtual machine scale set sku.
	Sku SkuPtrInput
	// Resource tags
	Tags pulumi.StringMapInput
	// The upgrade policy.
	UpgradePolicy UpgradePolicyPtrInput
	// The virtual machine profile.
	VirtualMachineProfile VirtualMachineScaleSetVMProfilePtrInput
	// The name of the VM scale set to create or update.
	VmScaleSetName pulumi.StringInput
	// Whether to force strictly even Virtual Machine distribution cross x-zones in case there is zone outage.
	ZoneBalance pulumi.BoolPtrInput
	// The virtual machine scale set zones. NOTE: Availability zones can only be set when you create the scale set.
	Zones pulumi.StringArrayInput
}

func (VirtualMachineScaleSetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineScaleSetArgs)(nil)).Elem()
}
