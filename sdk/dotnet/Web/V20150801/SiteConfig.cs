// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web.V20150801
{
    /// <summary>
    /// Configuration of Azure web site
    /// </summary>
    [AzureNativeResourceType("azure-native:web/v20150801:SiteConfig")]
    public partial class SiteConfig : Pulumi.CustomResource
    {
        /// <summary>
        /// Always On
        /// </summary>
        [Output("alwaysOn")]
        public Output<bool?> AlwaysOn { get; private set; } = null!;

        /// <summary>
        /// Information about the formal API definition for the web app.
        /// </summary>
        [Output("apiDefinition")]
        public Output<Outputs.ApiDefinitionInfoResponse?> ApiDefinition { get; private set; } = null!;

        /// <summary>
        /// App Command Line to launch
        /// </summary>
        [Output("appCommandLine")]
        public Output<string?> AppCommandLine { get; private set; } = null!;

        /// <summary>
        /// Application Settings
        /// </summary>
        [Output("appSettings")]
        public Output<ImmutableArray<Outputs.NameValuePairResponse>> AppSettings { get; private set; } = null!;

        /// <summary>
        /// Auto heal enabled
        /// </summary>
        [Output("autoHealEnabled")]
        public Output<bool?> AutoHealEnabled { get; private set; } = null!;

        /// <summary>
        /// Auto heal rules
        /// </summary>
        [Output("autoHealRules")]
        public Output<Outputs.AutoHealRulesResponse?> AutoHealRules { get; private set; } = null!;

        /// <summary>
        /// Auto swap slot name
        /// </summary>
        [Output("autoSwapSlotName")]
        public Output<string?> AutoSwapSlotName { get; private set; } = null!;

        /// <summary>
        /// Connection strings
        /// </summary>
        [Output("connectionStrings")]
        public Output<ImmutableArray<Outputs.ConnStringInfoResponse>> ConnectionStrings { get; private set; } = null!;

        /// <summary>
        /// Cross-Origin Resource Sharing (CORS) settings.
        /// </summary>
        [Output("cors")]
        public Output<Outputs.CorsSettingsResponse?> Cors { get; private set; } = null!;

        /// <summary>
        /// Default documents
        /// </summary>
        [Output("defaultDocuments")]
        public Output<ImmutableArray<string>> DefaultDocuments { get; private set; } = null!;

        /// <summary>
        /// Detailed error logging enabled
        /// </summary>
        [Output("detailedErrorLoggingEnabled")]
        public Output<bool?> DetailedErrorLoggingEnabled { get; private set; } = null!;

        /// <summary>
        /// Document root
        /// </summary>
        [Output("documentRoot")]
        public Output<string?> DocumentRoot { get; private set; } = null!;

        /// <summary>
        /// This is work around for polymorphic types
        /// </summary>
        [Output("experiments")]
        public Output<Outputs.ExperimentsResponse?> Experiments { get; private set; } = null!;

        /// <summary>
        /// Handler mappings
        /// </summary>
        [Output("handlerMappings")]
        public Output<ImmutableArray<Outputs.HandlerMappingResponse>> HandlerMappings { get; private set; } = null!;

        /// <summary>
        /// HTTP logging Enabled
        /// </summary>
        [Output("httpLoggingEnabled")]
        public Output<bool?> HttpLoggingEnabled { get; private set; } = null!;

        /// <summary>
        /// Ip Security restrictions
        /// </summary>
        [Output("ipSecurityRestrictions")]
        public Output<ImmutableArray<Outputs.IpSecurityRestrictionResponse>> IpSecurityRestrictions { get; private set; } = null!;

        /// <summary>
        /// Java container
        /// </summary>
        [Output("javaContainer")]
        public Output<string?> JavaContainer { get; private set; } = null!;

        /// <summary>
        /// Java container version
        /// </summary>
        [Output("javaContainerVersion")]
        public Output<string?> JavaContainerVersion { get; private set; } = null!;

        /// <summary>
        /// Java version
        /// </summary>
        [Output("javaVersion")]
        public Output<string?> JavaVersion { get; private set; } = null!;

        /// <summary>
        /// Kind of resource
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Site limits
        /// </summary>
        [Output("limits")]
        public Output<Outputs.SiteLimitsResponse?> Limits { get; private set; } = null!;

        /// <summary>
        /// Site load balancing
        /// </summary>
        [Output("loadBalancing")]
        public Output<string?> LoadBalancing { get; private set; } = null!;

        /// <summary>
        /// Local mysql enabled
        /// </summary>
        [Output("localMySqlEnabled")]
        public Output<bool?> LocalMySqlEnabled { get; private set; } = null!;

        /// <summary>
        /// Resource Location
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// HTTP Logs Directory size limit
        /// </summary>
        [Output("logsDirectorySizeLimit")]
        public Output<int?> LogsDirectorySizeLimit { get; private set; } = null!;

        /// <summary>
        /// Managed pipeline mode
        /// </summary>
        [Output("managedPipelineMode")]
        public Output<string?> ManagedPipelineMode { get; private set; } = null!;

        /// <summary>
        /// Site Metadata
        /// </summary>
        [Output("metadata")]
        public Output<ImmutableArray<Outputs.NameValuePairResponse>> Metadata { get; private set; } = null!;

        /// <summary>
        /// Resource Name
        /// </summary>
        [Output("name")]
        public Output<string?> Name { get; private set; } = null!;

        /// <summary>
        /// Net Framework Version
        /// </summary>
        [Output("netFrameworkVersion")]
        public Output<string?> NetFrameworkVersion { get; private set; } = null!;

        /// <summary>
        /// Version of Node
        /// </summary>
        [Output("nodeVersion")]
        public Output<string?> NodeVersion { get; private set; } = null!;

        /// <summary>
        /// Number of workers
        /// </summary>
        [Output("numberOfWorkers")]
        public Output<int?> NumberOfWorkers { get; private set; } = null!;

        /// <summary>
        /// Version of PHP
        /// </summary>
        [Output("phpVersion")]
        public Output<string?> PhpVersion { get; private set; } = null!;

        /// <summary>
        /// Publishing password
        /// </summary>
        [Output("publishingPassword")]
        public Output<string?> PublishingPassword { get; private set; } = null!;

        /// <summary>
        /// Publishing user name
        /// </summary>
        [Output("publishingUsername")]
        public Output<string?> PublishingUsername { get; private set; } = null!;

        /// <summary>
        /// Version of Python
        /// </summary>
        [Output("pythonVersion")]
        public Output<string?> PythonVersion { get; private set; } = null!;

        /// <summary>
        /// Remote Debugging Enabled
        /// </summary>
        [Output("remoteDebuggingEnabled")]
        public Output<bool?> RemoteDebuggingEnabled { get; private set; } = null!;

        /// <summary>
        /// Remote Debugging Version
        /// </summary>
        [Output("remoteDebuggingVersion")]
        public Output<string?> RemoteDebuggingVersion { get; private set; } = null!;

        /// <summary>
        /// Enable request tracing
        /// </summary>
        [Output("requestTracingEnabled")]
        public Output<bool?> RequestTracingEnabled { get; private set; } = null!;

        /// <summary>
        /// Request tracing expiration time
        /// </summary>
        [Output("requestTracingExpirationTime")]
        public Output<string?> RequestTracingExpirationTime { get; private set; } = null!;

        /// <summary>
        /// SCM type
        /// </summary>
        [Output("scmType")]
        public Output<string?> ScmType { get; private set; } = null!;

        /// <summary>
        /// Resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// Tracing options
        /// </summary>
        [Output("tracingOptions")]
        public Output<string?> TracingOptions { get; private set; } = null!;

        /// <summary>
        /// Resource type
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;

        /// <summary>
        /// Use 32 bit worker process
        /// </summary>
        [Output("use32BitWorkerProcess")]
        public Output<bool?> Use32BitWorkerProcess { get; private set; } = null!;

        /// <summary>
        /// Virtual applications
        /// </summary>
        [Output("virtualApplications")]
        public Output<ImmutableArray<Outputs.VirtualApplicationResponse>> VirtualApplications { get; private set; } = null!;

        /// <summary>
        /// Vnet name
        /// </summary>
        [Output("vnetName")]
        public Output<string?> VnetName { get; private set; } = null!;

        /// <summary>
        /// Web socket enabled.
        /// </summary>
        [Output("webSocketsEnabled")]
        public Output<bool?> WebSocketsEnabled { get; private set; } = null!;


        /// <summary>
        /// Create a SiteConfig resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public SiteConfig(string name, SiteConfigArgs args, CustomResourceOptions? options = null)
            : base("azure-native:web/v20150801:SiteConfig", name, args ?? new SiteConfigArgs(), MakeResourceOptions(options, ""))
        {
        }

        private SiteConfig(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:web/v20150801:SiteConfig", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20150801:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-native:web:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-nextgen:web:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-native:web/latest:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/latest:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-native:web/v20160801:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20160801:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-native:web/v20180201:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20180201:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-native:web/v20181101:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20181101:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-native:web/v20190801:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20190801:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-native:web/v20200601:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20200601:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-native:web/v20200901:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20200901:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-native:web/v20201001:SiteConfig"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20201001:SiteConfig"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing SiteConfig resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static SiteConfig Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new SiteConfig(name, id, options);
        }
    }

    public sealed class SiteConfigArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Always On
        /// </summary>
        [Input("alwaysOn")]
        public Input<bool>? AlwaysOn { get; set; }

        /// <summary>
        /// Information about the formal API definition for the web app.
        /// </summary>
        [Input("apiDefinition")]
        public Input<Inputs.ApiDefinitionInfoArgs>? ApiDefinition { get; set; }

        /// <summary>
        /// App Command Line to launch
        /// </summary>
        [Input("appCommandLine")]
        public Input<string>? AppCommandLine { get; set; }

        [Input("appSettings")]
        private InputList<Inputs.NameValuePairArgs>? _appSettings;

        /// <summary>
        /// Application Settings
        /// </summary>
        public InputList<Inputs.NameValuePairArgs> AppSettings
        {
            get => _appSettings ?? (_appSettings = new InputList<Inputs.NameValuePairArgs>());
            set => _appSettings = value;
        }

        /// <summary>
        /// Auto heal enabled
        /// </summary>
        [Input("autoHealEnabled")]
        public Input<bool>? AutoHealEnabled { get; set; }

        /// <summary>
        /// Auto heal rules
        /// </summary>
        [Input("autoHealRules")]
        public Input<Inputs.AutoHealRulesArgs>? AutoHealRules { get; set; }

        /// <summary>
        /// Auto swap slot name
        /// </summary>
        [Input("autoSwapSlotName")]
        public Input<string>? AutoSwapSlotName { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.ConnStringInfoArgs>? _connectionStrings;

        /// <summary>
        /// Connection strings
        /// </summary>
        public InputList<Inputs.ConnStringInfoArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.ConnStringInfoArgs>());
            set => _connectionStrings = value;
        }

        /// <summary>
        /// Cross-Origin Resource Sharing (CORS) settings.
        /// </summary>
        [Input("cors")]
        public Input<Inputs.CorsSettingsArgs>? Cors { get; set; }

        [Input("defaultDocuments")]
        private InputList<string>? _defaultDocuments;

        /// <summary>
        /// Default documents
        /// </summary>
        public InputList<string> DefaultDocuments
        {
            get => _defaultDocuments ?? (_defaultDocuments = new InputList<string>());
            set => _defaultDocuments = value;
        }

        /// <summary>
        /// Detailed error logging enabled
        /// </summary>
        [Input("detailedErrorLoggingEnabled")]
        public Input<bool>? DetailedErrorLoggingEnabled { get; set; }

        /// <summary>
        /// Document root
        /// </summary>
        [Input("documentRoot")]
        public Input<string>? DocumentRoot { get; set; }

        /// <summary>
        /// This is work around for polymorphic types
        /// </summary>
        [Input("experiments")]
        public Input<Inputs.ExperimentsArgs>? Experiments { get; set; }

        [Input("handlerMappings")]
        private InputList<Inputs.HandlerMappingArgs>? _handlerMappings;

        /// <summary>
        /// Handler mappings
        /// </summary>
        public InputList<Inputs.HandlerMappingArgs> HandlerMappings
        {
            get => _handlerMappings ?? (_handlerMappings = new InputList<Inputs.HandlerMappingArgs>());
            set => _handlerMappings = value;
        }

        /// <summary>
        /// HTTP logging Enabled
        /// </summary>
        [Input("httpLoggingEnabled")]
        public Input<bool>? HttpLoggingEnabled { get; set; }

        /// <summary>
        /// Resource Id
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        [Input("ipSecurityRestrictions")]
        private InputList<Inputs.IpSecurityRestrictionArgs>? _ipSecurityRestrictions;

        /// <summary>
        /// Ip Security restrictions
        /// </summary>
        public InputList<Inputs.IpSecurityRestrictionArgs> IpSecurityRestrictions
        {
            get => _ipSecurityRestrictions ?? (_ipSecurityRestrictions = new InputList<Inputs.IpSecurityRestrictionArgs>());
            set => _ipSecurityRestrictions = value;
        }

        /// <summary>
        /// Java container
        /// </summary>
        [Input("javaContainer")]
        public Input<string>? JavaContainer { get; set; }

        /// <summary>
        /// Java container version
        /// </summary>
        [Input("javaContainerVersion")]
        public Input<string>? JavaContainerVersion { get; set; }

        /// <summary>
        /// Java version
        /// </summary>
        [Input("javaVersion")]
        public Input<string>? JavaVersion { get; set; }

        /// <summary>
        /// Kind of resource
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Site limits
        /// </summary>
        [Input("limits")]
        public Input<Inputs.SiteLimitsArgs>? Limits { get; set; }

        /// <summary>
        /// Site load balancing
        /// </summary>
        [Input("loadBalancing")]
        public Input<Pulumi.AzureNative.Web.V20150801.SiteLoadBalancing>? LoadBalancing { get; set; }

        /// <summary>
        /// Local mysql enabled
        /// </summary>
        [Input("localMySqlEnabled")]
        public Input<bool>? LocalMySqlEnabled { get; set; }

        /// <summary>
        /// Resource Location
        /// </summary>
        [Input("location")]
        public Input<string>? Location { get; set; }

        /// <summary>
        /// HTTP Logs Directory size limit
        /// </summary>
        [Input("logsDirectorySizeLimit")]
        public Input<int>? LogsDirectorySizeLimit { get; set; }

        /// <summary>
        /// Managed pipeline mode
        /// </summary>
        [Input("managedPipelineMode")]
        public Input<Pulumi.AzureNative.Web.V20150801.ManagedPipelineMode>? ManagedPipelineMode { get; set; }

        [Input("metadata")]
        private InputList<Inputs.NameValuePairArgs>? _metadata;

        /// <summary>
        /// Site Metadata
        /// </summary>
        public InputList<Inputs.NameValuePairArgs> Metadata
        {
            get => _metadata ?? (_metadata = new InputList<Inputs.NameValuePairArgs>());
            set => _metadata = value;
        }

        /// <summary>
        /// Resource Name
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Net Framework Version
        /// </summary>
        [Input("netFrameworkVersion")]
        public Input<string>? NetFrameworkVersion { get; set; }

        /// <summary>
        /// Version of Node
        /// </summary>
        [Input("nodeVersion")]
        public Input<string>? NodeVersion { get; set; }

        /// <summary>
        /// Number of workers
        /// </summary>
        [Input("numberOfWorkers")]
        public Input<int>? NumberOfWorkers { get; set; }

        /// <summary>
        /// Version of PHP
        /// </summary>
        [Input("phpVersion")]
        public Input<string>? PhpVersion { get; set; }

        /// <summary>
        /// Publishing password
        /// </summary>
        [Input("publishingPassword")]
        public Input<string>? PublishingPassword { get; set; }

        /// <summary>
        /// Publishing user name
        /// </summary>
        [Input("publishingUsername")]
        public Input<string>? PublishingUsername { get; set; }

        /// <summary>
        /// Version of Python
        /// </summary>
        [Input("pythonVersion")]
        public Input<string>? PythonVersion { get; set; }

        /// <summary>
        /// Remote Debugging Enabled
        /// </summary>
        [Input("remoteDebuggingEnabled")]
        public Input<bool>? RemoteDebuggingEnabled { get; set; }

        /// <summary>
        /// Remote Debugging Version
        /// </summary>
        [Input("remoteDebuggingVersion")]
        public Input<string>? RemoteDebuggingVersion { get; set; }

        /// <summary>
        /// Enable request tracing
        /// </summary>
        [Input("requestTracingEnabled")]
        public Input<bool>? RequestTracingEnabled { get; set; }

        /// <summary>
        /// Request tracing expiration time
        /// </summary>
        [Input("requestTracingExpirationTime")]
        public Input<string>? RequestTracingExpirationTime { get; set; }

        /// <summary>
        /// Name of resource group
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        /// <summary>
        /// SCM type
        /// </summary>
        [Input("scmType")]
        public Input<string>? ScmType { get; set; }

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// Tracing options
        /// </summary>
        [Input("tracingOptions")]
        public Input<string>? TracingOptions { get; set; }

        /// <summary>
        /// Resource type
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        /// <summary>
        /// Use 32 bit worker process
        /// </summary>
        [Input("use32BitWorkerProcess")]
        public Input<bool>? Use32BitWorkerProcess { get; set; }

        [Input("virtualApplications")]
        private InputList<Inputs.VirtualApplicationArgs>? _virtualApplications;

        /// <summary>
        /// Virtual applications
        /// </summary>
        public InputList<Inputs.VirtualApplicationArgs> VirtualApplications
        {
            get => _virtualApplications ?? (_virtualApplications = new InputList<Inputs.VirtualApplicationArgs>());
            set => _virtualApplications = value;
        }

        /// <summary>
        /// Vnet name
        /// </summary>
        [Input("vnetName")]
        public Input<string>? VnetName { get; set; }

        /// <summary>
        /// Web socket enabled.
        /// </summary>
        [Input("webSocketsEnabled")]
        public Input<bool>? WebSocketsEnabled { get; set; }

        public SiteConfigArgs()
        {
        }
    }
}
