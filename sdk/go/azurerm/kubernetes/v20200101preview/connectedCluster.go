// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200101preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Represents a connected cluster.
//
// ## Example Usage
// ### CreateClusterExample
//
// ```go
// package main
//
// import (
// 	kubernetes "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/kubernetes/v20200101preview"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := kubernetes.NewConnectedCluster(ctx, "connectedCluster", &kubernetes.ConnectedClusterArgs{
// 			AadProfile: &kubernetes.ConnectedClusterAADProfileArgs{
// 				ClientAppId: pulumi.String("f8cd1fd9-154f-4da7-b348-595f283c13a3"),
// 				ServerAppId: pulumi.String("45c27b16-e262-4c55-b572-b3b8f7788eb8"),
// 				TenantId:    pulumi.String("72f988bf-86f1-41af-91ab-2d7cd011db47"),
// 			},
// 			AgentPublicKeyCertificate: pulumi.String("MIICYzCCAcygAwIBAgIBADANBgkqhkiG9w0BAQUFADAuMQswCQYDVQQGEwJVUzEMMAoGA1UEChMDSUJNMREwDwYDVQQLEwhMb2NhbCBDQTAeFw05OTEyMjIwNTAwMDBaFw0wMDEyMjMwNDU5NTlaMC4xCzAJBgNVBAYTAlVTMQwwCgYDVQQKEwNJQk0xETAPBgNVBAsTCExvY2FsIENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQD2bZEo7xGaX2/0GHkrNFZvlxBou9v1Jmt/PDiTMPve8r9FeJAQ0QdvFST/0JPQYD20rH0bimdDLgNdNynmyRoS2S/IInfpmf69iyc2G0TPyRvmHIiOZbdCd+YBHQi1adkj17NDcWj6S14tVurFX73zx0sNoMS79q3tuXKrDsxeuwIDAQABo4GQMIGNMEsGCVUdDwGG+EIBDQQ+EzxHZW5lcmF0ZWQgYnkgdGhlIFNlY3VyZVdheSBTZWN1cml0eSBTZXJ2ZXIgZm9yIE9TLzM5MCAoUkFDRikwDgYDVR0PAQH/BAQDAgAGMA8GA1UdEwEB/wQFMAMBAf8wHQYDVR0OBBYEFJ3+ocRyCTJw067dLSwr/nalx6YMMA0GCSqGSIb3DQEBBQUAA4GBAMaQzt+zaj1GU77yzlr8iiMBXgdQrwsZZWJo5exnAucJAEYQZmOfyLiM D6oYq+ZnfvM0n8G/Y79q8nhwvuxpYOnRSAXFp6xSkrIOeZtJMY1h00LKp/JX3Ng1svZ2agE126JHsQ0bhzN5TKsYfbwfTwfjdWAGy6Vf1nYi/rO+ryMO"),
// 			ClusterName:               pulumi.String("testCluster"),
// 			Identity: &kubernetes.ConnectedClusterIdentityArgs{
// 				Type: pulumi.String("SystemAssigned"),
// 			},
// 			Location:          pulumi.String("East US"),
// 			ResourceGroupName: pulumi.String("k8sc-rg"),
// 			Tags:              nil,
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
type ConnectedCluster struct {
	pulumi.CustomResourceState

	AadProfile ConnectedClusterAADProfileResponseOutput `pulumi:"aadProfile"`
	// Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
	AgentPublicKeyCertificate pulumi.StringOutput `pulumi:"agentPublicKeyCertificate"`
	// Version of the agent running on the connected cluster resource
	AgentVersion pulumi.StringOutput `pulumi:"agentVersion"`
	// The identity of the connected cluster.
	Identity ConnectedClusterIdentityResponseOutput `pulumi:"identity"`
	// The Kubernetes version of the connected cluster resource
	KubernetesVersion pulumi.StringOutput `pulumi:"kubernetesVersion"`
	// The geo-location where the resource lives
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource
	Name pulumi.StringOutput `pulumi:"name"`
	// The current deployment state of connectedClusters.
	ProvisioningState pulumi.StringPtrOutput `pulumi:"provisioningState"`
	// Resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Number of nodes present in the connected cluster resource
	TotalNodeCount pulumi.IntOutput `pulumi:"totalNodeCount"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewConnectedCluster registers a new resource with the given unique name, arguments, and options.
func NewConnectedCluster(ctx *pulumi.Context,
	name string, args *ConnectedClusterArgs, opts ...pulumi.ResourceOption) (*ConnectedCluster, error) {
	if args == nil || args.AadProfile == nil {
		return nil, errors.New("missing required argument 'AadProfile'")
	}
	if args == nil || args.AgentPublicKeyCertificate == nil {
		return nil, errors.New("missing required argument 'AgentPublicKeyCertificate'")
	}
	if args == nil || args.ClusterName == nil {
		return nil, errors.New("missing required argument 'ClusterName'")
	}
	if args == nil || args.Identity == nil {
		return nil, errors.New("missing required argument 'Identity'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil {
		args = &ConnectedClusterArgs{}
	}
	var resource ConnectedCluster
	err := ctx.RegisterResource("azurerm:kubernetes/v20200101preview:ConnectedCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetConnectedCluster gets an existing ConnectedCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetConnectedCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ConnectedClusterState, opts ...pulumi.ResourceOption) (*ConnectedCluster, error) {
	var resource ConnectedCluster
	err := ctx.ReadResource("azurerm:kubernetes/v20200101preview:ConnectedCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ConnectedCluster resources.
type connectedClusterState struct {
	AadProfile *ConnectedClusterAADProfileResponse `pulumi:"aadProfile"`
	// Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
	AgentPublicKeyCertificate *string `pulumi:"agentPublicKeyCertificate"`
	// Version of the agent running on the connected cluster resource
	AgentVersion *string `pulumi:"agentVersion"`
	// The identity of the connected cluster.
	Identity *ConnectedClusterIdentityResponse `pulumi:"identity"`
	// The Kubernetes version of the connected cluster resource
	KubernetesVersion *string `pulumi:"kubernetesVersion"`
	// The geo-location where the resource lives
	Location *string `pulumi:"location"`
	// The name of the resource
	Name *string `pulumi:"name"`
	// The current deployment state of connectedClusters.
	ProvisioningState *string `pulumi:"provisioningState"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
	// Number of nodes present in the connected cluster resource
	TotalNodeCount *int `pulumi:"totalNodeCount"`
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type *string `pulumi:"type"`
}

type ConnectedClusterState struct {
	AadProfile ConnectedClusterAADProfileResponsePtrInput
	// Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
	AgentPublicKeyCertificate pulumi.StringPtrInput
	// Version of the agent running on the connected cluster resource
	AgentVersion pulumi.StringPtrInput
	// The identity of the connected cluster.
	Identity ConnectedClusterIdentityResponsePtrInput
	// The Kubernetes version of the connected cluster resource
	KubernetesVersion pulumi.StringPtrInput
	// The geo-location where the resource lives
	Location pulumi.StringPtrInput
	// The name of the resource
	Name pulumi.StringPtrInput
	// The current deployment state of connectedClusters.
	ProvisioningState pulumi.StringPtrInput
	// Resource tags.
	Tags pulumi.StringMapInput
	// Number of nodes present in the connected cluster resource
	TotalNodeCount pulumi.IntPtrInput
	// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
	Type pulumi.StringPtrInput
}

func (ConnectedClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*connectedClusterState)(nil)).Elem()
}

type connectedClusterArgs struct {
	AadProfile ConnectedClusterAADProfile `pulumi:"aadProfile"`
	// Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
	AgentPublicKeyCertificate string `pulumi:"agentPublicKeyCertificate"`
	// The name of the Kubernetes cluster on which get is called.
	ClusterName string `pulumi:"clusterName"`
	// The identity of the connected cluster.
	Identity ConnectedClusterIdentity `pulumi:"identity"`
	// The geo-location where the resource lives
	Location string `pulumi:"location"`
	// The current deployment state of connectedClusters.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a ConnectedCluster resource.
type ConnectedClusterArgs struct {
	AadProfile ConnectedClusterAADProfileInput
	// Base64 encoded public certificate used by the agent to do the initial handshake to the backend services in Azure.
	AgentPublicKeyCertificate pulumi.StringInput
	// The name of the Kubernetes cluster on which get is called.
	ClusterName pulumi.StringInput
	// The identity of the connected cluster.
	Identity ConnectedClusterIdentityInput
	// The geo-location where the resource lives
	Location pulumi.StringInput
	// The current deployment state of connectedClusters.
	ProvisioningState pulumi.StringPtrInput
	// The name of the resource group. The name is case insensitive.
	ResourceGroupName pulumi.StringInput
	// Resource tags.
	Tags pulumi.StringMapInput
}

func (ConnectedClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*connectedClusterArgs)(nil)).Elem()
}
