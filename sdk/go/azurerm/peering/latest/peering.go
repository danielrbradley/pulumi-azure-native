// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package latest

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Peering is a logical representation of a set of connections to the Microsoft Cloud Edge at a location.
//
// ## Example Usage
// ### Create a direct peering
//
// ```go
// package main
//
// import (
// 	peering "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/peering/latest"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := peering.NewPeering(ctx, "peering", &peering.PeeringArgs{
// 			Direct: &peering.PeeringPropertiesDirectArgs{
// 				Connections: peering.DirectConnectionArray{
// 					&peering.DirectConnectionArgs{
// 						BandwidthInMbps: pulumi.Int(10000),
// 						BgpSession: &peering.BgpSessionArgs{
// 							MaxPrefixesAdvertisedV4: pulumi.Int(1000),
// 							MaxPrefixesAdvertisedV6: pulumi.Int(100),
// 							Md5AuthenticationKey:    pulumi.String("test-md5-auth-key"),
// 							SessionPrefixV4:         pulumi.String("192.168.0.0/31"),
// 							SessionPrefixV6:         pulumi.String("fd00::0/127"),
// 						},
// 						ConnectionIdentifier:   pulumi.String("5F4CB5C7-6B43-4444-9338-9ABC72606C16"),
// 						PeeringDBFacilityId:    pulumi.Int(99999),
// 						SessionAddressProvider: pulumi.String("Peer"),
// 						UseForPeeringService:   pulumi.Bool(false),
// 					},
// 					&peering.DirectConnectionArgs{
// 						BandwidthInMbps:        pulumi.Int(10000),
// 						ConnectionIdentifier:   pulumi.String("8AB00818-D533-4504-A25A-03A17F61201C"),
// 						PeeringDBFacilityId:    pulumi.Int(99999),
// 						SessionAddressProvider: pulumi.String("Microsoft"),
// 						UseForPeeringService:   pulumi.Bool(true),
// 					},
// 				},
// 				DirectPeeringType: pulumi.String("Edge"),
// 				PeerAsn: &peering.SubResourceArgs{
// 					Id: pulumi.String("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
// 				},
// 			},
// 			Kind:              pulumi.String("Direct"),
// 			Location:          pulumi.String("eastus"),
// 			PeeringLocation:   pulumi.String("peeringLocation0"),
// 			PeeringName:       pulumi.String("peeringName"),
// 			ResourceGroupName: pulumi.String("rgName"),
// 			Sku: &peering.PeeringSkuArgs{
// 				Name: pulumi.String("Basic_Direct_Free"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create a peering with exchange route server
//
// ```go
// package main
//
// import (
// 	peering "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/peering/latest"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := peering.NewPeering(ctx, "peering", &peering.PeeringArgs{
// 			Direct: &peering.PeeringPropertiesDirectArgs{
// 				Connections: peering.DirectConnectionArray{
// 					&peering.DirectConnectionArgs{
// 						BandwidthInMbps: pulumi.Int(10000),
// 						BgpSession: &peering.BgpSessionArgs{
// 							MaxPrefixesAdvertisedV4:     pulumi.Int(1000),
// 							MaxPrefixesAdvertisedV6:     pulumi.Int(100),
// 							MicrosoftSessionIPv4Address: pulumi.String("192.168.0.123"),
// 							PeerSessionIPv4Address:      pulumi.String("192.168.0.234"),
// 							SessionPrefixV4:             pulumi.String("192.168.0.0/24"),
// 						},
// 						ConnectionIdentifier:   pulumi.String("5F4CB5C7-6B43-4444-9338-9ABC72606C16"),
// 						PeeringDBFacilityId:    pulumi.Int(99999),
// 						SessionAddressProvider: pulumi.String("Peer"),
// 						UseForPeeringService:   pulumi.Bool(true),
// 					},
// 				},
// 				DirectPeeringType: pulumi.String("IxRs"),
// 				PeerAsn: &peering.SubResourceArgs{
// 					Id: pulumi.String("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
// 				},
// 			},
// 			Kind:              pulumi.String("Direct"),
// 			Location:          pulumi.String("eastus"),
// 			PeeringLocation:   pulumi.String("peeringLocation0"),
// 			PeeringName:       pulumi.String("peeringName"),
// 			ResourceGroupName: pulumi.String("rgName"),
// 			Sku: &peering.PeeringSkuArgs{
// 				Name: pulumi.String("Premium_Direct_Free"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create an exchange peering
//
// ```go
// package main
//
// import (
// 	peering "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/peering/latest"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := peering.NewPeering(ctx, "peering", &peering.PeeringArgs{
// 			Exchange: &peering.PeeringPropertiesExchangeArgs{
// 				Connections: peering.ExchangeConnectionArray{
// 					&peering.ExchangeConnectionArgs{
// 						BgpSession: &peering.BgpSessionArgs{
// 							MaxPrefixesAdvertisedV4: pulumi.Int(1000),
// 							MaxPrefixesAdvertisedV6: pulumi.Int(100),
// 							Md5AuthenticationKey:    pulumi.String("test-md5-auth-key"),
// 							PeerSessionIPv4Address:  pulumi.String("192.168.2.1"),
// 							PeerSessionIPv6Address:  pulumi.String("fd00::1"),
// 						},
// 						ConnectionIdentifier: pulumi.String("CE495334-0E94-4E51-8164-8116D6CD284D"),
// 						PeeringDBFacilityId:  pulumi.Int(99999),
// 					},
// 					&peering.ExchangeConnectionArgs{
// 						BgpSession: &peering.BgpSessionArgs{
// 							MaxPrefixesAdvertisedV4: pulumi.Int(1000),
// 							MaxPrefixesAdvertisedV6: pulumi.Int(100),
// 							Md5AuthenticationKey:    pulumi.String("test-md5-auth-key"),
// 							PeerSessionIPv4Address:  pulumi.String("192.168.2.2"),
// 							PeerSessionIPv6Address:  pulumi.String("fd00::2"),
// 						},
// 						ConnectionIdentifier: pulumi.String("CDD8E673-CB07-47E6-84DE-3739F778762B"),
// 						PeeringDBFacilityId:  pulumi.Int(99999),
// 					},
// 				},
// 				PeerAsn: &peering.SubResourceArgs{
// 					Id: pulumi.String("/subscriptions/subId/providers/Microsoft.Peering/peerAsns/myAsn1"),
// 				},
// 			},
// 			Kind:              pulumi.String("Exchange"),
// 			Location:          pulumi.String("eastus"),
// 			PeeringLocation:   pulumi.String("peeringLocation0"),
// 			PeeringName:       pulumi.String("peeringName"),
// 			ResourceGroupName: pulumi.String("rgName"),
// 			Sku: &peering.PeeringSkuArgs{
// 				Name: pulumi.String("Basic_Exchange_Free"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
type Peering struct {
	pulumi.CustomResourceState

	// The properties that define a direct peering.
	Direct PeeringPropertiesDirectResponsePtrOutput `pulumi:"direct"`
	// The properties that define an exchange peering.
	Exchange PeeringPropertiesExchangeResponsePtrOutput `pulumi:"exchange"`
	// The kind of the peering.
	Kind pulumi.StringOutput `pulumi:"kind"`
	// The location of the resource.
	Location pulumi.StringOutput `pulumi:"location"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// The location of the peering.
	PeeringLocation pulumi.StringPtrOutput `pulumi:"peeringLocation"`
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// The SKU that defines the tier and kind of the peering.
	Sku PeeringSkuResponseOutput `pulumi:"sku"`
	// The resource tags.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewPeering registers a new resource with the given unique name, arguments, and options.
func NewPeering(ctx *pulumi.Context,
	name string, args *PeeringArgs, opts ...pulumi.ResourceOption) (*Peering, error) {
	if args == nil || args.Kind == nil {
		return nil, errors.New("missing required argument 'Kind'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.PeeringName == nil {
		return nil, errors.New("missing required argument 'PeeringName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Sku == nil {
		return nil, errors.New("missing required argument 'Sku'")
	}
	if args == nil {
		args = &PeeringArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azurerm:peering/v20190801preview:Peering"),
		},
		{
			Type: pulumi.String("azurerm:peering/v20190901preview:Peering"),
		},
		{
			Type: pulumi.String("azurerm:peering/v20200101preview:Peering"),
		},
		{
			Type: pulumi.String("azurerm:peering/v20200401:Peering"),
		},
	})
	opts = append(opts, aliases)
	var resource Peering
	err := ctx.RegisterResource("azurerm:peering/latest:Peering", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPeering gets an existing Peering resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPeering(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PeeringState, opts ...pulumi.ResourceOption) (*Peering, error) {
	var resource Peering
	err := ctx.ReadResource("azurerm:peering/latest:Peering", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Peering resources.
type peeringState struct {
	// The properties that define a direct peering.
	Direct *PeeringPropertiesDirectResponse `pulumi:"direct"`
	// The properties that define an exchange peering.
	Exchange *PeeringPropertiesExchangeResponse `pulumi:"exchange"`
	// The kind of the peering.
	Kind *string `pulumi:"kind"`
	// The location of the resource.
	Location *string `pulumi:"location"`
	// The name of the resource.
	Name *string `pulumi:"name"`
	// The location of the peering.
	PeeringLocation *string `pulumi:"peeringLocation"`
	// The provisioning state of the resource.
	ProvisioningState *string `pulumi:"provisioningState"`
	// The SKU that defines the tier and kind of the peering.
	Sku *PeeringSkuResponse `pulumi:"sku"`
	// The resource tags.
	Tags map[string]string `pulumi:"tags"`
	// The type of the resource.
	Type *string `pulumi:"type"`
}

type PeeringState struct {
	// The properties that define a direct peering.
	Direct PeeringPropertiesDirectResponsePtrInput
	// The properties that define an exchange peering.
	Exchange PeeringPropertiesExchangeResponsePtrInput
	// The kind of the peering.
	Kind pulumi.StringPtrInput
	// The location of the resource.
	Location pulumi.StringPtrInput
	// The name of the resource.
	Name pulumi.StringPtrInput
	// The location of the peering.
	PeeringLocation pulumi.StringPtrInput
	// The provisioning state of the resource.
	ProvisioningState pulumi.StringPtrInput
	// The SKU that defines the tier and kind of the peering.
	Sku PeeringSkuResponsePtrInput
	// The resource tags.
	Tags pulumi.StringMapInput
	// The type of the resource.
	Type pulumi.StringPtrInput
}

func (PeeringState) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringState)(nil)).Elem()
}

type peeringArgs struct {
	// The properties that define a direct peering.
	Direct *PeeringPropertiesDirect `pulumi:"direct"`
	// The properties that define an exchange peering.
	Exchange *PeeringPropertiesExchange `pulumi:"exchange"`
	// The kind of the peering.
	Kind string `pulumi:"kind"`
	// The location of the resource.
	Location string `pulumi:"location"`
	// The location of the peering.
	PeeringLocation *string `pulumi:"peeringLocation"`
	// The name of the peering.
	PeeringName string `pulumi:"peeringName"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// The SKU that defines the tier and kind of the peering.
	Sku PeeringSku `pulumi:"sku"`
	// The resource tags.
	Tags map[string]string `pulumi:"tags"`
}

// The set of arguments for constructing a Peering resource.
type PeeringArgs struct {
	// The properties that define a direct peering.
	Direct PeeringPropertiesDirectPtrInput
	// The properties that define an exchange peering.
	Exchange PeeringPropertiesExchangePtrInput
	// The kind of the peering.
	Kind pulumi.StringInput
	// The location of the resource.
	Location pulumi.StringInput
	// The location of the peering.
	PeeringLocation pulumi.StringPtrInput
	// The name of the peering.
	PeeringName pulumi.StringInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// The SKU that defines the tier and kind of the peering.
	Sku PeeringSkuInput
	// The resource tags.
	Tags pulumi.StringMapInput
}

func (PeeringArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*peeringArgs)(nil)).Elem()
}
