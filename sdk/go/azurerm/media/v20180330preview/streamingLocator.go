// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20180330preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// A Streaming Locator resource
//
// ## Example Usage
// ### Creates a Streaming Locator with clear streaming
//
// ```go
// package main
//
// import (
// 	media "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/media/v20180330preview"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := media.NewStreamingLocator(ctx, "streamingLocator", &media.StreamingLocatorArgs{
// 			AccountName:          pulumi.String("contosomedia"),
// 			AssetName:            pulumi.String("ClimbingMountRainier"),
// 			ResourceGroupName:    pulumi.String("contoso"),
// 			StreamingLocatorName: pulumi.String("UserCreatedClearStreamingLocator"),
// 			StreamingPolicyName:  pulumi.String("clearStreamingPolicy"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Creates a Streaming Locator with secure streaming
//
// ```go
// package main
//
// import (
// 	media "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/media/v20180330preview"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := media.NewStreamingLocator(ctx, "streamingLocator", &media.StreamingLocatorArgs{
// 			AccountName:          pulumi.String("contosomedia"),
// 			AssetName:            pulumi.String("ClimbingMountRainier"),
// 			EndTime:              pulumi.String("2028-12-31T23:59:59.9999999Z"),
// 			ResourceGroupName:    pulumi.String("contoso"),
// 			StartTime:            pulumi.String("2018-03-01T00:00:00Z"),
// 			StreamingLocatorName: pulumi.String("UserCreatedSecureStreamingLocator"),
// 			StreamingPolicyName:  pulumi.String("secureStreamingPolicy"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Creates a Streaming Locator with user defined content keys
//
// ```go
// package main
//
// import (
// 	media "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/media/v20180330preview"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := media.NewStreamingLocator(ctx, "streamingLocator", &media.StreamingLocatorArgs{
// 			AccountName: pulumi.String("contosomedia"),
// 			AssetName:   pulumi.String("ClimbingMountRainier"),
// 			ContentKeys: media.StreamingLocatorUserDefinedContentKeyArray{
// 				&media.StreamingLocatorUserDefinedContentKeyArgs{
// 					Id:    pulumi.String("60000000-0000-0000-0000-000000000001"),
// 					Label: pulumi.String("aesDefaultKey"),
// 					Value: pulumi.String("1UqLohAfWsEGkULYxHjYZg=="),
// 				},
// 				&media.StreamingLocatorUserDefinedContentKeyArgs{
// 					Id:    pulumi.String("60000000-0000-0000-0000-000000000004"),
// 					Label: pulumi.String("cencDefaultKey"),
// 					Value: pulumi.String("4UqLohAfWsEGkULYxHjYZg=="),
// 				},
// 				&media.StreamingLocatorUserDefinedContentKeyArgs{
// 					Id:    pulumi.String("60000000-0000-0000-0000-000000000007"),
// 					Label: pulumi.String("cbcsDefaultKey"),
// 					Value: pulumi.String("7UqLohAfWsEGkULYxHjYZg=="),
// 				},
// 			},
// 			ResourceGroupName:    pulumi.String("contoso"),
// 			StreamingLocatorId:   pulumi.String("90000000-0000-0000-0000-00000000000A"),
// 			StreamingLocatorName: pulumi.String("UserCreatedSecureStreamingLocatorWithUserDefinedContentKeys"),
// 			StreamingPolicyName:  pulumi.String("secureStreamingPolicy"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
type StreamingLocator struct {
	pulumi.CustomResourceState

	// Asset Name
	AssetName pulumi.StringOutput `pulumi:"assetName"`
	// ContentKeys used by this Streaming Locator
	ContentKeys StreamingLocatorUserDefinedContentKeyResponseArrayOutput `pulumi:"contentKeys"`
	// Creation time of Streaming Locator
	Created pulumi.StringOutput `pulumi:"created"`
	// Default ContentKeyPolicy used by this Streaming Locator
	DefaultContentKeyPolicyName pulumi.StringPtrOutput `pulumi:"defaultContentKeyPolicyName"`
	// EndTime of Streaming Locator
	EndTime pulumi.StringPtrOutput `pulumi:"endTime"`
	// The name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// StartTime of Streaming Locator
	StartTime pulumi.StringPtrOutput `pulumi:"startTime"`
	// StreamingLocatorId of Streaming Locator
	StreamingLocatorId pulumi.StringPtrOutput `pulumi:"streamingLocatorId"`
	// Streaming policy name used by this streaming locator. Either specify the name of streaming policy you created or use one of the predefined streaming polices. The predefined streaming policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_SecureStreaming' and 'Predefined_SecureStreamingWithFairPlay'
	StreamingPolicyName pulumi.StringOutput `pulumi:"streamingPolicyName"`
	// The type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewStreamingLocator registers a new resource with the given unique name, arguments, and options.
func NewStreamingLocator(ctx *pulumi.Context,
	name string, args *StreamingLocatorArgs, opts ...pulumi.ResourceOption) (*StreamingLocator, error) {
	if args == nil || args.AccountName == nil {
		return nil, errors.New("missing required argument 'AccountName'")
	}
	if args == nil || args.AssetName == nil {
		return nil, errors.New("missing required argument 'AssetName'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.StreamingLocatorName == nil {
		return nil, errors.New("missing required argument 'StreamingLocatorName'")
	}
	if args == nil || args.StreamingPolicyName == nil {
		return nil, errors.New("missing required argument 'StreamingPolicyName'")
	}
	if args == nil {
		args = &StreamingLocatorArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azurerm:media/latest:StreamingLocator"),
		},
		{
			Type: pulumi.String("azurerm:media/v20180601preview:StreamingLocator"),
		},
		{
			Type: pulumi.String("azurerm:media/v20180701:StreamingLocator"),
		},
		{
			Type: pulumi.String("azurerm:media/v20200501:StreamingLocator"),
		},
	})
	opts = append(opts, aliases)
	var resource StreamingLocator
	err := ctx.RegisterResource("azurerm:media/v20180330preview:StreamingLocator", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamingLocator gets an existing StreamingLocator resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamingLocator(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamingLocatorState, opts ...pulumi.ResourceOption) (*StreamingLocator, error) {
	var resource StreamingLocator
	err := ctx.ReadResource("azurerm:media/v20180330preview:StreamingLocator", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamingLocator resources.
type streamingLocatorState struct {
	// Asset Name
	AssetName *string `pulumi:"assetName"`
	// ContentKeys used by this Streaming Locator
	ContentKeys []StreamingLocatorUserDefinedContentKeyResponse `pulumi:"contentKeys"`
	// Creation time of Streaming Locator
	Created *string `pulumi:"created"`
	// Default ContentKeyPolicy used by this Streaming Locator
	DefaultContentKeyPolicyName *string `pulumi:"defaultContentKeyPolicyName"`
	// EndTime of Streaming Locator
	EndTime *string `pulumi:"endTime"`
	// The name of the resource.
	Name *string `pulumi:"name"`
	// StartTime of Streaming Locator
	StartTime *string `pulumi:"startTime"`
	// StreamingLocatorId of Streaming Locator
	StreamingLocatorId *string `pulumi:"streamingLocatorId"`
	// Streaming policy name used by this streaming locator. Either specify the name of streaming policy you created or use one of the predefined streaming polices. The predefined streaming policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_SecureStreaming' and 'Predefined_SecureStreamingWithFairPlay'
	StreamingPolicyName *string `pulumi:"streamingPolicyName"`
	// The type of the resource.
	Type *string `pulumi:"type"`
}

type StreamingLocatorState struct {
	// Asset Name
	AssetName pulumi.StringPtrInput
	// ContentKeys used by this Streaming Locator
	ContentKeys StreamingLocatorUserDefinedContentKeyResponseArrayInput
	// Creation time of Streaming Locator
	Created pulumi.StringPtrInput
	// Default ContentKeyPolicy used by this Streaming Locator
	DefaultContentKeyPolicyName pulumi.StringPtrInput
	// EndTime of Streaming Locator
	EndTime pulumi.StringPtrInput
	// The name of the resource.
	Name pulumi.StringPtrInput
	// StartTime of Streaming Locator
	StartTime pulumi.StringPtrInput
	// StreamingLocatorId of Streaming Locator
	StreamingLocatorId pulumi.StringPtrInput
	// Streaming policy name used by this streaming locator. Either specify the name of streaming policy you created or use one of the predefined streaming polices. The predefined streaming policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_SecureStreaming' and 'Predefined_SecureStreamingWithFairPlay'
	StreamingPolicyName pulumi.StringPtrInput
	// The type of the resource.
	Type pulumi.StringPtrInput
}

func (StreamingLocatorState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingLocatorState)(nil)).Elem()
}

type streamingLocatorArgs struct {
	// The Media Services account name.
	AccountName string `pulumi:"accountName"`
	// Asset Name
	AssetName string `pulumi:"assetName"`
	// ContentKeys used by this Streaming Locator
	ContentKeys []StreamingLocatorUserDefinedContentKey `pulumi:"contentKeys"`
	// Default ContentKeyPolicy used by this Streaming Locator
	DefaultContentKeyPolicyName *string `pulumi:"defaultContentKeyPolicyName"`
	// EndTime of Streaming Locator
	EndTime *string `pulumi:"endTime"`
	// The name of the resource group within the Azure subscription.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// StartTime of Streaming Locator
	StartTime *string `pulumi:"startTime"`
	// StreamingLocatorId of Streaming Locator
	StreamingLocatorId *string `pulumi:"streamingLocatorId"`
	// The Streaming Locator name.
	StreamingLocatorName string `pulumi:"streamingLocatorName"`
	// Streaming policy name used by this streaming locator. Either specify the name of streaming policy you created or use one of the predefined streaming polices. The predefined streaming policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_SecureStreaming' and 'Predefined_SecureStreamingWithFairPlay'
	StreamingPolicyName string `pulumi:"streamingPolicyName"`
}

// The set of arguments for constructing a StreamingLocator resource.
type StreamingLocatorArgs struct {
	// The Media Services account name.
	AccountName pulumi.StringInput
	// Asset Name
	AssetName pulumi.StringInput
	// ContentKeys used by this Streaming Locator
	ContentKeys StreamingLocatorUserDefinedContentKeyArrayInput
	// Default ContentKeyPolicy used by this Streaming Locator
	DefaultContentKeyPolicyName pulumi.StringPtrInput
	// EndTime of Streaming Locator
	EndTime pulumi.StringPtrInput
	// The name of the resource group within the Azure subscription.
	ResourceGroupName pulumi.StringInput
	// StartTime of Streaming Locator
	StartTime pulumi.StringPtrInput
	// StreamingLocatorId of Streaming Locator
	StreamingLocatorId pulumi.StringPtrInput
	// The Streaming Locator name.
	StreamingLocatorName pulumi.StringInput
	// Streaming policy name used by this streaming locator. Either specify the name of streaming policy you created or use one of the predefined streaming polices. The predefined streaming policies available are: 'Predefined_DownloadOnly', 'Predefined_ClearStreamingOnly', 'Predefined_DownloadAndClearStreaming', 'Predefined_ClearKey', 'Predefined_SecureStreaming' and 'Predefined_SecureStreamingWithFairPlay'
	StreamingPolicyName pulumi.StringInput
}

func (StreamingLocatorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingLocatorArgs)(nil)).Elem()
}
