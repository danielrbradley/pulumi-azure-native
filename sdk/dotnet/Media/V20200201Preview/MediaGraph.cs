// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Media.V20200201Preview
{
    /// <summary>
    /// The Media Graph.
    /// 
    /// ## Example Usage
    /// ### Create or update a Media Graph with a clear RTSP Source
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var mediaGraph = new AzureRM.Media.V20200201Preview.MediaGraph("mediaGraph", new AzureRM.Media.V20200201Preview.MediaGraphArgs
    ///         {
    ///             AccountName = "contosomedia",
    ///             Description = "updated description",
    ///             MediaGraphName = "SampleMediaGraph",
    ///             ResourceGroupName = "contoso",
    ///             Sinks = 
    ///             {
    ///                 new AzureRM.Media.V20200201Preview.Inputs.MediaGraphSinkArgs
    ///                 {
    ///                     AssetName = "SampleAsset",
    ///                     Inputs = 
    ///                     {
    ///                         "rtspSource",
    ///                     },
    ///                     Name = "AssetSink",
    ///                     OdataType = "#Microsoft.Media.MediaGraphAssetSink",
    ///                 },
    ///             },
    ///             Sources = 
    ///             {
    ///                 new AzureRM.Media.V20200201Preview.Inputs.MediaGraphSourceArgs
    ///                 {
    ///                     Endpoint = 
    ///                     {
    ///                         { "@odata.type", "#Microsoft.Media.MediaGraphClearEndpoint" },
    ///                         { "credentials", 
    ///                         {
    ///                             { "@odata.type", "#Microsoft.Media.MediaGraphUsernamePasswordCredentials" },
    ///                             { "password", "examplepassword" },
    ///                             { "username", "exampleusername" },
    ///                         } },
    ///                         { "url", "rtsp://contoso.com:554/stream1" },
    ///                     },
    ///                     Name = "rtspSource",
    ///                     OdataType = "#Microsoft.Media.MediaGraphRtspSource",
    ///                     Transport = "Http",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### Create or update a Media Graph with an encrypted RTSP Source
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var mediaGraph = new AzureRM.Media.V20200201Preview.MediaGraph("mediaGraph", new AzureRM.Media.V20200201Preview.MediaGraphArgs
    ///         {
    ///             AccountName = "contosomedia",
    ///             Description = "updated description",
    ///             MediaGraphName = "SampleMediaGraph",
    ///             ResourceGroupName = "contoso",
    ///             Sinks = 
    ///             {
    ///                 new AzureRM.Media.V20200201Preview.Inputs.MediaGraphSinkArgs
    ///                 {
    ///                     AssetName = "SampleAsset",
    ///                     Inputs = 
    ///                     {
    ///                         "rtspSource",
    ///                     },
    ///                     Name = "AssetSink",
    ///                     OdataType = "#Microsoft.Media.MediaGraphAssetSink",
    ///                 },
    ///             },
    ///             Sources = 
    ///             {
    ///                 new AzureRM.Media.V20200201Preview.Inputs.MediaGraphSourceArgs
    ///                 {
    ///                     Endpoint = 
    ///                     {
    ///                         { "@odata.type", "#Microsoft.Media.MediaGraphTlsEndpoint" },
    ///                         { "credentials", 
    ///                         {
    ///                             { "@odata.type", "#Microsoft.Media.MediaGraphUsernamePasswordCredentials" },
    ///                             { "password", "examplepassword" },
    ///                             { "username", "exampleusername" },
    ///                         } },
    ///                         { "trustedCertificates", 
    ///                         {
    ///                             { "@odata.type", "#Microsoft.Media.MediaGraphPemCertificateList" },
    ///                             { "certificates", 
    ///                             {
    ///                                 @"-----BEGIN CERTIFICATE-----
    /// MIIDhTCCAm2gAwIBAgIUajvPKmoO+8qaO89/ZGATl7ZYnTswDQYJKoZIhvcNAQEL
    /// BQAwUTESMBAGA1UECgwJTWljcm9zb2Z0MRQwEgYDVQQLDAtBenVyZSBNZWRpYTEl
    /// MCMGA1UEAwwcKFVudHJ1c3RlZCkgVGVzdCBDZXJ0aWZpY2F0ZTAgFw0yMDAyMDYy
    /// MTI5MTlaGA8zMDE5MDYwOTIxMjkxOVowUTESMBAGA1UECgwJTWljcm9zb2Z0MRQw
    /// EgYDVQQLDAtBenVyZSBNZWRpYTElMCMGA1UEAwwcKFVudHJ1c3RlZCkgVGVzdCBD
    /// ZXJ0aWZpY2F0ZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK2lg5ff
    /// 7xXPaBZXHl/zrTukdiBtu7BNIOchHba51eloruPRzpvQx7Pedk3CVTut7LYinijf
    /// uol0EwkQ2FLt2i2jOqiva9nXR95ujIZHcKsEeMC4RSNSP4++k6SpP8FgyYVdv5ru
    /// f8GC+HyYQ4j0TqpR/cJs53l/LGRSldaFZ6fcDde1jeyca4VivAbAH1/WDIOvmjzo
    /// 9XIGxZ10VSS5l5+DIgdkJZ+mDMLJIuVZ0YVF16ZGEB3beq1trk5lItvmSjQLTllH
    /// qMFm9UGY8jKZSo/BY8ewHEtnGSAFQK0TVuRx1HhUWwu6C9jk+2zmRS2090BNpQWa
    /// JMKFJrSPzFDPRX8CAwEAAaNTMFEwHQYDVR0OBBYEFIumbhu0lYk0EFDThEg0yyIn
    /// /wZZMB8GA1UdIwQYMBaAFIumbhu0lYk0EFDThEg0yyIn/wZZMA8GA1UdEwEB/wQF
    /// MAMBAf8wDQYJKoZIhvcNAQELBQADggEBADUNw+/NGNVtigq9tMJKqlk39MTpDn1s
    /// Z1BVIAuAWSQjlevYZJeDIPUiWNWFhRe+xN7oOLnn2+NIXEKKeMSyuPoZYbN0mBkB
    /// 99oS3XVipSANpmDvIepNdCrOnjfqDFIifRF1Dqjtb6i1hb6v/qYKVPLQvcrgGur7
    /// PKKkAu9p4YRZ3RBdwwaUuMgojrj/l6DGbeJY6IRVnVMY39rryMnZjA5xUlhCu55n
    /// oB3t/jsJLwnQN+JbAjLAeuqgOWtgARsEFzvpt+VvDsaj0YLOJPhyJwTvHgaa/slB
    /// nECzd3TuyFKYeGssSni/QQ1e7yZcLapQqz66g5otdriw0IRdOfDxm5M=
    /// -----END CERTIFICATE-----",
    ///                             } },
    ///                         } },
    ///                         { "url", "rtsps://contoso.com:443/stream1" },
    ///                         { "validationOptions", 
    ///                         {
    ///                             { "ignoreHostname", true },
    ///                             { "ignoreSignature", false },
    ///                         } },
    ///                     },
    ///                     Name = "rtspSource",
    ///                     OdataType = "#Microsoft.Media.MediaGraphRtspSource",
    ///                     Transport = "Http",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// </summary>
    public partial class MediaGraph : Pulumi.CustomResource
    {
        /// <summary>
        /// Date the Media Graph was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// Media Graph description.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// Date the Media Graph was last modified.
        /// </summary>
        [Output("lastModified")]
        public Output<string> LastModified { get; private set; } = null!;

        /// <summary>
        /// The name of the resource.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Media Graph sinks.
        /// </summary>
        [Output("sinks")]
        public Output<ImmutableArray<Outputs.MediaGraphAssetSinkResponseResult>> Sinks { get; private set; } = null!;

        /// <summary>
        /// Media Graph sources.
        /// </summary>
        [Output("sources")]
        public Output<ImmutableArray<Outputs.MediaGraphRtspSourceResponseResult>> Sources { get; private set; } = null!;

        /// <summary>
        /// Media Graph state which indicates the resource allocation status for running the media graph pipeline.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The type of the resource.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a MediaGraph resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MediaGraph(string name, MediaGraphArgs args, CustomResourceOptions? options = null)
            : base("azurerm:media/v20200201preview:MediaGraph", name, args ?? new MediaGraphArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MediaGraph(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azurerm:media/v20200201preview:MediaGraph", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azurerm:media/v20190901preview:MediaGraph"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MediaGraph resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MediaGraph Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new MediaGraph(name, id, options);
        }
    }

    public sealed class MediaGraphArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Media Services account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// Media Graph description.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        /// <summary>
        /// The Media Graph name.
        /// </summary>
        [Input("mediaGraphName", required: true)]
        public Input<string> MediaGraphName { get; set; } = null!;

        /// <summary>
        /// The name of the resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("sinks", required: true)]
        private InputList<Inputs.MediaGraphAssetSinkArgs>? _sinks;

        /// <summary>
        /// Media Graph sinks.
        /// </summary>
        public InputList<Inputs.MediaGraphAssetSinkArgs> Sinks
        {
            get => _sinks ?? (_sinks = new InputList<Inputs.MediaGraphAssetSinkArgs>());
            set => _sinks = value;
        }

        [Input("sources", required: true)]
        private InputList<Inputs.MediaGraphRtspSourceArgs>? _sources;

        /// <summary>
        /// Media Graph sources.
        /// </summary>
        public InputList<Inputs.MediaGraphRtspSourceArgs> Sources
        {
            get => _sources ?? (_sources = new InputList<Inputs.MediaGraphRtspSourceArgs>());
            set => _sources = value;
        }

        public MediaGraphArgs()
        {
        }
    }
}
