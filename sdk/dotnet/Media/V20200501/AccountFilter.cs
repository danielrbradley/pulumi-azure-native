// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Media.V20200501
{
    /// <summary>
    /// An Account Filter.
    /// 
    /// ## Create an Account Filter
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var accountFilter = new AzureRM.Media.V20200501.AccountFilter("accountFilter", new AzureRM.Media.V20200501.AccountFilterArgs
    ///         {
    ///             AccountName = "contosomedia",
    ///             FilterName = "newAccountFilter",
    ///             FirstQuality = new AzureRM.Media.V20200501.Inputs.FirstQualityArgs
    ///             {
    ///                 Bitrate = 128000,
    ///             },
    ///             PresentationTimeRange = new AzureRM.Media.V20200501.Inputs.PresentationTimeRangeArgs
    ///             {
    ///                 EndTimestamp = 170000000,
    ///                 ForceEndTimestamp = false,
    ///                 LiveBackoffDuration = 0,
    ///                 PresentationWindowDuration = 9.223372036854776e+18,
    ///                 StartTimestamp = 0,
    ///                 Timescale = 10000000,
    ///             },
    ///             ResourceGroupName = "contoso",
    ///             Tracks = 
    ///             {
    ///                 new AzureRM.Media.V20200501.Inputs.FilterTrackSelectionArgs
    ///                 {
    ///                     TrackSelections = 
    ///                     {
    ///                         new AzureRM.Media.V20200501.Inputs.FilterTrackPropertyConditionArgs
    ///                         {
    ///                             Operation = "Equal",
    ///                             Property = "Type",
    ///                             Value = "Audio",
    ///                         },
    ///                         new AzureRM.Media.V20200501.Inputs.FilterTrackPropertyConditionArgs
    ///                         {
    ///                             Operation = "NotEqual",
    ///                             Property = "Language",
    ///                             Value = "en",
    ///                         },
    ///                         new AzureRM.Media.V20200501.Inputs.FilterTrackPropertyConditionArgs
    ///                         {
    ///                             Operation = "NotEqual",
    ///                             Property = "FourCC",
    ///                             Value = "EC-3",
    ///                         },
    ///                     },
    ///                 },
    ///                 new AzureRM.Media.V20200501.Inputs.FilterTrackSelectionArgs
    ///                 {
    ///                     TrackSelections = 
    ///                     {
    ///                         new AzureRM.Media.V20200501.Inputs.FilterTrackPropertyConditionArgs
    ///                         {
    ///                             Operation = "Equal",
    ///                             Property = "Type",
    ///                             Value = "Video",
    ///                         },
    ///                         new AzureRM.Media.V20200501.Inputs.FilterTrackPropertyConditionArgs
    ///                         {
    ///                             Operation = "Equal",
    ///                             Property = "Bitrate",
    ///                             Value = "3000000-5000000",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// </summary>
    public partial class AccountFilter : Pulumi.CustomResource
    {
        /// <summary>
        /// The first quality.
        /// </summary>
        [Output("firstQuality")]
        public Output<Outputs.FirstQualityResponseResult?> FirstQuality { get; private set; } = null!;

        /// <summary>
        /// The name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The presentation time range.
        /// </summary>
        [Output("presentationTimeRange")]
        public Output<Outputs.PresentationTimeRangeResponseResult?> PresentationTimeRange { get; private set; } = null!;

        /// <summary>
        /// The tracks selection conditions.
        /// </summary>
        [Output("tracks")]
        public Output<ImmutableArray<Outputs.FilterTrackSelectionResponseResult>> Tracks { get; private set; } = null!;

        /// <summary>
        /// The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a AccountFilter resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AccountFilter(string name, AccountFilterArgs args, CustomResourceOptions? options = null)
            : base("azurerm:media/v20200501:AccountFilter", name, args ?? new AccountFilterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AccountFilter(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azurerm:media/v20200501:AccountFilter", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azurerm:media/latest:AccountFilter"},
                    new Pulumi.Alias { Type = "azurerm:media/v20180701:AccountFilter"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AccountFilter resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AccountFilter Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AccountFilter(name, id, options);
        }
    }

    public sealed class AccountFilterArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Media Services account name.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The Account Filter name
        /// </summary>
        [Input("filterName", required: true)]
        public Input<string> FilterName { get; set; } = null!;

        /// <summary>
        /// The first quality.
        /// </summary>
        [Input("firstQuality")]
        public Input<Inputs.FirstQualityArgs>? FirstQuality { get; set; }

        /// <summary>
        /// The presentation time range.
        /// </summary>
        [Input("presentationTimeRange")]
        public Input<Inputs.PresentationTimeRangeArgs>? PresentationTimeRange { get; set; }

        /// <summary>
        /// The name of the resource group within the Azure subscription.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tracks")]
        private InputList<Inputs.FilterTrackSelectionArgs>? _tracks;

        /// <summary>
        /// The tracks selection conditions.
        /// </summary>
        public InputList<Inputs.FilterTrackSelectionArgs> Tracks
        {
            get => _tracks ?? (_tracks = new InputList<Inputs.FilterTrackSelectionArgs>());
            set => _tracks = value;
        }

        public AccountFilterArgs()
        {
        }
    }
}
