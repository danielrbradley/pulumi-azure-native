// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200214

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Image template is an ARM resource managed by Microsoft.VirtualMachineImages provider
//
// ## Example Usage
// ### Create an Image Template for Linux.
//
// ```go
// package main
//
// import (
// 	virtualmachineimages "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/virtualmachineimages/v20200214"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := virtualmachineimages.NewVirtualMachineImageTemplate(ctx, "virtualMachineImageTemplate", &virtualmachineimages.VirtualMachineImageTemplateArgs{
// 			Customize: virtualmachineimages.ImageTemplateCustomizerArray{
// 				&virtualmachineimages.ImageTemplateCustomizerArgs{
// 					Name:      pulumi.String("Shell Customizer Example"),
// 					ScriptUri: pulumi.String("https://example.com/path/to/script.sh"),
// 					Type:      pulumi.String("Shell"),
// 				},
// 			},
// 			Distribute: virtualmachineimages.ImageTemplateDistributorArray{
// 				&virtualmachineimages.ImageTemplateDistributorArgs{
// 					ArtifactTags: pulumi.StringMap{
// 						"tagName": pulumi.String("value"),
// 					},
// 					ImageId:       pulumi.String("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/image_it_1"),
// 					Location:      pulumi.String("1_location"),
// 					RunOutputName: pulumi.String("image_it_pir_1"),
// 					Type:          pulumi.String("ManagedImage"),
// 				},
// 			},
// 			Identity: &virtualmachineimages.ImageTemplateIdentityArgs{
// 				Type: pulumi.String("UserAssigned"),
// 			},
// 			ImageTemplateName: pulumi.String("myImageTemplate"),
// 			Location:          pulumi.String("westus"),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Source: &virtualmachineimages.ImageTemplateSourceArgs{
// 				ImageId: pulumi.String("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/images/source_image"),
// 				Type:    pulumi.String("ManagedImage"),
// 			},
// 			Tags: pulumi.StringMap{
// 				"imagetemplate_tag1": pulumi.String("IT_T1"),
// 				"imagetemplate_tag2": pulumi.String("IT_T2"),
// 			},
// 			VmProfile: &virtualmachineimages.ImageTemplateVmProfileArgs{
// 				OsDiskSizeGB: pulumi.Int(64),
// 				VmSize:       pulumi.String("Standard_D2s_v3"),
// 				VnetConfig: &virtualmachineimages.VirtualNetworkConfigArgs{
// 					SubnetId: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet_name/subnets/subnet_name"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
// ### Create an Image Template for Windows.
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	virtualmachineimages "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/virtualmachineimages/v20200214"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := virtualmachineimages.NewVirtualMachineImageTemplate(ctx, "virtualMachineImageTemplate", &virtualmachineimages.VirtualMachineImageTemplateArgs{
// 			Customize: virtualmachineimages.ImageTemplateCustomizerArray{
// 				&virtualmachineimages.ImageTemplateCustomizerArgs{
// 					Inline: pulumi.StringArray{
// 						pulumi.String("Powershell command-1"),
// 						pulumi.String("Powershell command-2"),
// 						pulumi.String("Powershell command-3"),
// 					},
// 					Name: pulumi.String("PowerShell (inline) Customizer Example"),
// 					Type: pulumi.String("PowerShell"),
// 				},
// 				&virtualmachineimages.ImageTemplateCustomizerArgs{
// 					Name:      pulumi.String("PowerShell (script) Customizer Example"),
// 					ScriptUri: pulumi.String("https://example.com/path/to/script.ps1"),
// 					Type:      pulumi.String("PowerShell"),
// 					ValidExitCodes: pulumi.Float64Array{
// 						pulumi.Float64(0),
// 						pulumi.Float64(1),
// 					},
// 				},
// 				&virtualmachineimages.ImageTemplateCustomizerArgs{
// 					Name:                pulumi.String("Restart Customizer Example"),
// 					RestartCheckCommand: pulumi.String("powershell -command \"& {Write-Output 'restarted.'}\""),
// 					RestartCommand:      pulumi.String("shutdown /f /r /t 0 /c \"packer restart\""),
// 					RestartTimeout:      pulumi.String("10m"),
// 					Type:                pulumi.String("WindowsRestart"),
// 				},
// 				&virtualmachineimages.ImageTemplateCustomizerArgs{
// 					Filters: pulumi.StringArray{
// 						pulumi.String(fmt.Sprintf("%v%v", "$", "_.BrowseOnly")),
// 					},
// 					Name:           pulumi.String("Windows Update Customizer Example"),
// 					SearchCriteria: pulumi.String("BrowseOnly=0 and IsInstalled=0"),
// 					Type:           pulumi.String("WindowsUpdate"),
// 					UpdateLimit:    pulumi.Float64(100),
// 				},
// 			},
// 			Distribute: virtualmachineimages.ImageTemplateDistributorArray{
// 				&virtualmachineimages.ImageTemplateDistributorArgs{
// 					ArtifactTags: pulumi.StringMap{
// 						"tagName": pulumi.String("value"),
// 					},
// 					ImageId:       pulumi.String("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Compute/images/image_it_1"),
// 					Location:      pulumi.String("1_location"),
// 					RunOutputName: pulumi.String("image_it_pir_1"),
// 					Type:          pulumi.String("ManagedImage"),
// 				},
// 			},
// 			Identity: &virtualmachineimages.ImageTemplateIdentityArgs{
// 				Type: pulumi.String("UserAssigned"),
// 			},
// 			ImageTemplateName: pulumi.String("myImageTemplate"),
// 			Location:          pulumi.String("westus"),
// 			ResourceGroupName: pulumi.String("myResourceGroup"),
// 			Source: &virtualmachineimages.ImageTemplateSourceArgs{
// 				ImageId: pulumi.String("/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.Compute/images/source_image"),
// 				Type:    pulumi.String("ManagedImage"),
// 			},
// 			Tags: pulumi.StringMap{
// 				"imagetemplate_tag1": pulumi.String("IT_T1"),
// 				"imagetemplate_tag2": pulumi.String("IT_T2"),
// 			},
// 			VmProfile: &virtualmachineimages.ImageTemplateVmProfileArgs{
// 				OsDiskSizeGB: pulumi.Int(64),
// 				VmSize:       pulumi.String("Standard_D2s_v3"),
// 				VnetConfig: &virtualmachineimages.VirtualNetworkConfigArgs{
// 					SubnetId: pulumi.String("/subscriptions/{subscription-id}/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/vnet_name/subnets/subnet_name"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
type VirtualMachineImageTemplate struct {
	pulumi.CustomResourceState

	// Maximum duration to wait while building the image template. Omit or specify 0 to use the default (4 hours).
	BuildTimeoutInMinutes pulumi.IntPtrOutput `pulumi:"buildTimeoutInMinutes"`
	// Specifies the properties used to describe the customization steps of the image, like Image source etc
	Customize pulumi.ArrayOutput `pulumi:"customize"`
	// The distribution targets where the image output needs to go to.
	Distribute pulumi.ArrayOutput `pulumi:"distribute"`
	// The identity of the image template, if configured.
	Identity ImageTemplateIdentityResponseOutput `pulumi:"identity"`
	// State of 'run' that is currently executing or was last executed.
	LastRunStatus ImageTemplateLastRunStatusResponseOutput `pulumi:"lastRunStatus"`
	// Resource location
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name
	Name pulumi.StringOutput `pulumi:"name"`
	// Provisioning error, if any
	ProvisioningError ProvisioningErrorResponseOutput `pulumi:"provisioningError"`
	// Provisioning state of the resource
	ProvisioningState pulumi.StringOutput `pulumi:"provisioningState"`
	// Specifies the properties used to describe the source image.
	Source pulumi.AnyOutput `pulumi:"source"`
	// Resource tags
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Resource type
	Type pulumi.StringOutput `pulumi:"type"`
	// Describes how virtual machine is set up to build images
	VmProfile ImageTemplateVmProfileResponsePtrOutput `pulumi:"vmProfile"`
}

// NewVirtualMachineImageTemplate registers a new resource with the given unique name, arguments, and options.
func NewVirtualMachineImageTemplate(ctx *pulumi.Context,
	name string, args *VirtualMachineImageTemplateArgs, opts ...pulumi.ResourceOption) (*VirtualMachineImageTemplate, error) {
	if args == nil || args.Distribute == nil {
		return nil, errors.New("missing required argument 'Distribute'")
	}
	if args == nil || args.Identity == nil {
		return nil, errors.New("missing required argument 'Identity'")
	}
	if args == nil || args.ImageTemplateName == nil {
		return nil, errors.New("missing required argument 'ImageTemplateName'")
	}
	if args == nil || args.Location == nil {
		return nil, errors.New("missing required argument 'Location'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.Source == nil {
		return nil, errors.New("missing required argument 'Source'")
	}
	if args == nil {
		args = &VirtualMachineImageTemplateArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azurerm:virtualmachineimages/latest:VirtualMachineImageTemplate"),
		},
		{
			Type: pulumi.String("azurerm:virtualmachineimages/v20180201preview:VirtualMachineImageTemplate"),
		},
		{
			Type: pulumi.String("azurerm:virtualmachineimages/v20190201preview:VirtualMachineImageTemplate"),
		},
		{
			Type: pulumi.String("azurerm:virtualmachineimages/v20190501preview:VirtualMachineImageTemplate"),
		},
	})
	opts = append(opts, aliases)
	var resource VirtualMachineImageTemplate
	err := ctx.RegisterResource("azurerm:virtualmachineimages/v20200214:VirtualMachineImageTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVirtualMachineImageTemplate gets an existing VirtualMachineImageTemplate resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVirtualMachineImageTemplate(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VirtualMachineImageTemplateState, opts ...pulumi.ResourceOption) (*VirtualMachineImageTemplate, error) {
	var resource VirtualMachineImageTemplate
	err := ctx.ReadResource("azurerm:virtualmachineimages/v20200214:VirtualMachineImageTemplate", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VirtualMachineImageTemplate resources.
type virtualMachineImageTemplateState struct {
	// Maximum duration to wait while building the image template. Omit or specify 0 to use the default (4 hours).
	BuildTimeoutInMinutes *int `pulumi:"buildTimeoutInMinutes"`
	// Specifies the properties used to describe the customization steps of the image, like Image source etc
	Customize []interface{} `pulumi:"customize"`
	// The distribution targets where the image output needs to go to.
	Distribute []interface{} `pulumi:"distribute"`
	// The identity of the image template, if configured.
	Identity *ImageTemplateIdentityResponse `pulumi:"identity"`
	// State of 'run' that is currently executing or was last executed.
	LastRunStatus *ImageTemplateLastRunStatusResponse `pulumi:"lastRunStatus"`
	// Resource location
	Location *string `pulumi:"location"`
	// Resource name
	Name *string `pulumi:"name"`
	// Provisioning error, if any
	ProvisioningError *ProvisioningErrorResponse `pulumi:"provisioningError"`
	// Provisioning state of the resource
	ProvisioningState *string `pulumi:"provisioningState"`
	// Specifies the properties used to describe the source image.
	Source interface{} `pulumi:"source"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Resource type
	Type *string `pulumi:"type"`
	// Describes how virtual machine is set up to build images
	VmProfile *ImageTemplateVmProfileResponse `pulumi:"vmProfile"`
}

type VirtualMachineImageTemplateState struct {
	// Maximum duration to wait while building the image template. Omit or specify 0 to use the default (4 hours).
	BuildTimeoutInMinutes pulumi.IntPtrInput
	// Specifies the properties used to describe the customization steps of the image, like Image source etc
	Customize pulumi.ArrayInput
	// The distribution targets where the image output needs to go to.
	Distribute pulumi.ArrayInput
	// The identity of the image template, if configured.
	Identity ImageTemplateIdentityResponsePtrInput
	// State of 'run' that is currently executing or was last executed.
	LastRunStatus ImageTemplateLastRunStatusResponsePtrInput
	// Resource location
	Location pulumi.StringPtrInput
	// Resource name
	Name pulumi.StringPtrInput
	// Provisioning error, if any
	ProvisioningError ProvisioningErrorResponsePtrInput
	// Provisioning state of the resource
	ProvisioningState pulumi.StringPtrInput
	// Specifies the properties used to describe the source image.
	Source pulumi.Input
	// Resource tags
	Tags pulumi.StringMapInput
	// Resource type
	Type pulumi.StringPtrInput
	// Describes how virtual machine is set up to build images
	VmProfile ImageTemplateVmProfileResponsePtrInput
}

func (VirtualMachineImageTemplateState) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineImageTemplateState)(nil)).Elem()
}

type virtualMachineImageTemplateArgs struct {
	// Maximum duration to wait while building the image template. Omit or specify 0 to use the default (4 hours).
	BuildTimeoutInMinutes *int `pulumi:"buildTimeoutInMinutes"`
	// Specifies the properties used to describe the customization steps of the image, like Image source etc
	Customize []interface{} `pulumi:"customize"`
	// The distribution targets where the image output needs to go to.
	Distribute []interface{} `pulumi:"distribute"`
	// The identity of the image template, if configured.
	Identity ImageTemplateIdentity `pulumi:"identity"`
	// The name of the image Template
	ImageTemplateName string `pulumi:"imageTemplateName"`
	// Resource location
	Location string `pulumi:"location"`
	// The name of the resource group.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Specifies the properties used to describe the source image.
	Source interface{} `pulumi:"source"`
	// Resource tags
	Tags map[string]string `pulumi:"tags"`
	// Describes how virtual machine is set up to build images
	VmProfile *ImageTemplateVmProfile `pulumi:"vmProfile"`
}

// The set of arguments for constructing a VirtualMachineImageTemplate resource.
type VirtualMachineImageTemplateArgs struct {
	// Maximum duration to wait while building the image template. Omit or specify 0 to use the default (4 hours).
	BuildTimeoutInMinutes pulumi.IntPtrInput
	// Specifies the properties used to describe the customization steps of the image, like Image source etc
	Customize pulumi.ArrayInput
	// The distribution targets where the image output needs to go to.
	Distribute pulumi.ArrayInput
	// The identity of the image template, if configured.
	Identity ImageTemplateIdentityInput
	// The name of the image Template
	ImageTemplateName pulumi.StringInput
	// Resource location
	Location pulumi.StringInput
	// The name of the resource group.
	ResourceGroupName pulumi.StringInput
	// Specifies the properties used to describe the source image.
	Source pulumi.Input
	// Resource tags
	Tags pulumi.StringMapInput
	// Describes how virtual machine is set up to build images
	VmProfile ImageTemplateVmProfilePtrInput
}

func (VirtualMachineImageTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*virtualMachineImageTemplateArgs)(nil)).Elem()
}
