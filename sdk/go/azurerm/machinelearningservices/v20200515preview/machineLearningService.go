// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200515preview

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Machine Learning service object wrapped into ARM resource envelope.
//
// ## Example Usage
// ### Create Or Update service
//
// ```go
// package main
//
// import (
// 	machinelearningservices "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/machinelearningservices/v20200515preview"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := machinelearningservices.NewMachineLearningService(ctx, "machineLearningService", &machinelearningservices.MachineLearningServiceArgs{
// 			ComputeType: pulumi.String("ACI"),
// 			EnvironmentImageRequest: &machinelearningservices.CreateServiceRequestEnvironmentImageRequestArgs{
// 				Assets: machinelearningservices.ImageAssetArray{
// 					&machinelearningservices.ImageAssetArgs{
// 						MimeType: pulumi.String("application/x-python"),
// 						Unpack:   pulumi.Bool(false),
// 						Url:      pulumi.String("aml://storage/azureml/score.py"),
// 					},
// 				},
// 				DriverProgram: pulumi.String("score.py"),
// 				Environment: &machinelearningservices.EnvironmentImageRequestEnvironmentArgs{
// 					Docker: &machinelearningservices.ModelEnvironmentDefinitionDockerArgs{
// 						BaseImage:         pulumi.String("mcr.microsoft.com/azureml/base:openmpi3.1.2-ubuntu16.04"),
// 						BaseImageRegistry: nil,
// 					},
// 					EnvironmentVariables: pulumi.StringMap{
// 						"EXAMPLE_ENV_VAR": pulumi.String("EXAMPLE_VALUE"),
// 					},
// 					Name: pulumi.String("AzureML-Scikit-learn-0.20.3"),
// 					Python: &machinelearningservices.ModelEnvironmentDefinitionPythonArgs{
// 						CondaDependencies: pulumi.Map{
// 							"channels": pulumi.StringArray{
// 								pulumi.String("conda-forge"),
// 							},
// 							"dependencies": pulumi.Array{
// 								pulumi.String("python=3.6.2"),
// 								pulumi.StringArrayMap{
// 									"pip": pulumi.StringArray{
// 										pulumi.String("azureml-core==1.0.69"),
// 										pulumi.String("azureml-defaults==1.0.69"),
// 										pulumi.String("azureml-telemetry==1.0.69"),
// 										pulumi.String("azureml-train-restclients-hyperdrive==1.0.69"),
// 										pulumi.String("azureml-train-core==1.0.69"),
// 										pulumi.String("scikit-learn==0.20.3"),
// 										pulumi.String("scipy==1.2.1"),
// 										pulumi.String("numpy==1.16.2"),
// 										pulumi.String("joblib==0.13.2"),
// 									},
// 								},
// 							},
// 							"name": pulumi.String("azureml_ae1acbe6e1e6aabbad900b53c491a17c"),
// 						},
// 						InterpreterPath:         pulumi.String("python"),
// 						UserManagedDependencies: pulumi.Bool(false),
// 					},
// 					Spark: &machinelearningservices.ModelEnvironmentDefinitionSparkArgs{
// 						Packages:         machinelearningservices.SparkMavenPackageArray{},
// 						PrecachePackages: pulumi.Bool(true),
// 						Repositories:     []interface{}{},
// 					},
// 					Version: pulumi.String("3"),
// 				},
// 				Models: machinelearningservices.ModelArray{
// 					&machinelearningservices.ModelArgs{
// 						MimeType: pulumi.String("application/x-python"),
// 						Name:     pulumi.String("sklearn_regression_model.pkl"),
// 						Url:      pulumi.String("aml://storage/azureml/sklearn_regression_model.pkl"),
// 					},
// 				},
// 			},
// 			Location:          pulumi.String("eastus2"),
// 			ResourceGroupName: pulumi.String("testrg123"),
// 			ServiceName:       pulumi.String("service456"),
// 			WorkspaceName:     pulumi.String("workspaces123"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
type MachineLearningService struct {
	pulumi.CustomResourceState

	// The identity of the resource.
	Identity IdentityResponsePtrOutput `pulumi:"identity"`
	// Specifies the location of the resource.
	Location pulumi.StringPtrOutput `pulumi:"location"`
	// Specifies the name of the resource.
	Name pulumi.StringOutput `pulumi:"name"`
	// Service properties
	Properties pulumi.AnyOutput `pulumi:"properties"`
	// The sku of the workspace.
	Sku SkuResponsePtrOutput `pulumi:"sku"`
	// Contains resource tags defined as key/value pairs.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Specifies the type of the resource.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewMachineLearningService registers a new resource with the given unique name, arguments, and options.
func NewMachineLearningService(ctx *pulumi.Context,
	name string, args *MachineLearningServiceArgs, opts ...pulumi.ResourceOption) (*MachineLearningService, error) {
	if args == nil || args.ComputeType == nil {
		return nil, errors.New("missing required argument 'ComputeType'")
	}
	if args == nil || args.ResourceGroupName == nil {
		return nil, errors.New("missing required argument 'ResourceGroupName'")
	}
	if args == nil || args.ServiceName == nil {
		return nil, errors.New("missing required argument 'ServiceName'")
	}
	if args == nil || args.WorkspaceName == nil {
		return nil, errors.New("missing required argument 'WorkspaceName'")
	}
	if args == nil {
		args = &MachineLearningServiceArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azurerm:machinelearningservices/v20200501preview:MachineLearningService"),
		},
		{
			Type: pulumi.String("azurerm:machinelearningservices/v20200901preview:MachineLearningService"),
		},
	})
	opts = append(opts, aliases)
	var resource MachineLearningService
	err := ctx.RegisterResource("azurerm:machinelearningservices/v20200515preview:MachineLearningService", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMachineLearningService gets an existing MachineLearningService resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMachineLearningService(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MachineLearningServiceState, opts ...pulumi.ResourceOption) (*MachineLearningService, error) {
	var resource MachineLearningService
	err := ctx.ReadResource("azurerm:machinelearningservices/v20200515preview:MachineLearningService", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MachineLearningService resources.
type machineLearningServiceState struct {
	// The identity of the resource.
	Identity *IdentityResponse `pulumi:"identity"`
	// Specifies the location of the resource.
	Location *string `pulumi:"location"`
	// Specifies the name of the resource.
	Name *string `pulumi:"name"`
	// Service properties
	Properties interface{} `pulumi:"properties"`
	// The sku of the workspace.
	Sku *SkuResponse `pulumi:"sku"`
	// Contains resource tags defined as key/value pairs.
	Tags map[string]string `pulumi:"tags"`
	// Specifies the type of the resource.
	Type *string `pulumi:"type"`
}

type MachineLearningServiceState struct {
	// The identity of the resource.
	Identity IdentityResponsePtrInput
	// Specifies the location of the resource.
	Location pulumi.StringPtrInput
	// Specifies the name of the resource.
	Name pulumi.StringPtrInput
	// Service properties
	Properties pulumi.Input
	// The sku of the workspace.
	Sku SkuResponsePtrInput
	// Contains resource tags defined as key/value pairs.
	Tags pulumi.StringMapInput
	// Specifies the type of the resource.
	Type pulumi.StringPtrInput
}

func (MachineLearningServiceState) ElementType() reflect.Type {
	return reflect.TypeOf((*machineLearningServiceState)(nil)).Elem()
}

type machineLearningServiceArgs struct {
	// The compute environment type for the service.
	ComputeType string `pulumi:"computeType"`
	// The description of the service.
	Description *string `pulumi:"description"`
	// The Environment, models and assets needed for inferencing.
	EnvironmentImageRequest *CreateServiceRequestEnvironmentImageRequest `pulumi:"environmentImageRequest"`
	// The authentication keys.
	Keys *CreateServiceRequestKeys `pulumi:"keys"`
	// The service tag dictionary. Tags are mutable.
	KvTags map[string]string `pulumi:"kvTags"`
	// The name of the Azure location/region.
	Location *string `pulumi:"location"`
	// The service properties dictionary. Properties are immutable.
	Properties map[string]string `pulumi:"properties"`
	// Name of the resource group in which workspace is located.
	ResourceGroupName string `pulumi:"resourceGroupName"`
	// Name of the Azure Machine Learning service.
	ServiceName string `pulumi:"serviceName"`
	// Name of Azure Machine Learning workspace.
	WorkspaceName string `pulumi:"workspaceName"`
}

// The set of arguments for constructing a MachineLearningService resource.
type MachineLearningServiceArgs struct {
	// The compute environment type for the service.
	ComputeType pulumi.StringInput
	// The description of the service.
	Description pulumi.StringPtrInput
	// The Environment, models and assets needed for inferencing.
	EnvironmentImageRequest CreateServiceRequestEnvironmentImageRequestPtrInput
	// The authentication keys.
	Keys CreateServiceRequestKeysPtrInput
	// The service tag dictionary. Tags are mutable.
	KvTags pulumi.StringMapInput
	// The name of the Azure location/region.
	Location pulumi.StringPtrInput
	// The service properties dictionary. Properties are immutable.
	Properties pulumi.StringMapInput
	// Name of the resource group in which workspace is located.
	ResourceGroupName pulumi.StringInput
	// Name of the Azure Machine Learning service.
	ServiceName pulumi.StringInput
	// Name of Azure Machine Learning workspace.
	WorkspaceName pulumi.StringInput
}

func (MachineLearningServiceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*machineLearningServiceArgs)(nil)).Elem()
}
