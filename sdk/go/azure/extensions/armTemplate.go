// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package extensions

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ArmTemplate struct {
	pulumi.ResourceState

	Result pulumi.StringOutput `pulumi:"result"`
}

// NewArmTemplate registers a new resource with the given unique name, arguments, and options.
func NewArmTemplate(ctx *pulumi.Context,
	name string, args *ArmTemplateArgs, opts ...pulumi.ResourceOption) (*ArmTemplate, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.ResourceGroupName == nil {
		return nil, errors.New("invalid value for required argument 'ResourceGroupName'")
	}
	var resource ArmTemplate
	err := ctx.RegisterRemoteComponentResource("azure-native:extensions:ArmTemplate", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type armTemplateArgs struct {
	Content           string `pulumi:"content"`
	ResourceGroupName string `pulumi:"resourceGroupName"`
}

// The set of arguments for constructing a ArmTemplate resource.
type ArmTemplateArgs struct {
	Content           pulumi.StringInput
	ResourceGroupName pulumi.StringInput
}

func (ArmTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*armTemplateArgs)(nil)).Elem()
}

type ArmTemplateInput interface {
	pulumi.Input

	ToArmTemplateOutput() ArmTemplateOutput
	ToArmTemplateOutputWithContext(ctx context.Context) ArmTemplateOutput
}

func (*ArmTemplate) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmTemplate)(nil))
}

func (i *ArmTemplate) ToArmTemplateOutput() ArmTemplateOutput {
	return i.ToArmTemplateOutputWithContext(context.Background())
}

func (i *ArmTemplate) ToArmTemplateOutputWithContext(ctx context.Context) ArmTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArmTemplateOutput)
}

type ArmTemplateOutput struct {
	*pulumi.OutputState
}

func (ArmTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArmTemplate)(nil))
}

func (o ArmTemplateOutput) ToArmTemplateOutput() ArmTemplateOutput {
	return o
}

func (o ArmTemplateOutput) ToArmTemplateOutputWithContext(ctx context.Context) ArmTemplateOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(ArmTemplateOutput{})
}
