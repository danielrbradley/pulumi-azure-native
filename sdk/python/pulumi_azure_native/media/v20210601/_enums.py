# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

from enum import Enum

__all__ = [
    'AccountEncryptionKeyType',
    'AssetContainerPermission',
    'ContentKeyPolicyFairPlayRentalAndLeaseKeyType',
    'ContentKeyPolicyPlayReadyContentType',
    'ContentKeyPolicyPlayReadyLicenseType',
    'ContentKeyPolicyPlayReadyUnknownOutputPassingOption',
    'ContentKeyPolicyRestrictionTokenType',
    'DefaultAction',
    'FilterTrackPropertyCompareOperation',
    'FilterTrackPropertyType',
    'LiveEventEncodingType',
    'LiveEventInputProtocol',
    'PrivateEndpointServiceConnectionStatus',
    'PublicNetworkAccess',
    'StorageAccountType',
    'StorageAuthentication',
    'StreamOptionsFlag',
    'StretchMode',
    'TrackPropertyCompareOperation',
    'TrackPropertyType',
]


class AccountEncryptionKeyType(str, Enum):
    """
    The type of key used to encrypt the Account Key.
    """
    SYSTEM_KEY = "SystemKey"
    """The Account Key is encrypted with a System Key."""
    CUSTOMER_KEY = "CustomerKey"
    """The Account Key is encrypted with a Customer Key."""


class AssetContainerPermission(str, Enum):
    """
    The permissions to set on the SAS URL.
    """
    READ = "Read"
    """The SAS URL will allow read access to the container."""
    READ_WRITE = "ReadWrite"
    """The SAS URL will allow read and write access to the container."""
    READ_WRITE_DELETE = "ReadWriteDelete"
    """The SAS URL will allow read, write and delete access to the container."""


class ContentKeyPolicyFairPlayRentalAndLeaseKeyType(str, Enum):
    """
    The rental and lease key type.
    """
    UNKNOWN = "Unknown"
    """Represents a ContentKeyPolicyFairPlayRentalAndLeaseKeyType that is unavailable in current API version."""
    UNDEFINED = "Undefined"
    """Key duration is not specified."""
    DUAL_EXPIRY = "DualExpiry"
    """Dual expiry for offline rental."""
    PERSISTENT_UNLIMITED = "PersistentUnlimited"
    """Content key can be persisted with an unlimited duration"""
    PERSISTENT_LIMITED = "PersistentLimited"
    """Content key can be persisted and the valid duration is limited by the Rental Duration value"""


class ContentKeyPolicyPlayReadyContentType(str, Enum):
    """
    The PlayReady content type.
    """
    UNKNOWN = "Unknown"
    """Represents a ContentKeyPolicyPlayReadyContentType that is unavailable in current API version."""
    UNSPECIFIED = "Unspecified"
    """Unspecified content type."""
    ULTRA_VIOLET_DOWNLOAD = "UltraVioletDownload"
    """Ultraviolet download content type."""
    ULTRA_VIOLET_STREAMING = "UltraVioletStreaming"
    """Ultraviolet streaming content type."""


class ContentKeyPolicyPlayReadyLicenseType(str, Enum):
    """
    The license type.
    """
    UNKNOWN = "Unknown"
    """Represents a ContentKeyPolicyPlayReadyLicenseType that is unavailable in current API version."""
    NON_PERSISTENT = "NonPersistent"
    """Non persistent license."""
    PERSISTENT = "Persistent"
    """Persistent license. Allows offline playback."""


class ContentKeyPolicyPlayReadyUnknownOutputPassingOption(str, Enum):
    """
    Configures Unknown output handling settings of the license.
    """
    UNKNOWN = "Unknown"
    """Represents a ContentKeyPolicyPlayReadyUnknownOutputPassingOption that is unavailable in current API version."""
    NOT_ALLOWED = "NotAllowed"
    """Passing the video portion of protected content to an Unknown Output is not allowed."""
    ALLOWED = "Allowed"
    """Passing the video portion of protected content to an Unknown Output is allowed."""
    ALLOWED_WITH_VIDEO_CONSTRICTION = "AllowedWithVideoConstriction"
    """Passing the video portion of protected content to an Unknown Output is allowed but with constrained resolution."""


class ContentKeyPolicyRestrictionTokenType(str, Enum):
    """
    The type of token.
    """
    UNKNOWN = "Unknown"
    """Represents a ContentKeyPolicyRestrictionTokenType that is unavailable in current API version."""
    SWT = "Swt"
    """Simple Web Token."""
    JWT = "Jwt"
    """JSON Web Token."""


class DefaultAction(str, Enum):
    """
    The behavior for IP access control in Key Delivery.
    """
    ALLOW = "Allow"
    """All public IP addresses are allowed."""
    DENY = "Deny"
    """Public IP addresses are blocked."""


class FilterTrackPropertyCompareOperation(str, Enum):
    """
    The track property condition operation.
    """
    EQUAL = "Equal"
    """The equal operation."""
    NOT_EQUAL = "NotEqual"
    """The not equal operation."""


class FilterTrackPropertyType(str, Enum):
    """
    The track property type.
    """
    UNKNOWN = "Unknown"
    """The unknown track property type."""
    TYPE = "Type"
    """The type."""
    NAME = "Name"
    """The name."""
    LANGUAGE = "Language"
    """The language."""
    FOUR_CC = "FourCC"
    """The fourCC."""
    BITRATE = "Bitrate"
    """The bitrate."""


class LiveEventEncodingType(str, Enum):
    """
    Live event type. When encodingType is set to None, the service simply passes through the incoming video and audio layer(s) to the output. When encodingType is set to Standard or Premium1080p, a live encoder transcodes the incoming stream into multiple bitrates or layers. See https://go.microsoft.com/fwlink/?linkid=2095101 for more information. This property cannot be modified after the live event is created.
    """
    NONE = "None"
    """A contribution live encoder sends a multiple bitrate stream. The ingested stream passes through the live event without any further processing. It is also called the pass-through mode."""
    STANDARD = "Standard"
    """A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 720p in resolution."""
    PREMIUM1080P = "Premium1080p"
    """A contribution live encoder sends a single bitrate stream to the live event and Media Services creates multiple bitrate streams. The output cannot exceed 1080p in resolution."""
    PASSTHROUGH_BASIC = "PassthroughBasic"
    """Pending update..."""
    PASSTHROUGH_STANDARD = "PassthroughStandard"
    """Pending update..."""


class LiveEventInputProtocol(str, Enum):
    """
    The input protocol for the live event. This is specified at creation time and cannot be updated.
    """
    FRAGMENTED_MP4 = "FragmentedMP4"
    """Smooth Streaming input will be sent by the contribution encoder to the live event."""
    RTMP = "RTMP"
    """RTMP input will be sent by the contribution encoder to the live event."""


class PrivateEndpointServiceConnectionStatus(str, Enum):
    """
    Indicates whether the connection has been Approved/Rejected/Removed by the owner of the service.
    """
    PENDING = "Pending"
    APPROVED = "Approved"
    REJECTED = "Rejected"


class PublicNetworkAccess(str, Enum):
    """
    Whether or not public network access is allowed for resources under the Media Services account.
    """
    ENABLED = "Enabled"
    """Public network access is enabled."""
    DISABLED = "Disabled"
    """Public network access is disabled."""


class StorageAccountType(str, Enum):
    """
    The type of the storage account.
    """
    PRIMARY = "Primary"
    """The primary storage account for the Media Services account."""
    SECONDARY = "Secondary"
    """A secondary storage account for the Media Services account."""


class StorageAuthentication(str, Enum):
    SYSTEM = "System"
    """System authentication."""
    MANAGED_IDENTITY = "ManagedIdentity"
    """Managed Identity authentication."""


class StreamOptionsFlag(str, Enum):
    DEFAULT = "Default"
    """Live streaming with no special latency optimizations."""
    LOW_LATENCY = "LowLatency"
    """The live event provides lower end to end latency by reducing its internal buffers. This could result in more client buffering during playback if network bandwidth is low."""


class StretchMode(str, Enum):
    """
    Specifies how the input video will be resized to fit the desired output resolution(s). Default is None
    """
    NONE = "None"
    """Strictly respects the output resolution specified in the encoding preset without considering the pixel aspect ratio or display aspect ratio of the input video."""
    AUTO_SIZE = "AutoSize"
    """Override the output resolution, and change it to match the display aspect ratio of the input, without padding. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the value in the preset is overridden, and the output will be at 1280x720, which maintains the input aspect ratio of 16:9."""
    AUTO_FIT = "AutoFit"
    """Pad the output (with either letterbox or pillar box) to honor the output resolution, while ensuring that the active video region in the output has the same aspect ratio as the input. For example, if the input is 1920x1080 and the encoding preset asks for 1280x1280, then the output will be at 1280x1280, which contains an inner rectangle of 1280x720 at aspect ratio of 16:9, and pillar box regions 280 pixels wide at the left and right."""


class TrackPropertyCompareOperation(str, Enum):
    """
    Track property condition operation
    """
    UNKNOWN = "Unknown"
    """Unknown track property compare operation"""
    EQUAL = "Equal"
    """Equal operation"""


class TrackPropertyType(str, Enum):
    """
    Track property type
    """
    UNKNOWN = "Unknown"
    """Unknown track property"""
    FOUR_CC = "FourCC"
    """Track FourCC"""
