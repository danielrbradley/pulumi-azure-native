// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.EventGrid.V20170915Preview
{
    /// <summary>
    /// Event Subscription
    /// 
    /// ## Example Usage
    /// ### EventSubscriptions_CreateForCustomTopic
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var eventSubscription = new AzureRM.EventGrid.V20170915Preview.EventSubscription("eventSubscription", new AzureRM.EventGrid.V20170915Preview.EventSubscriptionArgs
    ///         {
    ///             Destination = 
    ///             {
    ///                 { "endpointType", "EventHub" },
    ///                 { "properties", 
    ///                 {
    ///                     { "resourceId", "/subscriptions/55f3dcd4-cac7-43b4-990b-a139d62a1eb2/resourceGroups/TestRG/providers/Microsoft.EventHub/namespaces/ContosoNamespace/eventhubs/EH1" },
    ///                 } },
    ///             },
    ///             EventSubscriptionName = "examplesubscription1",
    ///             Filter = new AzureRM.EventGrid.V20170915Preview.Inputs.EventSubscriptionFilterArgs
    ///             {
    ///                 IsSubjectCaseSensitive = false,
    ///                 SubjectBeginsWith = "ExamplePrefix",
    ///                 SubjectEndsWith = "ExampleSuffix",
    ///             },
    ///             Scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventGrid/topics/exampletopic1",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### EventSubscriptions_CreateForResource
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var eventSubscription = new AzureRM.EventGrid.V20170915Preview.EventSubscription("eventSubscription", new AzureRM.EventGrid.V20170915Preview.EventSubscriptionArgs
    ///         {
    ///             Destination = 
    ///             {
    ///                 { "endpointType", "WebHook" },
    ///                 { "properties", 
    ///                 {
    ///                     { "endpointUrl", "https://requestb.in/15ksip71" },
    ///                 } },
    ///             },
    ///             EventSubscriptionName = "examplesubscription10",
    ///             Filter = new AzureRM.EventGrid.V20170915Preview.Inputs.EventSubscriptionFilterArgs
    ///             {
    ///                 IsSubjectCaseSensitive = false,
    ///                 SubjectBeginsWith = "ExamplePrefix",
    ///                 SubjectEndsWith = "ExampleSuffix",
    ///             },
    ///             Scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg/providers/Microsoft.EventHub/namespaces/examplenamespace1",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### EventSubscriptions_CreateForResourceGroup
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var eventSubscription = new AzureRM.EventGrid.V20170915Preview.EventSubscription("eventSubscription", new AzureRM.EventGrid.V20170915Preview.EventSubscriptionArgs
    ///         {
    ///             Destination = 
    ///             {
    ///                 { "endpointType", "WebHook" },
    ///                 { "properties", 
    ///                 {
    ///                     { "endpointUrl", "https://requestb.in/15ksip71" },
    ///                 } },
    ///             },
    ///             EventSubscriptionName = "examplesubscription2",
    ///             Filter = new AzureRM.EventGrid.V20170915Preview.Inputs.EventSubscriptionFilterArgs
    ///             {
    ///                 IsSubjectCaseSensitive = false,
    ///                 SubjectBeginsWith = "ExamplePrefix",
    ///                 SubjectEndsWith = "ExampleSuffix",
    ///             },
    ///             Scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4/resourceGroups/examplerg",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// ### EventSubscriptions_CreateForSubscription
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var eventSubscription = new AzureRM.EventGrid.V20170915Preview.EventSubscription("eventSubscription", new AzureRM.EventGrid.V20170915Preview.EventSubscriptionArgs
    ///         {
    ///             Destination = 
    ///             {
    ///                 { "endpointType", "WebHook" },
    ///                 { "properties", 
    ///                 {
    ///                     { "endpointUrl", "https://requestb.in/15ksip71" },
    ///                 } },
    ///             },
    ///             EventSubscriptionName = "examplesubscription3",
    ///             Filter = new AzureRM.EventGrid.V20170915Preview.Inputs.EventSubscriptionFilterArgs
    ///             {
    ///                 IsSubjectCaseSensitive = false,
    ///             },
    ///             Scope = "subscriptions/5b4b650e-28b9-4790-b3ab-ddbd88d727c4",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// </summary>
    public partial class EventSubscription : Pulumi.CustomResource
    {
        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// </summary>
        [Output("destination")]
        public Output<Union<Outputs.EventHubEventSubscriptionDestinationResponseResult, Outputs.WebHookEventSubscriptionDestinationResponseResult>?> Destination { get; private set; } = null!;

        /// <summary>
        /// Information about the filter for the event subscription.
        /// </summary>
        [Output("filter")]
        public Output<Outputs.EventSubscriptionFilterResponseResult?> Filter { get; private set; } = null!;

        /// <summary>
        /// List of user defined labels.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<string>> Labels { get; private set; } = null!;

        /// <summary>
        /// Name of the resource
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Provisioning state of the event subscription.
        /// </summary>
        [Output("provisioningState")]
        public Output<string> ProvisioningState { get; private set; } = null!;

        /// <summary>
        /// Name of the topic of the event subscription.
        /// </summary>
        [Output("topic")]
        public Output<string> Topic { get; private set; } = null!;

        /// <summary>
        /// Type of the resource
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a EventSubscription resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public EventSubscription(string name, EventSubscriptionArgs args, CustomResourceOptions? options = null)
            : base("azurerm:eventgrid/v20170915preview:EventSubscription", name, args ?? new EventSubscriptionArgs(), MakeResourceOptions(options, ""))
        {
        }

        private EventSubscription(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azurerm:eventgrid/v20170915preview:EventSubscription", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azurerm:eventgrid/latest:EventSubscription"},
                    new Pulumi.Alias { Type = "azurerm:eventgrid/v20170615preview:EventSubscription"},
                    new Pulumi.Alias { Type = "azurerm:eventgrid/v20180101:EventSubscription"},
                    new Pulumi.Alias { Type = "azurerm:eventgrid/v20180501preview:EventSubscription"},
                    new Pulumi.Alias { Type = "azurerm:eventgrid/v20180915preview:EventSubscription"},
                    new Pulumi.Alias { Type = "azurerm:eventgrid/v20190101:EventSubscription"},
                    new Pulumi.Alias { Type = "azurerm:eventgrid/v20190201preview:EventSubscription"},
                    new Pulumi.Alias { Type = "azurerm:eventgrid/v20190601:EventSubscription"},
                    new Pulumi.Alias { Type = "azurerm:eventgrid/v20200101preview:EventSubscription"},
                    new Pulumi.Alias { Type = "azurerm:eventgrid/v20200401preview:EventSubscription"},
                    new Pulumi.Alias { Type = "azurerm:eventgrid/v20200601:EventSubscription"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing EventSubscription resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static EventSubscription Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new EventSubscription(name, id, options);
        }
    }

    public sealed class EventSubscriptionArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Information about the destination where events have to be delivered for the event subscription.
        /// </summary>
        [Input("destination")]
        public InputUnion<Inputs.EventHubEventSubscriptionDestinationArgs, Inputs.WebHookEventSubscriptionDestinationArgs>? Destination { get; set; }

        /// <summary>
        /// Name of the event subscription to be created. Event subscription names must be between 3 and 64 characters in length and use alphanumeric letters only.
        /// </summary>
        [Input("eventSubscriptionName", required: true)]
        public Input<string> EventSubscriptionName { get; set; } = null!;

        /// <summary>
        /// Information about the filter for the event subscription.
        /// </summary>
        [Input("filter")]
        public Input<Inputs.EventSubscriptionFilterArgs>? Filter { get; set; }

        [Input("labels")]
        private InputList<string>? _labels;

        /// <summary>
        /// List of user defined labels.
        /// </summary>
        public InputList<string> Labels
        {
            get => _labels ?? (_labels = new InputList<string>());
            set => _labels = value;
        }

        /// <summary>
        /// The scope of the resource to which the event subscription needs to be created. The scope can be a subscription, or a resource group, or a top level resource belonging to a resource provider namespace, or an EventGrid topic. For example, use '/subscriptions/{subscriptionId}/' for a subscription, '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for a resource group, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}' for a resource, and '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.EventGrid/topics/{topicName}' for an EventGrid topic.
        /// </summary>
        [Input("scope", required: true)]
        public Input<string> Scope { get; set; } = null!;

        public EventSubscriptionArgs()
        {
        }
    }
}
