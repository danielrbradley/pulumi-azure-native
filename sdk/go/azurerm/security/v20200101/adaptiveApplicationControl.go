// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package v20200101

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Example Usage
// ### Update an application control machine group by adding a new application
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	security "github.com/pulumi/pulumi-azurerm/sdk/go/azurerm/security/v20200101"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := security.NewAdaptiveApplicationControl(ctx, "adaptiveApplicationControl", &security.AdaptiveApplicationControlArgs{
// 			AscLocation:     pulumi.String("centralus"),
// 			EnforcementMode: pulumi.String("Audit"),
// 			GroupName:       pulumi.String("ERELGROUP1"),
// 			PathRecommendations: security.PathRecommendationArray{
// 				&security.PathRecommendationArgs{
// 					Action:              pulumi.String("Recommended"),
// 					Common:              pulumi.Bool(true),
// 					ConfigurationStatus: pulumi.String("Configured"),
// 					FileType:            pulumi.String("Exe"),
// 					Path:                pulumi.String("[Exe] O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US\\*\\*\\0.0.0.0"),
// 					PublisherInfo: &security.PublisherInfoArgs{
// 						BinaryName:    pulumi.String("*"),
// 						ProductName:   pulumi.String("*"),
// 						PublisherName: pulumi.String("O=MICROSOFT CORPORATION, L=REDMOND, S=WASHINGTON, C=US"),
// 						Version:       pulumi.String("0.0.0.0"),
// 					},
// 					Type: pulumi.String("PublisherSignature"),
// 					UserSids: pulumi.StringArray{
// 						pulumi.String("S-1-1-0"),
// 					},
// 					Usernames: security.UserRecommendationArray{
// 						&security.UserRecommendationArgs{
// 							RecommendationAction: pulumi.String("Recommended"),
// 							Username:             pulumi.String("Everyone"),
// 						},
// 					},
// 				},
// 				&security.PathRecommendationArgs{
// 					Action:              pulumi.String("Recommended"),
// 					Common:              pulumi.Bool(true),
// 					ConfigurationStatus: pulumi.String("Configured"),
// 					FileType:            pulumi.String("Exe"),
// 					Path:                pulumi.String(fmt.Sprintf("%v%v%v%v", "%", "OSDRIVE", "%", "\\WINDOWSAZURE\\SECAGENT\\WASECAGENTPROV.EXE")),
// 					PublisherInfo: &security.PublisherInfoArgs{
// 						BinaryName:    pulumi.String("*"),
// 						ProductName:   pulumi.String("MICROSOFTÂ® COREXT"),
// 						PublisherName: pulumi.String("CN=MICROSOFT AZURE DEPENDENCY CODE SIGN"),
// 						Version:       pulumi.String("0.0.0.0"),
// 					},
// 					Type: pulumi.String("ProductSignature"),
// 					UserSids: pulumi.StringArray{
// 						pulumi.String("S-1-1-0"),
// 					},
// 					Usernames: security.UserRecommendationArray{
// 						&security.UserRecommendationArgs{
// 							RecommendationAction: pulumi.String("Recommended"),
// 							Username:             pulumi.String("NT AUTHORITY\\SYSTEM"),
// 						},
// 					},
// 				},
// 				&security.PathRecommendationArgs{
// 					Action:              pulumi.String("Recommended"),
// 					Common:              pulumi.Bool(true),
// 					ConfigurationStatus: pulumi.String("Configured"),
// 					FileType:            pulumi.String("Exe"),
// 					Path:                pulumi.String(fmt.Sprintf("%v%v%v%v", "%", "OSDRIVE", "%", "\\WINDOWSAZURE\\PACKAGES_201973_7415\\COLLECTGUESTLOGS.EXE")),
// 					PublisherInfo: &security.PublisherInfoArgs{
// 						BinaryName:    pulumi.String("*"),
// 						ProductName:   pulumi.String("*"),
// 						PublisherName: pulumi.String("CN=MICROSOFT AZURE DEPENDENCY CODE SIGN"),
// 						Version:       pulumi.String("0.0.0.0"),
// 					},
// 					Type: pulumi.String("PublisherSignature"),
// 					UserSids: pulumi.StringArray{
// 						pulumi.String("S-1-1-0"),
// 					},
// 					Usernames: security.UserRecommendationArray{
// 						&security.UserRecommendationArgs{
// 							RecommendationAction: pulumi.String("Recommended"),
// 							Username:             pulumi.String("NT AUTHORITY\\SYSTEM"),
// 						},
// 					},
// 				},
// 				&security.PathRecommendationArgs{
// 					Action: pulumi.String("Add"),
// 					Common: pulumi.Bool(true),
// 					Path:   pulumi.String("C:\\directory\\file.exe"),
// 					Type:   pulumi.String("File"),
// 				},
// 			},
// 			ProtectionMode: &security.ProtectionModeArgs{
// 				Exe:    pulumi.String("Audit"),
// 				Msi:    pulumi.String("None"),
// 				Script: pulumi.String("None"),
// 			},
// 			VmRecommendations: security.VmRecommendationArray{
// 				&security.VmRecommendationArgs{
// 					ConfigurationStatus:  pulumi.String("Configured"),
// 					EnforcementSupport:   pulumi.String("Supported"),
// 					RecommendationAction: pulumi.String("Recommended"),
// 					ResourceId:           pulumi.String("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/erelh-stable/providers/microsoft.compute/virtualmachines/erelh-16090"),
// 				},
// 				&security.VmRecommendationArgs{
// 					ConfigurationStatus:  pulumi.String("Configured"),
// 					EnforcementSupport:   pulumi.String("Supported"),
// 					RecommendationAction: pulumi.String("Recommended"),
// 					ResourceId:           pulumi.String("/subscriptions/20ff7fc3-e762-44dd-bd96-b71116dcdc23/resourcegroups/matanvs/providers/microsoft.compute/virtualmachines/matanvs19"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
//
// ```
type AdaptiveApplicationControl struct {
	pulumi.CustomResourceState

	// The configuration status of the machines group or machine or rule
	ConfigurationStatus pulumi.StringOutput `pulumi:"configurationStatus"`
	// The application control policy enforcement/protection mode of the machine group
	EnforcementMode pulumi.StringPtrOutput                                    `pulumi:"enforcementMode"`
	Issues          AdaptiveApplicationControlIssueSummaryResponseArrayOutput `pulumi:"issues"`
	// Location where the resource is stored
	Location pulumi.StringOutput `pulumi:"location"`
	// Resource name
	Name                pulumi.StringOutput                   `pulumi:"name"`
	PathRecommendations PathRecommendationResponseArrayOutput `pulumi:"pathRecommendations"`
	// The protection mode of the collection/file types. Exe/Msi/Script are used for Windows, Executable is used for Linux.
	ProtectionMode ProtectionModeResponsePtrOutput `pulumi:"protectionMode"`
	// The initial recommendation status of the machine group or machine
	RecommendationStatus pulumi.StringOutput `pulumi:"recommendationStatus"`
	// The source type of the machine group
	SourceSystem pulumi.StringOutput `pulumi:"sourceSystem"`
	// Resource type
	Type              pulumi.StringOutput                 `pulumi:"type"`
	VmRecommendations VmRecommendationResponseArrayOutput `pulumi:"vmRecommendations"`
}

// NewAdaptiveApplicationControl registers a new resource with the given unique name, arguments, and options.
func NewAdaptiveApplicationControl(ctx *pulumi.Context,
	name string, args *AdaptiveApplicationControlArgs, opts ...pulumi.ResourceOption) (*AdaptiveApplicationControl, error) {
	if args == nil || args.AscLocation == nil {
		return nil, errors.New("missing required argument 'AscLocation'")
	}
	if args == nil || args.GroupName == nil {
		return nil, errors.New("missing required argument 'GroupName'")
	}
	if args == nil {
		args = &AdaptiveApplicationControlArgs{}
	}
	aliases := pulumi.Aliases([]pulumi.Alias{
		{
			Type: pulumi.String("azurerm:security/latest:AdaptiveApplicationControl"),
		},
		{
			Type: pulumi.String("azurerm:security/v20150601preview:AdaptiveApplicationControl"),
		},
	})
	opts = append(opts, aliases)
	var resource AdaptiveApplicationControl
	err := ctx.RegisterResource("azurerm:security/v20200101:AdaptiveApplicationControl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdaptiveApplicationControl gets an existing AdaptiveApplicationControl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdaptiveApplicationControl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdaptiveApplicationControlState, opts ...pulumi.ResourceOption) (*AdaptiveApplicationControl, error) {
	var resource AdaptiveApplicationControl
	err := ctx.ReadResource("azurerm:security/v20200101:AdaptiveApplicationControl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdaptiveApplicationControl resources.
type adaptiveApplicationControlState struct {
	// The configuration status of the machines group or machine or rule
	ConfigurationStatus *string `pulumi:"configurationStatus"`
	// The application control policy enforcement/protection mode of the machine group
	EnforcementMode *string                                          `pulumi:"enforcementMode"`
	Issues          []AdaptiveApplicationControlIssueSummaryResponse `pulumi:"issues"`
	// Location where the resource is stored
	Location *string `pulumi:"location"`
	// Resource name
	Name                *string                      `pulumi:"name"`
	PathRecommendations []PathRecommendationResponse `pulumi:"pathRecommendations"`
	// The protection mode of the collection/file types. Exe/Msi/Script are used for Windows, Executable is used for Linux.
	ProtectionMode *ProtectionModeResponse `pulumi:"protectionMode"`
	// The initial recommendation status of the machine group or machine
	RecommendationStatus *string `pulumi:"recommendationStatus"`
	// The source type of the machine group
	SourceSystem *string `pulumi:"sourceSystem"`
	// Resource type
	Type              *string                    `pulumi:"type"`
	VmRecommendations []VmRecommendationResponse `pulumi:"vmRecommendations"`
}

type AdaptiveApplicationControlState struct {
	// The configuration status of the machines group or machine or rule
	ConfigurationStatus pulumi.StringPtrInput
	// The application control policy enforcement/protection mode of the machine group
	EnforcementMode pulumi.StringPtrInput
	Issues          AdaptiveApplicationControlIssueSummaryResponseArrayInput
	// Location where the resource is stored
	Location pulumi.StringPtrInput
	// Resource name
	Name                pulumi.StringPtrInput
	PathRecommendations PathRecommendationResponseArrayInput
	// The protection mode of the collection/file types. Exe/Msi/Script are used for Windows, Executable is used for Linux.
	ProtectionMode ProtectionModeResponsePtrInput
	// The initial recommendation status of the machine group or machine
	RecommendationStatus pulumi.StringPtrInput
	// The source type of the machine group
	SourceSystem pulumi.StringPtrInput
	// Resource type
	Type              pulumi.StringPtrInput
	VmRecommendations VmRecommendationResponseArrayInput
}

func (AdaptiveApplicationControlState) ElementType() reflect.Type {
	return reflect.TypeOf((*adaptiveApplicationControlState)(nil)).Elem()
}

type adaptiveApplicationControlArgs struct {
	// The location where ASC stores the data of the subscription. can be retrieved from Get locations
	AscLocation string `pulumi:"ascLocation"`
	// The application control policy enforcement/protection mode of the machine group
	EnforcementMode *string `pulumi:"enforcementMode"`
	// Name of an application control machine group
	GroupName           string               `pulumi:"groupName"`
	PathRecommendations []PathRecommendation `pulumi:"pathRecommendations"`
	// The protection mode of the collection/file types. Exe/Msi/Script are used for Windows, Executable is used for Linux.
	ProtectionMode    *ProtectionMode    `pulumi:"protectionMode"`
	VmRecommendations []VmRecommendation `pulumi:"vmRecommendations"`
}

// The set of arguments for constructing a AdaptiveApplicationControl resource.
type AdaptiveApplicationControlArgs struct {
	// The location where ASC stores the data of the subscription. can be retrieved from Get locations
	AscLocation pulumi.StringInput
	// The application control policy enforcement/protection mode of the machine group
	EnforcementMode pulumi.StringPtrInput
	// Name of an application control machine group
	GroupName           pulumi.StringInput
	PathRecommendations PathRecommendationArrayInput
	// The protection mode of the collection/file types. Exe/Msi/Script are used for Windows, Executable is used for Linux.
	ProtectionMode    ProtectionModePtrInput
	VmRecommendations VmRecommendationArrayInput
}

func (AdaptiveApplicationControlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*adaptiveApplicationControlArgs)(nil)).Elem()
}
