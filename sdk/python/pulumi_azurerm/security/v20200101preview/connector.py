# coding=utf-8
# *** WARNING: this file was generated by the Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Dict, List, Mapping, Optional, Tuple, Union
from ... import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['Connector']


class Connector(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 authentication_details: Optional[pulumi.Input[Union[pulumi.InputType['AwAssumeRoleAuthenticationDetailsPropertiesArgs'], pulumi.InputType['AwsCredsAuthenticationDetailsPropertiesArgs'], pulumi.InputType['GcpCredentialsDetailsPropertiesArgs']]]] = None,
                 connector_name: Optional[pulumi.Input[str]] = None,
                 hybrid_compute_settings: Optional[pulumi.Input[pulumi.InputType['HybridComputeSettingsPropertiesArgs']]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        The connector setting

        ## Example Usage
        ### AwsAssumeRole - Create a cloud account connector for a subscription

        ```python
        import pulumi
        import pulumi_azurerm as azurerm

        connector = azurerm.security.v20200101preview.Connector("connector",
            authentication_details={
                "authenticationType": "awsAssumeRole",
                "awsAssumeRoleArn": "arn:aws:iam::81231569658:role/AscConnector",
                "awsExternalId": "20ff7fc3-e762-44dd-bd96-b71116dcdc23",
            },
            connector_name="aws_dev2",
            hybrid_compute_settings={
                "autoProvision": "On",
                "proxyServer": {
                    "ip": "167.220.197.140",
                    "port": "34",
                },
                "region": "West US 2",
                "resourceGroupName": "AwsConnectorRG",
                "servicePrincipal": {
                    "applicationId": "ad9bcd79-be9c-45ab-abd8-80ca1654a7d1",
                    "secret": "x2yS:FnCHssRkH0@CJY5pATzlEs@r5m.",
                },
            })

        ```
        ### AwsCred -  Create a cloud account connector for a subscription

        ```python
        import pulumi
        import pulumi_azurerm as azurerm

        connector = azurerm.security.v20200101preview.Connector("connector",
            authentication_details={
                "authenticationType": "awsCreds",
                "awsAccessKeyId": "AKIARPZCNODDNAEQFSOE",
                "awsSecretAccessKey": "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",
            },
            connector_name="aws_dev1",
            hybrid_compute_settings={
                "autoProvision": "On",
                "proxyServer": {
                    "ip": "167.220.197.140",
                    "port": "34",
                },
                "region": "West US 2",
                "resourceGroupName": "AwsConnectorRG",
                "servicePrincipal": {
                    "applicationId": "ad9bcd79-be9c-45ab-abd8-80ca1654a7d1",
                    "secret": "x2yS:FnCHssRkH0@CJY5pATzlEs@r5m.",
                },
            })

        ```
        ### gcpCredentials - Create a cloud account connector for a subscription

        ```python
        import pulumi
        import pulumi_azurerm as azurerm

        connector = azurerm.security.v20200101preview.Connector("connector",
            authentication_details={
                "authProviderX509CertUrl": "https://www.googleapis.com/oauth2/v1/certs",
                "authUri": "https://accounts.google.com/o/oauth2/auth",
                "authenticationType": "gcpCredentials",
                "clientEmail": "asc-135@asc-project-1234.iam.gserviceaccount.com",
                "clientId": "105889053725632919854",
                "clientX509CertUrl": "https://www.googleapis.com/robot/v1/metadata/x509/asc-135%40asc-project-1234.iam.gserviceaccount.com",
                "organizationId": "AscDemoOrg",
                "privateKey": \"\"\"-----BEGIN PRIVATE KEY-----
        MIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCpxYHcLzcDZ6/Q
        AeQZnQXM5GTb3p09Xsbjo2T2F61b6I7FZiQXBrbw3Zf0CUCkkqTTpD5xifl82yQ6
        89V7SAe8hxI7esAcVDhm/aJMqzVjHLISAU2L3li1sn0jjY2oYtndwN6bRivP8O6t
        9F+W6E0zMlbCxtpZEHLbb6WxlJJrwEQ0MPH2yOCwZUQi6NHksAtEzX2nNKJNyUC7
        QyBVHHMm34H2bmZwsuQp3y2otpcJ9tJnVmYfC3k/w4x2L+DIK7JnQP/C1wQqu2du
        c0w6sydF6RhLoHButrVdYRJTdfK4k03SsSTyMqZ+f7LNnKw3xenzw1VmEpk8mvoQ
        t08tCBOrAgMBAAECggEAByzz6iyMtLYjNjV+QJ7kad6VbL2iA8AHxANZ9xTVHPdd
        YXaJu/dqsA+NpqDlfI8+LDva782XH/HbPCqmMUnAGfXTjXQIvqnIoIHD5F2wKfpC
        hIRNlMXXFgbvRxtqi11yO+80+XcjzuwuCmgzyhsTeEB+bkkdXXpWgHPdmv3emnM6
        MQM9Zgrug0UndPmiUwKOcJSU4PlmlTpHEV4vA6JfA4bvphy9m1jxO5qWeah5yym2
        6FP5BRIDF98kFrDnSXJjajwgLCQ+MypFQXyax6XkxDxuKXbng1bv7eZDjqazIChk
        m0y14X0s0jnWc+AX8vfeSf7d+EsGdVinEwR1aAawEQKBgQDqDB0qxcIQ1oI1Kww8
        9vXefTiuWsf47F+fJ/DIOEbiRfE8IdCgmOABvcqJIoxW/DFMBEdLCcx73Km7pOmd
        Kg1ddScnaO8cOj2v/Ub+fAqVrA4ki4ViYP0A7/Nogga3Jr/x3ey5bitrIfFImteS
        CgBHBzZvoQpvO4lB2tKVgo2P9wKBgQC5sgTEq4sasRGSAY6lIoJno0I8w28a/16D
        es60XQeY1ger8uTGwlT02v/u/arDUmRLPClpujXq6gK29KvtRCHy7JkpGbqW2bZs
        PFKKWR7Tk3XPKYyjv94AIi5/xoFeDhS4lpAvy3Z5tQhYS6wqWKvT6yZQ3kM+Hfxs
        pHgvu3mU7QKBgQC9/E1k3hj1cBtMK4CIsHPPQljTd4+iacYJPPPAo6YuoVX8WPqw
        ksgrwbN59Fh1d8xQh5yTtgWOegYx8uFMGcm1lpbM7+pBQKm4hWGuzGQPMRZd5f/F
        ZzOZIi61I+9tlv/yxxIVR+/ozCm/pSneO04UWi9/F/uPZYW6tnWAtfRR6wKBgGsZ
        8MQaCK4JaI/klAhMghgSQnbXZXKVzUZaA3Rln6cX8u7KtgapOOTMlwaZie8Dy1LV
        TTFstAJcm9o3/h1nyYjZy3C4JTUyNpPwqs6enjf7edxVI4eidwFutZD+xcigqHTa
        aikW2atSrZB3fMIjyF7+5meH+hKOqvNiXOty3qn1AoGAZuVxYQy5FVq3YZxzr3Aa
        Am0ShoXTF6QYIbsaUiUGoa/NlHcw9V/lj4AqBRbxbaYMD+hz2J/od9cb268eJKY8
        3b6MvaUqdNhNnWodJXLhgtmGEHDKmTppz2JSTx/tVzCfhFdcOC79StZvcKLhtoFQ
        +/3lEw6NCIXzm5E4+dtJG4k=
        -----END PRIVATE KEY-----
        \"\"\",
                "privateKeyId": "6efg587hra2568as34d22326b044cc20dc2af",
                "projectId": "asc-project-1234",
                "tokenUri": "https://oauth2.googleapis.com/token",
                "type": "service_account",
            },
            connector_name="gcp_dev",
            hybrid_compute_settings={
                "autoProvision": "Off",
            })

        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Union[pulumi.InputType['AwAssumeRoleAuthenticationDetailsPropertiesArgs'], pulumi.InputType['AwsCredsAuthenticationDetailsPropertiesArgs'], pulumi.InputType['GcpCredentialsDetailsPropertiesArgs']]] authentication_details: Settings for authentication management, these settings are relevant only for the cloud connector.
        :param pulumi.Input[str] connector_name: Name of the cloud account connector
        :param pulumi.Input[pulumi.InputType['HybridComputeSettingsPropertiesArgs']] hybrid_compute_settings: Settings for hybrid compute management, these settings are relevant only Arc autoProvision (Hybrid Compute).
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['authentication_details'] = authentication_details
            if connector_name is None:
                raise TypeError("Missing required property 'connector_name'")
            __props__['connector_name'] = connector_name
            __props__['hybrid_compute_settings'] = hybrid_compute_settings
            __props__['name'] = None
            __props__['type'] = None
        super(Connector, __self__).__init__(
            'azurerm:security/v20200101preview:Connector',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'Connector':
        """
        Get an existing Connector resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        return Connector(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="authenticationDetails")
    def authentication_details(self) -> pulumi.Output[Optional[Any]]:
        """
        Settings for authentication management, these settings are relevant only for the cloud connector.
        """
        return pulumi.get(self, "authentication_details")

    @property
    @pulumi.getter(name="hybridComputeSettings")
    def hybrid_compute_settings(self) -> pulumi.Output[Optional['outputs.HybridComputeSettingsPropertiesResponse']]:
        """
        Settings for hybrid compute management, these settings are relevant only Arc autoProvision (Hybrid Compute).
        """
        return pulumi.get(self, "hybrid_compute_settings")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Resource name
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        Resource type
        """
        return pulumi.get(self, "type")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

