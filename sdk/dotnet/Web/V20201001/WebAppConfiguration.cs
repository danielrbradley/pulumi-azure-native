// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureNative.Web.V20201001
{
    /// <summary>
    /// Web app configuration ARM resource.
    /// </summary>
    [AzureNativeResourceType("azure-native:web/v20201001:WebAppConfiguration")]
    public partial class WebAppConfiguration : Pulumi.CustomResource
    {
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Output("alwaysOn")]
        public Output<bool?> AlwaysOn { get; private set; } = null!;

        /// <summary>
        /// Information about the formal API definition for the app.
        /// </summary>
        [Output("apiDefinition")]
        public Output<Outputs.ApiDefinitionInfoResponse?> ApiDefinition { get; private set; } = null!;

        /// <summary>
        /// Azure API management settings linked to the app.
        /// </summary>
        [Output("apiManagementConfig")]
        public Output<Outputs.ApiManagementConfigResponse?> ApiManagementConfig { get; private set; } = null!;

        /// <summary>
        /// App command line to launch.
        /// </summary>
        [Output("appCommandLine")]
        public Output<string?> AppCommandLine { get; private set; } = null!;

        /// <summary>
        /// Application settings.
        /// </summary>
        [Output("appSettings")]
        public Output<ImmutableArray<Outputs.NameValuePairResponse>> AppSettings { get; private set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Output("autoHealEnabled")]
        public Output<bool?> AutoHealEnabled { get; private set; } = null!;

        /// <summary>
        /// Auto Heal rules.
        /// </summary>
        [Output("autoHealRules")]
        public Output<Outputs.AutoHealRulesResponse?> AutoHealRules { get; private set; } = null!;

        /// <summary>
        /// Auto-swap slot name.
        /// </summary>
        [Output("autoSwapSlotName")]
        public Output<string?> AutoSwapSlotName { get; private set; } = null!;

        /// <summary>
        /// Connection strings.
        /// </summary>
        [Output("connectionStrings")]
        public Output<ImmutableArray<Outputs.ConnStringInfoResponse>> ConnectionStrings { get; private set; } = null!;

        /// <summary>
        /// Cross-Origin Resource Sharing (CORS) settings.
        /// </summary>
        [Output("cors")]
        public Output<Outputs.CorsSettingsResponse?> Cors { get; private set; } = null!;

        /// <summary>
        /// Default documents.
        /// </summary>
        [Output("defaultDocuments")]
        public Output<ImmutableArray<string>> DefaultDocuments { get; private set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Output("detailedErrorLoggingEnabled")]
        public Output<bool?> DetailedErrorLoggingEnabled { get; private set; } = null!;

        /// <summary>
        /// Document root.
        /// </summary>
        [Output("documentRoot")]
        public Output<string?> DocumentRoot { get; private set; } = null!;

        /// <summary>
        /// This is work around for polymorphic types.
        /// </summary>
        [Output("experiments")]
        public Output<Outputs.ExperimentsResponse?> Experiments { get; private set; } = null!;

        /// <summary>
        /// State of FTP / FTPS service
        /// </summary>
        [Output("ftpsState")]
        public Output<string?> FtpsState { get; private set; } = null!;

        /// <summary>
        /// Handler mappings.
        /// </summary>
        [Output("handlerMappings")]
        public Output<ImmutableArray<Outputs.HandlerMappingResponse>> HandlerMappings { get; private set; } = null!;

        /// <summary>
        /// Health check path
        /// </summary>
        [Output("healthCheckPath")]
        public Output<string?> HealthCheckPath { get; private set; } = null!;

        /// <summary>
        /// Http20Enabled: configures a web site to allow clients to connect over http2.0
        /// </summary>
        [Output("http20Enabled")]
        public Output<bool?> Http20Enabled { get; private set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Output("httpLoggingEnabled")]
        public Output<bool?> HttpLoggingEnabled { get; private set; } = null!;

        /// <summary>
        /// IP security restrictions for main.
        /// </summary>
        [Output("ipSecurityRestrictions")]
        public Output<ImmutableArray<Outputs.IpSecurityRestrictionResponse>> IpSecurityRestrictions { get; private set; } = null!;

        /// <summary>
        /// Java container.
        /// </summary>
        [Output("javaContainer")]
        public Output<string?> JavaContainer { get; private set; } = null!;

        /// <summary>
        /// Java container version.
        /// </summary>
        [Output("javaContainerVersion")]
        public Output<string?> JavaContainerVersion { get; private set; } = null!;

        /// <summary>
        /// Java version.
        /// </summary>
        [Output("javaVersion")]
        public Output<string?> JavaVersion { get; private set; } = null!;

        /// <summary>
        /// Kind of resource.
        /// </summary>
        [Output("kind")]
        public Output<string?> Kind { get; private set; } = null!;

        /// <summary>
        /// Site limits.
        /// </summary>
        [Output("limits")]
        public Output<Outputs.SiteLimitsResponse?> Limits { get; private set; } = null!;

        /// <summary>
        /// Linux App Framework and version
        /// </summary>
        [Output("linuxFxVersion")]
        public Output<string?> LinuxFxVersion { get; private set; } = null!;

        /// <summary>
        /// Site load balancing.
        /// </summary>
        [Output("loadBalancing")]
        public Output<string?> LoadBalancing { get; private set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Output("localMySqlEnabled")]
        public Output<bool?> LocalMySqlEnabled { get; private set; } = null!;

        /// <summary>
        /// HTTP logs directory size limit.
        /// </summary>
        [Output("logsDirectorySizeLimit")]
        public Output<int?> LogsDirectorySizeLimit { get; private set; } = null!;

        /// <summary>
        /// Site MachineKey.
        /// </summary>
        [Output("machineKey")]
        public Output<Outputs.SiteMachineKeyResponse> MachineKey { get; private set; } = null!;

        /// <summary>
        /// Managed pipeline mode.
        /// </summary>
        [Output("managedPipelineMode")]
        public Output<string?> ManagedPipelineMode { get; private set; } = null!;

        /// <summary>
        /// Managed Service Identity Id
        /// </summary>
        [Output("managedServiceIdentityId")]
        public Output<int?> ManagedServiceIdentityId { get; private set; } = null!;

        /// <summary>
        /// MinTlsVersion: configures the minimum version of TLS required for SSL requests
        /// </summary>
        [Output("minTlsVersion")]
        public Output<string?> MinTlsVersion { get; private set; } = null!;

        /// <summary>
        /// Resource Name.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// .NET Framework version.
        /// </summary>
        [Output("netFrameworkVersion")]
        public Output<string?> NetFrameworkVersion { get; private set; } = null!;

        /// <summary>
        /// Version of Node.js.
        /// </summary>
        [Output("nodeVersion")]
        public Output<string?> NodeVersion { get; private set; } = null!;

        /// <summary>
        /// Number of workers.
        /// </summary>
        [Output("numberOfWorkers")]
        public Output<int?> NumberOfWorkers { get; private set; } = null!;

        /// <summary>
        /// Version of PHP.
        /// </summary>
        [Output("phpVersion")]
        public Output<string?> PhpVersion { get; private set; } = null!;

        /// <summary>
        /// Version of PowerShell.
        /// </summary>
        [Output("powerShellVersion")]
        public Output<string?> PowerShellVersion { get; private set; } = null!;

        /// <summary>
        /// Number of preWarmed instances.
        /// This setting only applies to the Consumption and Elastic Plans
        /// </summary>
        [Output("preWarmedInstanceCount")]
        public Output<int?> PreWarmedInstanceCount { get; private set; } = null!;

        /// <summary>
        /// Publishing user name.
        /// </summary>
        [Output("publishingUsername")]
        public Output<string?> PublishingUsername { get; private set; } = null!;

        /// <summary>
        /// Push endpoint settings.
        /// </summary>
        [Output("push")]
        public Output<Outputs.PushSettingsResponse?> Push { get; private set; } = null!;

        /// <summary>
        /// Version of Python.
        /// </summary>
        [Output("pythonVersion")]
        public Output<string?> PythonVersion { get; private set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Output("remoteDebuggingEnabled")]
        public Output<bool?> RemoteDebuggingEnabled { get; private set; } = null!;

        /// <summary>
        /// Remote debugging version.
        /// </summary>
        [Output("remoteDebuggingVersion")]
        public Output<string?> RemoteDebuggingVersion { get; private set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Output("requestTracingEnabled")]
        public Output<bool?> RequestTracingEnabled { get; private set; } = null!;

        /// <summary>
        /// Request tracing expiration time.
        /// </summary>
        [Output("requestTracingExpirationTime")]
        public Output<string?> RequestTracingExpirationTime { get; private set; } = null!;

        /// <summary>
        /// IP security restrictions for scm.
        /// </summary>
        [Output("scmIpSecurityRestrictions")]
        public Output<ImmutableArray<Outputs.IpSecurityRestrictionResponse>> ScmIpSecurityRestrictions { get; private set; } = null!;

        /// <summary>
        /// IP security restrictions for scm to use main.
        /// </summary>
        [Output("scmIpSecurityRestrictionsUseMain")]
        public Output<bool?> ScmIpSecurityRestrictionsUseMain { get; private set; } = null!;

        /// <summary>
        /// ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site
        /// </summary>
        [Output("scmMinTlsVersion")]
        public Output<string?> ScmMinTlsVersion { get; private set; } = null!;

        /// <summary>
        /// SCM type.
        /// </summary>
        [Output("scmType")]
        public Output<string?> ScmType { get; private set; } = null!;

        /// <summary>
        /// The system metadata relating to this resource.
        /// </summary>
        [Output("systemData")]
        public Output<Outputs.SystemDataResponse> SystemData { get; private set; } = null!;

        /// <summary>
        /// Tracing options.
        /// </summary>
        [Output("tracingOptions")]
        public Output<string?> TracingOptions { get; private set; } = null!;

        /// <summary>
        /// Resource type.
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Output("use32BitWorkerProcess")]
        public Output<bool?> Use32BitWorkerProcess { get; private set; } = null!;

        /// <summary>
        /// Virtual applications.
        /// </summary>
        [Output("virtualApplications")]
        public Output<ImmutableArray<Outputs.VirtualApplicationResponse>> VirtualApplications { get; private set; } = null!;

        /// <summary>
        /// Virtual Network name.
        /// </summary>
        [Output("vnetName")]
        public Output<string?> VnetName { get; private set; } = null!;

        /// <summary>
        /// The number of private ports assigned to this app. These will be assigned dynamically on runtime.
        /// </summary>
        [Output("vnetPrivatePortsCount")]
        public Output<int?> VnetPrivatePortsCount { get; private set; } = null!;

        /// <summary>
        /// Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
        /// </summary>
        [Output("vnetRouteAllEnabled")]
        public Output<bool?> VnetRouteAllEnabled { get; private set; } = null!;

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Output("webSocketsEnabled")]
        public Output<bool?> WebSocketsEnabled { get; private set; } = null!;

        /// <summary>
        /// Xenon App Framework and version
        /// </summary>
        [Output("windowsFxVersion")]
        public Output<string?> WindowsFxVersion { get; private set; } = null!;

        /// <summary>
        /// Explicit Managed Service Identity Id
        /// </summary>
        [Output("xManagedServiceIdentityId")]
        public Output<int?> XManagedServiceIdentityId { get; private set; } = null!;


        /// <summary>
        /// Create a WebAppConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public WebAppConfiguration(string name, WebAppConfigurationArgs args, CustomResourceOptions? options = null)
            : base("azure-native:web/v20201001:WebAppConfiguration", name, args ?? new WebAppConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private WebAppConfiguration(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azure-native:web/v20201001:WebAppConfiguration", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20201001:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-native:web:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-nextgen:web:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-native:web/latest:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/latest:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-native:web/v20150801:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20150801:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-native:web/v20160801:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20160801:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-native:web/v20180201:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20180201:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-native:web/v20181101:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20181101:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-native:web/v20190801:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20190801:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-native:web/v20200601:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20200601:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-native:web/v20200901:WebAppConfiguration"},
                    new Pulumi.Alias { Type = "azure-nextgen:web/v20200901:WebAppConfiguration"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing WebAppConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static WebAppConfiguration Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new WebAppConfiguration(name, id, options);
        }
    }

    public sealed class WebAppConfigurationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if Always On is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("alwaysOn")]
        public Input<bool>? AlwaysOn { get; set; }

        /// <summary>
        /// Information about the formal API definition for the app.
        /// </summary>
        [Input("apiDefinition")]
        public Input<Inputs.ApiDefinitionInfoArgs>? ApiDefinition { get; set; }

        /// <summary>
        /// Azure API management settings linked to the app.
        /// </summary>
        [Input("apiManagementConfig")]
        public Input<Inputs.ApiManagementConfigArgs>? ApiManagementConfig { get; set; }

        /// <summary>
        /// App command line to launch.
        /// </summary>
        [Input("appCommandLine")]
        public Input<string>? AppCommandLine { get; set; }

        [Input("appSettings")]
        private InputList<Inputs.NameValuePairArgs>? _appSettings;

        /// <summary>
        /// Application settings.
        /// </summary>
        public InputList<Inputs.NameValuePairArgs> AppSettings
        {
            get => _appSettings ?? (_appSettings = new InputList<Inputs.NameValuePairArgs>());
            set => _appSettings = value;
        }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if Auto Heal is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("autoHealEnabled")]
        public Input<bool>? AutoHealEnabled { get; set; }

        /// <summary>
        /// Auto Heal rules.
        /// </summary>
        [Input("autoHealRules")]
        public Input<Inputs.AutoHealRulesArgs>? AutoHealRules { get; set; }

        /// <summary>
        /// Auto-swap slot name.
        /// </summary>
        [Input("autoSwapSlotName")]
        public Input<string>? AutoSwapSlotName { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.ConnStringInfoArgs>? _connectionStrings;

        /// <summary>
        /// Connection strings.
        /// </summary>
        public InputList<Inputs.ConnStringInfoArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.ConnStringInfoArgs>());
            set => _connectionStrings = value;
        }

        /// <summary>
        /// Cross-Origin Resource Sharing (CORS) settings.
        /// </summary>
        [Input("cors")]
        public Input<Inputs.CorsSettingsArgs>? Cors { get; set; }

        [Input("defaultDocuments")]
        private InputList<string>? _defaultDocuments;

        /// <summary>
        /// Default documents.
        /// </summary>
        public InputList<string> DefaultDocuments
        {
            get => _defaultDocuments ?? (_defaultDocuments = new InputList<string>());
            set => _defaultDocuments = value;
        }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if detailed error logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("detailedErrorLoggingEnabled")]
        public Input<bool>? DetailedErrorLoggingEnabled { get; set; }

        /// <summary>
        /// Document root.
        /// </summary>
        [Input("documentRoot")]
        public Input<string>? DocumentRoot { get; set; }

        /// <summary>
        /// This is work around for polymorphic types.
        /// </summary>
        [Input("experiments")]
        public Input<Inputs.ExperimentsArgs>? Experiments { get; set; }

        /// <summary>
        /// State of FTP / FTPS service
        /// </summary>
        [Input("ftpsState")]
        public InputUnion<string, Pulumi.AzureNative.Web.V20201001.FtpsState>? FtpsState { get; set; }

        [Input("handlerMappings")]
        private InputList<Inputs.HandlerMappingArgs>? _handlerMappings;

        /// <summary>
        /// Handler mappings.
        /// </summary>
        public InputList<Inputs.HandlerMappingArgs> HandlerMappings
        {
            get => _handlerMappings ?? (_handlerMappings = new InputList<Inputs.HandlerMappingArgs>());
            set => _handlerMappings = value;
        }

        /// <summary>
        /// Health check path
        /// </summary>
        [Input("healthCheckPath")]
        public Input<string>? HealthCheckPath { get; set; }

        /// <summary>
        /// Http20Enabled: configures a web site to allow clients to connect over http2.0
        /// </summary>
        [Input("http20Enabled")]
        public Input<bool>? Http20Enabled { get; set; }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if HTTP logging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("httpLoggingEnabled")]
        public Input<bool>? HttpLoggingEnabled { get; set; }

        [Input("ipSecurityRestrictions")]
        private InputList<Inputs.IpSecurityRestrictionArgs>? _ipSecurityRestrictions;

        /// <summary>
        /// IP security restrictions for main.
        /// </summary>
        public InputList<Inputs.IpSecurityRestrictionArgs> IpSecurityRestrictions
        {
            get => _ipSecurityRestrictions ?? (_ipSecurityRestrictions = new InputList<Inputs.IpSecurityRestrictionArgs>());
            set => _ipSecurityRestrictions = value;
        }

        /// <summary>
        /// Java container.
        /// </summary>
        [Input("javaContainer")]
        public Input<string>? JavaContainer { get; set; }

        /// <summary>
        /// Java container version.
        /// </summary>
        [Input("javaContainerVersion")]
        public Input<string>? JavaContainerVersion { get; set; }

        /// <summary>
        /// Java version.
        /// </summary>
        [Input("javaVersion")]
        public Input<string>? JavaVersion { get; set; }

        /// <summary>
        /// Kind of resource.
        /// </summary>
        [Input("kind")]
        public Input<string>? Kind { get; set; }

        /// <summary>
        /// Site limits.
        /// </summary>
        [Input("limits")]
        public Input<Inputs.SiteLimitsArgs>? Limits { get; set; }

        /// <summary>
        /// Linux App Framework and version
        /// </summary>
        [Input("linuxFxVersion")]
        public Input<string>? LinuxFxVersion { get; set; }

        /// <summary>
        /// Site load balancing.
        /// </summary>
        [Input("loadBalancing")]
        public Input<Pulumi.AzureNative.Web.V20201001.SiteLoadBalancing>? LoadBalancing { get; set; }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to enable local MySQL; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("localMySqlEnabled")]
        public Input<bool>? LocalMySqlEnabled { get; set; }

        /// <summary>
        /// HTTP logs directory size limit.
        /// </summary>
        [Input("logsDirectorySizeLimit")]
        public Input<int>? LogsDirectorySizeLimit { get; set; }

        /// <summary>
        /// Managed pipeline mode.
        /// </summary>
        [Input("managedPipelineMode")]
        public Input<Pulumi.AzureNative.Web.V20201001.ManagedPipelineMode>? ManagedPipelineMode { get; set; }

        /// <summary>
        /// Managed Service Identity Id
        /// </summary>
        [Input("managedServiceIdentityId")]
        public Input<int>? ManagedServiceIdentityId { get; set; }

        /// <summary>
        /// MinTlsVersion: configures the minimum version of TLS required for SSL requests
        /// </summary>
        [Input("minTlsVersion")]
        public InputUnion<string, Pulumi.AzureNative.Web.V20201001.SupportedTlsVersions>? MinTlsVersion { get; set; }

        /// <summary>
        /// Name of the app.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// .NET Framework version.
        /// </summary>
        [Input("netFrameworkVersion")]
        public Input<string>? NetFrameworkVersion { get; set; }

        /// <summary>
        /// Version of Node.js.
        /// </summary>
        [Input("nodeVersion")]
        public Input<string>? NodeVersion { get; set; }

        /// <summary>
        /// Number of workers.
        /// </summary>
        [Input("numberOfWorkers")]
        public Input<int>? NumberOfWorkers { get; set; }

        /// <summary>
        /// Version of PHP.
        /// </summary>
        [Input("phpVersion")]
        public Input<string>? PhpVersion { get; set; }

        /// <summary>
        /// Version of PowerShell.
        /// </summary>
        [Input("powerShellVersion")]
        public Input<string>? PowerShellVersion { get; set; }

        /// <summary>
        /// Number of preWarmed instances.
        /// This setting only applies to the Consumption and Elastic Plans
        /// </summary>
        [Input("preWarmedInstanceCount")]
        public Input<int>? PreWarmedInstanceCount { get; set; }

        /// <summary>
        /// Publishing user name.
        /// </summary>
        [Input("publishingUsername")]
        public Input<string>? PublishingUsername { get; set; }

        /// <summary>
        /// Push endpoint settings.
        /// </summary>
        [Input("push")]
        public Input<Inputs.PushSettingsArgs>? Push { get; set; }

        /// <summary>
        /// Version of Python.
        /// </summary>
        [Input("pythonVersion")]
        public Input<string>? PythonVersion { get; set; }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if remote debugging is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("remoteDebuggingEnabled")]
        public Input<bool>? RemoteDebuggingEnabled { get; set; }

        /// <summary>
        /// Remote debugging version.
        /// </summary>
        [Input("remoteDebuggingVersion")]
        public Input<string>? RemoteDebuggingVersion { get; set; }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if request tracing is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("requestTracingEnabled")]
        public Input<bool>? RequestTracingEnabled { get; set; }

        /// <summary>
        /// Request tracing expiration time.
        /// </summary>
        [Input("requestTracingExpirationTime")]
        public Input<string>? RequestTracingExpirationTime { get; set; }

        /// <summary>
        /// Name of the resource group to which the resource belongs.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("scmIpSecurityRestrictions")]
        private InputList<Inputs.IpSecurityRestrictionArgs>? _scmIpSecurityRestrictions;

        /// <summary>
        /// IP security restrictions for scm.
        /// </summary>
        public InputList<Inputs.IpSecurityRestrictionArgs> ScmIpSecurityRestrictions
        {
            get => _scmIpSecurityRestrictions ?? (_scmIpSecurityRestrictions = new InputList<Inputs.IpSecurityRestrictionArgs>());
            set => _scmIpSecurityRestrictions = value;
        }

        /// <summary>
        /// IP security restrictions for scm to use main.
        /// </summary>
        [Input("scmIpSecurityRestrictionsUseMain")]
        public Input<bool>? ScmIpSecurityRestrictionsUseMain { get; set; }

        /// <summary>
        /// ScmMinTlsVersion: configures the minimum version of TLS required for SSL requests for SCM site
        /// </summary>
        [Input("scmMinTlsVersion")]
        public InputUnion<string, Pulumi.AzureNative.Web.V20201001.SupportedTlsVersions>? ScmMinTlsVersion { get; set; }

        /// <summary>
        /// SCM type.
        /// </summary>
        [Input("scmType")]
        public InputUnion<string, Pulumi.AzureNative.Web.V20201001.ScmType>? ScmType { get; set; }

        /// <summary>
        /// Tracing options.
        /// </summary>
        [Input("tracingOptions")]
        public Input<string>? TracingOptions { get; set; }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; to use 32-bit worker process; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("use32BitWorkerProcess")]
        public Input<bool>? Use32BitWorkerProcess { get; set; }

        [Input("virtualApplications")]
        private InputList<Inputs.VirtualApplicationArgs>? _virtualApplications;

        /// <summary>
        /// Virtual applications.
        /// </summary>
        public InputList<Inputs.VirtualApplicationArgs> VirtualApplications
        {
            get => _virtualApplications ?? (_virtualApplications = new InputList<Inputs.VirtualApplicationArgs>());
            set => _virtualApplications = value;
        }

        /// <summary>
        /// Virtual Network name.
        /// </summary>
        [Input("vnetName")]
        public Input<string>? VnetName { get; set; }

        /// <summary>
        /// The number of private ports assigned to this app. These will be assigned dynamically on runtime.
        /// </summary>
        [Input("vnetPrivatePortsCount")]
        public Input<int>? VnetPrivatePortsCount { get; set; }

        /// <summary>
        /// Virtual Network Route All enabled. This causes all outbound traffic to have Virtual Network Security Groups and User Defined Routes applied.
        /// </summary>
        [Input("vnetRouteAllEnabled")]
        public Input<bool>? VnetRouteAllEnabled { get; set; }

        /// <summary>
        /// &lt;code&gt;true&lt;/code&gt; if WebSocket is enabled; otherwise, &lt;code&gt;false&lt;/code&gt;.
        /// </summary>
        [Input("webSocketsEnabled")]
        public Input<bool>? WebSocketsEnabled { get; set; }

        /// <summary>
        /// Xenon App Framework and version
        /// </summary>
        [Input("windowsFxVersion")]
        public Input<string>? WindowsFxVersion { get; set; }

        /// <summary>
        /// Explicit Managed Service Identity Id
        /// </summary>
        [Input("xManagedServiceIdentityId")]
        public Input<int>? XManagedServiceIdentityId { get; set; }

        public WebAppConfigurationArgs()
        {
            Http20Enabled = true;
            LocalMySqlEnabled = false;
            NetFrameworkVersion = "v4.6";
        }
    }
}
