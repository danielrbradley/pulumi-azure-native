// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * The metric alert resource.
 *
 * ## Example Usage
 * ### Create or update a dynamic alert rule for Multiple Resources
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 *
 * const metricAlert = new azurerm.insights.latest.MetricAlert("metricAlert", {
 *     actions: [{
 *         actionGroupId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/notificationgroups/group2",
 *         webHookProperties: {
 *             key11: "value11",
 *             key12: "value12",
 *         },
 *     }],
 *     autoMitigate: false,
 *     criteria: {
 *         odataType: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
 *     },
 *     description: "This is the description of the rule1",
 *     enabled: true,
 *     evaluationFrequency: "PT1M",
 *     location: "global",
 *     resourceGroupName: "gigtest",
 *     ruleName: "MetricAlertOnMultipleResources",
 *     scopes: [
 *         "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1",
 *         "/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2",
 *     ],
 *     severity: 3,
 *     tags: {},
 *     targetResourceRegion: "southcentralus",
 *     targetResourceType: "Microsoft.Compute/virtualMachines",
 *     windowSize: "PT15M",
 * });
 *
 * ```
 * ### Create or update a dynamic alert rule for Single Resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 *
 * const metricAlert = new azurerm.insights.latest.MetricAlert("metricAlert", {
 *     actions: [{
 *         actionGroupId: "/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/gigtest/providers/microsoft.insights/notificationgroups/group2",
 *         webHookProperties: {
 *             key11: "value11",
 *             key12: "value12",
 *         },
 *     }],
 *     autoMitigate: false,
 *     criteria: {
 *         odataType: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
 *     },
 *     description: "This is the description of the rule1",
 *     enabled: true,
 *     evaluationFrequency: "PT1M",
 *     location: "global",
 *     resourceGroupName: "gigtest",
 *     ruleName: "chiricutin",
 *     scopes: ["/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"],
 *     severity: 3,
 *     tags: {},
 *     targetResourceRegion: "southcentralus",
 *     targetResourceType: "Microsoft.Compute/virtualMachines",
 *     windowSize: "PT15M",
 * });
 *
 * ```
 * ### Create or update a web test alert rule
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 *
 * const metricAlert = new azurerm.insights.latest.MetricAlert("metricAlert", {
 *     actions: [],
 *     criteria: {
 *         odataType: "Microsoft.Azure.Monitor.WebtestLocationAvailabilityCriteria",
 *     },
 *     description: "Automatically created alert rule for availability test \"component-example\" a",
 *     enabled: true,
 *     evaluationFrequency: "PT1M",
 *     location: "global",
 *     resourceGroupName: "rg-example",
 *     ruleName: "webtest-name-example",
 *     scopes: [
 *         "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example",
 *         "/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example",
 *     ],
 *     severity: 4,
 *     tags: {
 *         "hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/components/webtest-name-example": "Resource",
 *         "hidden-link:/subscriptions/12345678-1234-1234-1234-123456789101/resourcegroups/rg-example/providers/microsoft.insights/webtests/component-example": "Resource",
 *     },
 *     windowSize: "PT15M",
 * });
 *
 * ```
 * ### Create or update an alert rule for Multiple Resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 *
 * const metricAlert = new azurerm.insights.latest.MetricAlert("metricAlert", {
 *     actions: [{
 *         actionGroupId: "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/notificationgroups/group2",
 *         webHookProperties: {
 *             key11: "value11",
 *             key12: "value12",
 *         },
 *     }],
 *     autoMitigate: false,
 *     criteria: {
 *         odataType: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
 *     },
 *     description: "This is the description of the rule1",
 *     enabled: true,
 *     evaluationFrequency: "PT1M",
 *     location: "global",
 *     resourceGroupName: "gigtest",
 *     ruleName: "MetricAlertOnMultipleResources",
 *     scopes: [
 *         "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme1",
 *         "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme2",
 *     ],
 *     severity: 3,
 *     tags: {},
 *     targetResourceRegion: "southcentralus",
 *     targetResourceType: "Microsoft.Compute/virtualMachines",
 *     windowSize: "PT15M",
 * });
 *
 * ```
 * ### Create or update an alert rule for Single Resource
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 *
 * const metricAlert = new azurerm.insights.latest.MetricAlert("metricAlert", {
 *     actions: [{
 *         actionGroupId: "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/notificationgroups/group2",
 *         webHookProperties: {
 *             key11: "value11",
 *             key12: "value12",
 *         },
 *     }],
 *     autoMitigate: false,
 *     criteria: {
 *         odataType: "Microsoft.Azure.Monitor.SingleResourceMultipleMetricCriteria",
 *     },
 *     description: "This is the description of the rule1",
 *     enabled: true,
 *     evaluationFrequency: "Pt1m",
 *     location: "global",
 *     resourceGroupName: "gigtest",
 *     ruleName: "chiricutin",
 *     scopes: ["/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest/providers/Microsoft.Compute/virtualMachines/gigwadme"],
 *     severity: 3,
 *     tags: {},
 *     windowSize: "Pt15m",
 * });
 *
 * ```
 * ### Create or update an alert rule on Resource group(s)
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 *
 * const metricAlert = new azurerm.insights.latest.MetricAlert("metricAlert", {
 *     actions: [{
 *         actionGroupId: "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/notificationgroups/group2",
 *         webHookProperties: {
 *             key11: "value11",
 *             key12: "value12",
 *         },
 *     }],
 *     autoMitigate: false,
 *     criteria: {
 *         odataType: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
 *     },
 *     description: "This is the description of the rule1",
 *     enabled: true,
 *     evaluationFrequency: "PT1M",
 *     location: "global",
 *     resourceGroupName: "gigtest1",
 *     ruleName: "MetricAlertAtResourceGroupLevel",
 *     scopes: [
 *         "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest1",
 *         "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourceGroups/gigtest2",
 *     ],
 *     severity: 3,
 *     tags: {},
 *     targetResourceRegion: "southcentralus",
 *     targetResourceType: "Microsoft.Compute/virtualMachines",
 *     windowSize: "PT15M",
 * });
 *
 * ```
 * ### Create or update an alert rule on Subscription
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 *
 * const metricAlert = new azurerm.insights.latest.MetricAlert("metricAlert", {
 *     actions: [{
 *         actionGroupId: "/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7/resourcegroups/gigtest/providers/microsoft.insights/notificationgroups/group2",
 *         webHookProperties: {
 *             key11: "value11",
 *             key12: "value12",
 *         },
 *     }],
 *     autoMitigate: false,
 *     criteria: {
 *         odataType: "Microsoft.Azure.Monitor.MultipleResourceMultipleMetricCriteria",
 *     },
 *     description: "This is the description of the rule1",
 *     enabled: true,
 *     evaluationFrequency: "PT1M",
 *     location: "global",
 *     resourceGroupName: "gigtest",
 *     ruleName: "MetricAlertAtSubscriptionLevel",
 *     scopes: ["/subscriptions/14ddf0c5-77c5-4b53-84f6-e1fa43ad68f7"],
 *     severity: 3,
 *     tags: {},
 *     targetResourceRegion: "southcentralus",
 *     targetResourceType: "Microsoft.Compute/virtualMachines",
 *     windowSize: "PT15M",
 * });
 *
 * ```
 */
export class MetricAlert extends pulumi.CustomResource {
    /**
     * Get an existing MetricAlert resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): MetricAlert {
        return new MetricAlert(name, undefined, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:insights/latest:MetricAlert';

    /**
     * Returns true if the given object is an instance of MetricAlert.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is MetricAlert {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === MetricAlert.__pulumiType;
    }

    /**
     * the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
     */
    public readonly actions!: pulumi.Output<outputs.insights.latest.MetricAlertActionResponse[] | undefined>;
    /**
     * the flag that indicates whether the alert should be auto resolved or not. The default is true.
     */
    public readonly autoMitigate!: pulumi.Output<boolean | undefined>;
    /**
     * defines the specific alert criteria information.
     */
    public readonly criteria!: pulumi.Output<outputs.insights.latest.MetricAlertCriteriaResponse>;
    /**
     * the description of the metric alert that will be included in the alert email.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * the flag that indicates whether the metric alert is enabled.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * how often the metric alert is evaluated represented in ISO 8601 duration format.
     */
    public readonly evaluationFrequency!: pulumi.Output<string>;
    /**
     * Last time the rule was updated in ISO8601 format.
     */
    public /*out*/ readonly lastUpdatedTime!: pulumi.Output<string>;
    /**
     * Resource location
     */
    public readonly location!: pulumi.Output<string>;
    /**
     * Azure resource name
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * the list of resource id's that this metric alert is scoped to.
     */
    public readonly scopes!: pulumi.Output<string[] | undefined>;
    /**
     * Alert severity {0, 1, 2, 3, 4}
     */
    public readonly severity!: pulumi.Output<number>;
    /**
     * Resource tags
     */
    public readonly tags!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
     */
    public readonly targetResourceRegion!: pulumi.Output<string | undefined>;
    /**
     * the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
     */
    public readonly targetResourceType!: pulumi.Output<string | undefined>;
    /**
     * Azure resource type
     */
    public /*out*/ readonly type!: pulumi.Output<string>;
    /**
     * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
     */
    public readonly windowSize!: pulumi.Output<string>;

    /**
     * Create a MetricAlert resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: MetricAlertArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, state: undefined, opts: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: MetricAlertArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState as MetricAlertArgs | undefined;
            if (!args || args.criteria === undefined) {
                throw new Error("Missing required property 'criteria'");
            }
            if (!args || args.description === undefined) {
                throw new Error("Missing required property 'description'");
            }
            if (!args || args.enabled === undefined) {
                throw new Error("Missing required property 'enabled'");
            }
            if (!args || args.evaluationFrequency === undefined) {
                throw new Error("Missing required property 'evaluationFrequency'");
            }
            if (!args || args.location === undefined) {
                throw new Error("Missing required property 'location'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.ruleName === undefined) {
                throw new Error("Missing required property 'ruleName'");
            }
            if (!args || args.severity === undefined) {
                throw new Error("Missing required property 'severity'");
            }
            if (!args || args.windowSize === undefined) {
                throw new Error("Missing required property 'windowSize'");
            }
            inputs["actions"] = args ? args.actions : undefined;
            inputs["autoMitigate"] = args ? args.autoMitigate : undefined;
            inputs["criteria"] = args ? args.criteria : undefined;
            inputs["description"] = args ? args.description : undefined;
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["evaluationFrequency"] = args ? args.evaluationFrequency : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["ruleName"] = args ? args.ruleName : undefined;
            inputs["scopes"] = args ? args.scopes : undefined;
            inputs["severity"] = args ? args.severity : undefined;
            inputs["tags"] = args ? args.tags : undefined;
            inputs["targetResourceRegion"] = args ? args.targetResourceRegion : undefined;
            inputs["targetResourceType"] = args ? args.targetResourceType : undefined;
            inputs["windowSize"] = args ? args.windowSize : undefined;
            inputs["lastUpdatedTime"] = undefined /*out*/;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azurerm:insights/v20180301:MetricAlert" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(MetricAlert.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a MetricAlert resource.
 */
export interface MetricAlertArgs {
    /**
     * the array of actions that are performed when the alert rule becomes active, and when an alert condition is resolved.
     */
    readonly actions?: pulumi.Input<pulumi.Input<inputs.insights.latest.MetricAlertAction>[]>;
    /**
     * the flag that indicates whether the alert should be auto resolved or not. The default is true.
     */
    readonly autoMitigate?: pulumi.Input<boolean>;
    /**
     * defines the specific alert criteria information.
     */
    readonly criteria: pulumi.Input<inputs.insights.latest.MetricAlertCriteria>;
    /**
     * the description of the metric alert that will be included in the alert email.
     */
    readonly description: pulumi.Input<string>;
    /**
     * the flag that indicates whether the metric alert is enabled.
     */
    readonly enabled: pulumi.Input<boolean>;
    /**
     * how often the metric alert is evaluated represented in ISO 8601 duration format.
     */
    readonly evaluationFrequency: pulumi.Input<string>;
    /**
     * Resource location
     */
    readonly location: pulumi.Input<string>;
    /**
     * The name of the resource group.
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * The name of the rule.
     */
    readonly ruleName: pulumi.Input<string>;
    /**
     * the list of resource id's that this metric alert is scoped to.
     */
    readonly scopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Alert severity {0, 1, 2, 3, 4}
     */
    readonly severity: pulumi.Input<number>;
    /**
     * Resource tags
     */
    readonly tags?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * the region of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
     */
    readonly targetResourceRegion?: pulumi.Input<string>;
    /**
     * the resource type of the target resource(s) on which the alert is created/updated. Mandatory for MultipleResourceMultipleMetricCriteria.
     */
    readonly targetResourceType?: pulumi.Input<string>;
    /**
     * the period of time (in ISO 8601 duration format) that is used to monitor alert activity based on the threshold.
     */
    readonly windowSize: pulumi.Input<string>;
}
