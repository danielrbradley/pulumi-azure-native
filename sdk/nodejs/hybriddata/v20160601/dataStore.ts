// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../../types/input";
import * as outputs from "../../types/output";
import * as utilities from "../../utilities";

/**
 * Data store.
 *
 * ## DataStores_CreateOrUpdate_DataSinkPUT162
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 *
 * const dataStore = new azurerm.hybriddata.v20160601.DataStore("dataStore", {
 *     customerSecrets: [
 *         {
 *             algorithm: "RSA1_5",
 *             keyIdentifier: "StorageAccountAccessKey",
 *             keyValue: "Pses92T1jTpPBH2roHgNKArWVv57WomubD/9ukE2d0M89gIVnzc/0bfeoJVf0Med6Uvt4mzmOghFEVxqoBNXzKLgsCLVqvPkqdst4WzZbeel3k/NVkfDdf04eNPAm1FwM/hWZQlG3lGr/olCihW8AFHoiLEZWK8DC6UmHl8ittuuhzY/Ct8R5VXdMWavLdFg8G66TCSyH2aF/eeqzHcOBP4XFgbF2NxuvmEd/cY+y5lEon3TfdDwI0JcOumf5s4zHTWM5+StWa3SsvKxGPpJ27xik2FBo2kEqrtAAByi6HxXSinJB8DwXZicHIwjaOiTeiJUMADwZXwv1PLpwo5d1Q==:QBzHKcxhJkiIeLtFx84oLqDUd5p+oM2AwoKtZIgYVZhfKFw5VW2BfsigL2K7AGxyTNatwn6JZm9ylo8YhRZrn0eIVqLR4gCiRSwDHI7i6R/tqTfx8ZO/aJy6rTh/WW8d6vZOXXGeuRDAz6fYfjQKb9J/OhTq3cjfVouLt6bKdZsZve08NVZq0sNBYZftCabcOhVg5hamuDhQhemwqFMn6l1xrCWcq4e5YgJ90fbK5N66Wj5LNr2dU+scHH7YfM8a3IIhq51TObhXZ59oNnLhLGGA8j0K43MMKtQAnqpBc+hmwgwc8/DZLod1wnaPbJW5/fQ2HkF7vH9xakIip4bZ9Q==",
 *         },
 *         {
 *             algorithm: "RSA1_5",
 *             keyIdentifier: "StorageAccountAccessKeyForQueue",
 *             keyValue: "Pses92T1jTpPBH2roHgNKArWVv57WomubD/9ukE2d0M89gIVnzc/0bfeoJVf0Med6Uvt4mzmOghFEVxqoBNXzKLgsCLVqvPkqdst4WzZbeel3k/NVkfDdf04eNPAm1FwM/hWZQlG3lGr/olCihW8AFHoiLEZWK8DC6UmHl8ittuuhzY/Ct8R5VXdMWavLdFg8G66TCSyH2aF/eeqzHcOBP4XFgbF2NxuvmEd/cY+y5lEon3TfdDwI0JcOumf5s4zHTWM5+StWa3SsvKxGPpJ27xik2FBo2kEqrtAAByi6HxXSinJB8DwXZicHIwjaOiTeiJUMADwZXwv1PLpwo5d1Q==:QBzHKcxhJkiIeLtFx84oLqDUd5p+oM2AwoKtZIgYVZhfKFw5VW2BfsigL2K7AGxyTNatwn6JZm9ylo8YhRZrn0eIVqLR4gCiRSwDHI7i6R/tqTfx8ZO/aJy6rTh/WW8d6vZOXXGeuRDAz6fYfjQKb9J/OhTq3cjfVouLt6bKdZsZve08NVZq0sNBYZftCabcOhVg5hamuDhQhemwqFMn6l1xrCWcq4e5YgJ90fbK5N66Wj5LNr2dU+scHH7YfM8a3IIhq51TObhXZ59oNnLhLGGA8j0K43MMKtQAnqpBc+hmwgwc8/DZLod1wnaPbJW5/fQ2HkF7vH9xakIip4bZ9Q==",
 *         },
 *     ],
 *     dataManagerName: "TestAzureSDKOperations",
 *     dataStoreName: "TestAzureStorage1",
 *     dataStoreTypeId: "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/AzureStorageAccount",
 *     extendedProperties: {
 *         extendedSaKey: undefined,
 *         extendedSaName: "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink",
 *         storageAccountNameForQueue: "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink",
 *     },
 *     repositoryId: "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.Storage/storageAccounts/dmsdatasink",
 *     resourceGroupName: "ResourceGroupForSDKTest",
 *     state: "Enabled",
 * });
 *
 * ```
 *
 * ## DataStores_CreateOrUpdate_DataSourcePUT162
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azurerm from "@pulumi/azurerm";
 *
 * const dataStore = new azurerm.hybriddata.v20160601.DataStore("dataStore", {
 *     customerSecrets: [{
 *         algorithm: "RSA1_5",
 *         keyIdentifier: "ServiceEncryptionKey",
 *         keyValue: "vZqtembBBg2RC/UyYwZiexGOqujLcMYCmaywqf0sURqIidjxlSp86FGz+T2eRnb1XlYCqFf1CzPzwLpwHEuTJ8LP5hTV1yUiM+YnyKHIGdlQajLcVcFy8ji9n+jSS4J9PjjHsr5AKzW1w+y76UgTEpX7K9kFDWFVyDGEujvuB2bYBlxlKolMCOu0WHZYkBBYLob6a3mQgCHbXYj1mqTmdhPW+J+8tyBCzG6cjlvRJ9hcp9Ss3HV9TV6hrbqlUU3lE1FX8O5Dr6/TXi7tIU7hGfmS5psE0Kz+2PsJTX1R1AbkBpKObPwPxPoC5jCXFxwfmZOrNQdjZ7nu5+JHaLZylw==:tS9oSCAvIwOrkYRyD/jLahSLZypl4eNexW5N/pGqf9vsVfzMhmxob+O/Io48uCPxvtdDksef09OVXpxgaC65K2Og49W9rtRt8cvGyyC41cx5D2DP9fxAu7d/lREP9cWHgrRJlZ4JJFcqy+m+yqYKl3WPrTA2yoZpISGbWAPkj0Hk3IwRr1lmqKfCWtp0jNHnrIJmQ5BQaDLGXpohKQSrrftqz7TdBCYuorSntQz8pqHgc8MTiYMgMtgZ+HRKQ1F5ctOlP+6LJMS6/OFl/tnYb5BD6rn/RufB4OHhVDe9ZD5GMtkwqkUvU9b1v2n31mb63JLApxIi/o8OsSpkA8ZTCg==",
 *     }],
 *     dataManagerName: "TestAzureSDKOperations",
 *     dataStoreName: "TestStorSimpleSource1",
 *     dataStoreTypeId: "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/ResourceGroupForSDKTest/providers/Microsoft.HybridData/dataManagers/TestAzureSDKOperations/dataStoreTypes/StorSimple8000Series",
 *     extendedProperties: {
 *         extendedSaKey: undefined,
 *         resourceId: "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/dmsdatasource/providers/Microsoft.StorSimple/managers/dmsdatasource",
 *     },
 *     repositoryId: "/subscriptions/6e0219f5-327a-4365-904f-05eed4227ad7/resourceGroups/dmsdatasource/providers/Microsoft.StorSimple/managers/dmsdatasource",
 *     resourceGroupName: "ResourceGroupForSDKTest",
 *     state: "Enabled",
 * });
 *
 * ```
 */
export class DataStore extends pulumi.CustomResource {
    /**
     * Get an existing DataStore resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, opts?: pulumi.CustomResourceOptions): DataStore {
        return new DataStore(name, undefined, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'azurerm:hybriddata/v20160601:DataStore';

    /**
     * Returns true if the given object is an instance of DataStore.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataStore {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataStore.__pulumiType;
    }

    /**
     * List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     */
    public readonly customerSecrets!: pulumi.Output<outputs.hybriddata.v20160601.CustomerSecretResponse[] | undefined>;
    /**
     * The arm id of the data store type.
     */
    public readonly dataStoreTypeId!: pulumi.Output<string>;
    /**
     * A generic json used differently by each data source type.
     */
    public readonly extendedProperties!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * Name of the object.
     */
    public /*out*/ readonly name!: pulumi.Output<string>;
    /**
     * Arm Id for the manager resource to which the data source is associated. This is optional.
     */
    public readonly repositoryId!: pulumi.Output<string | undefined>;
    /**
     * State of the data source.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * Type of the object.
     */
    public /*out*/ readonly type!: pulumi.Output<string>;

    /**
     * Create a DataStore resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataStoreArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, state: undefined, opts: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataStoreArgs, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (!(opts && opts.id)) {
            const args = argsOrState as DataStoreArgs | undefined;
            if (!args || args.dataManagerName === undefined) {
                throw new Error("Missing required property 'dataManagerName'");
            }
            if (!args || args.dataStoreName === undefined) {
                throw new Error("Missing required property 'dataStoreName'");
            }
            if (!args || args.dataStoreTypeId === undefined) {
                throw new Error("Missing required property 'dataStoreTypeId'");
            }
            if (!args || args.resourceGroupName === undefined) {
                throw new Error("Missing required property 'resourceGroupName'");
            }
            if (!args || args.state === undefined) {
                throw new Error("Missing required property 'state'");
            }
            inputs["customerSecrets"] = args ? args.customerSecrets : undefined;
            inputs["dataManagerName"] = args ? args.dataManagerName : undefined;
            inputs["dataStoreName"] = args ? args.dataStoreName : undefined;
            inputs["dataStoreTypeId"] = args ? args.dataStoreTypeId : undefined;
            inputs["extendedProperties"] = args ? args.extendedProperties : undefined;
            inputs["repositoryId"] = args ? args.repositoryId : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["state"] = args ? args.state : undefined;
            inputs["name"] = undefined /*out*/;
            inputs["type"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        const aliasOpts = { aliases: [{ type: "azurerm:hybriddata/latest:DataStore" }, { type: "azurerm:hybriddata/v20190601:DataStore" }] };
        opts = opts ? pulumi.mergeOptions(opts, aliasOpts) : aliasOpts;
        super(DataStore.__pulumiType, name, inputs, opts);
    }
}

/**
 * The set of arguments for constructing a DataStore resource.
 */
export interface DataStoreArgs {
    /**
     * List of customer secrets containing a key identifier and key value. The key identifier is a way for the specific data source to understand the key. Value contains customer secret encrypted by the encryptionKeys.
     */
    readonly customerSecrets?: pulumi.Input<pulumi.Input<inputs.hybriddata.v20160601.CustomerSecret>[]>;
    /**
     * The name of the DataManager Resource within the specified resource group. DataManager names must be between 3 and 24 characters in length and use any alphanumeric and underscore only
     */
    readonly dataManagerName: pulumi.Input<string>;
    /**
     * The data store/repository name to be created or updated.
     */
    readonly dataStoreName: pulumi.Input<string>;
    /**
     * The arm id of the data store type.
     */
    readonly dataStoreTypeId: pulumi.Input<string>;
    /**
     * A generic json used differently by each data source type.
     */
    readonly extendedProperties?: pulumi.Input<{[key: string]: any}>;
    /**
     * Arm Id for the manager resource to which the data source is associated. This is optional.
     */
    readonly repositoryId?: pulumi.Input<string>;
    /**
     * The Resource Group Name
     */
    readonly resourceGroupName: pulumi.Input<string>;
    /**
     * State of the data source.
     */
    readonly state: pulumi.Input<string>;
}
