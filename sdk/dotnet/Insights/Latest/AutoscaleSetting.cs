// *** WARNING: this file was generated by the Pulumi SDK Generator. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.AzureRM.Insights.Latest
{
    /// <summary>
    /// The autoscale setting resource.
    /// 
    /// ## Example Usage
    /// ### Create or update an autoscale setting
    /// ```csharp
    /// using Pulumi;
    /// using AzureRM = Pulumi.AzureRM;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var autoscaleSetting = new AzureRM.Insights.Latest.AutoscaleSetting("autoscaleSetting", new AzureRM.Insights.Latest.AutoscaleSettingArgs
    ///         {
    ///             AutoscaleSettingName = "MySetting",
    ///             Enabled = true,
    ///             Location = "West US",
    ///             Notifications = 
    ///             {
    ///                 new AzureRM.Insights.Latest.Inputs.AutoscaleNotificationArgs
    ///                 {
    ///                     Email = new AzureRM.Insights.Latest.Inputs.EmailNotificationArgs
    ///                     {
    ///                         CustomEmails = 
    ///                         {
    ///                             "gu@ms.com",
    ///                             "ge@ns.net",
    ///                         },
    ///                         SendToSubscriptionAdministrator = true,
    ///                         SendToSubscriptionCoAdministrators = true,
    ///                     },
    ///                     Operation = "Scale",
    ///                     Webhooks = 
    ///                     {
    ///                         new AzureRM.Insights.Latest.Inputs.WebhookNotificationArgs
    ///                         {
    ///                             Properties = ,
    ///                             ServiceUri = "http://myservice.com",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             Profiles = 
    ///             {
    ///                 new AzureRM.Insights.Latest.Inputs.AutoscaleProfileArgs
    ///                 {
    ///                     Capacity = new AzureRM.Insights.Latest.Inputs.ScaleCapacityArgs
    ///                     {
    ///                         Default = "1",
    ///                         Maximum = "10",
    ///                         Minimum = "1",
    ///                     },
    ///                     FixedDate = new AzureRM.Insights.Latest.Inputs.TimeWindowArgs
    ///                     {
    ///                         End = "2015-03-05T14:30:00Z",
    ///                         Start = "2015-03-05T14:00:00Z",
    ///                         TimeZone = "UTC",
    ///                     },
    ///                     Name = "adios",
    ///                     Rules = 
    ///                     {
    ///                         new AzureRM.Insights.Latest.Inputs.ScaleRuleArgs
    ///                         {
    ///                             MetricTrigger = new AzureRM.Insights.Latest.Inputs.MetricTriggerArgs
    ///                             {
    ///                                 MetricName = "Percentage CPU",
    ///                                 MetricResourceUri = "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc",
    ///                                 Operator = "GreaterThan",
    ///                                 Statistic = "Average",
    ///                                 Threshold = 10,
    ///                                 TimeAggregation = "Average",
    ///                                 TimeGrain = "PT1M",
    ///                                 TimeWindow = "PT5M",
    ///                             },
    ///                             ScaleAction = new AzureRM.Insights.Latest.Inputs.ScaleActionArgs
    ///                             {
    ///                                 Cooldown = "PT5M",
    ///                                 Direction = "Increase",
    ///                                 Type = "ChangeCount",
    ///                                 Value = "1",
    ///                             },
    ///                         },
    ///                         new AzureRM.Insights.Latest.Inputs.ScaleRuleArgs
    ///                         {
    ///                             MetricTrigger = new AzureRM.Insights.Latest.Inputs.MetricTriggerArgs
    ///                             {
    ///                                 MetricName = "Percentage CPU",
    ///                                 MetricResourceUri = "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc",
    ///                                 Operator = "GreaterThan",
    ///                                 Statistic = "Average",
    ///                                 Threshold = 15,
    ///                                 TimeAggregation = "Average",
    ///                                 TimeGrain = "PT2M",
    ///                                 TimeWindow = "PT5M",
    ///                             },
    ///                             ScaleAction = new AzureRM.Insights.Latest.Inputs.ScaleActionArgs
    ///                             {
    ///                                 Cooldown = "PT6M",
    ///                                 Direction = "Decrease",
    ///                                 Type = "ChangeCount",
    ///                                 Value = "2",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///                 new AzureRM.Insights.Latest.Inputs.AutoscaleProfileArgs
    ///                 {
    ///                     Capacity = new AzureRM.Insights.Latest.Inputs.ScaleCapacityArgs
    ///                     {
    ///                         Default = "1",
    ///                         Maximum = "10",
    ///                         Minimum = "1",
    ///                     },
    ///                     Name = "saludos",
    ///                     Recurrence = new AzureRM.Insights.Latest.Inputs.RecurrenceArgs
    ///                     {
    ///                         Frequency = "Week",
    ///                         Schedule = new AzureRM.Insights.Latest.Inputs.RecurrentScheduleArgs
    ///                         {
    ///                             Days = 
    ///                             {
    ///                                 "1",
    ///                             },
    ///                             Hours = 
    ///                             {
    ///                                 5,
    ///                             },
    ///                             Minutes = 
    ///                             {
    ///                                 15,
    ///                             },
    ///                             TimeZone = "UTC",
    ///                         },
    ///                     },
    ///                     Rules = 
    ///                     {
    ///                         new AzureRM.Insights.Latest.Inputs.ScaleRuleArgs
    ///                         {
    ///                             MetricTrigger = new AzureRM.Insights.Latest.Inputs.MetricTriggerArgs
    ///                             {
    ///                                 MetricName = "Percentage CPU",
    ///                                 MetricResourceUri = "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc",
    ///                                 Operator = "GreaterThan",
    ///                                 Statistic = "Average",
    ///                                 Threshold = 10,
    ///                                 TimeAggregation = "Average",
    ///                                 TimeGrain = "PT1M",
    ///                                 TimeWindow = "PT5M",
    ///                             },
    ///                             ScaleAction = new AzureRM.Insights.Latest.Inputs.ScaleActionArgs
    ///                             {
    ///                                 Cooldown = "PT5M",
    ///                                 Direction = "Increase",
    ///                                 Type = "ChangeCount",
    ///                                 Value = "1",
    ///                             },
    ///                         },
    ///                         new AzureRM.Insights.Latest.Inputs.ScaleRuleArgs
    ///                         {
    ///                             MetricTrigger = new AzureRM.Insights.Latest.Inputs.MetricTriggerArgs
    ///                             {
    ///                                 MetricName = "Percentage CPU",
    ///                                 MetricResourceUri = "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc",
    ///                                 Operator = "GreaterThan",
    ///                                 Statistic = "Average",
    ///                                 Threshold = 15,
    ///                                 TimeAggregation = "Average",
    ///                                 TimeGrain = "PT2M",
    ///                                 TimeWindow = "PT5M",
    ///                             },
    ///                             ScaleAction = new AzureRM.Insights.Latest.Inputs.ScaleActionArgs
    ///                             {
    ///                                 Cooldown = "PT6M",
    ///                                 Direction = "Decrease",
    ///                                 Type = "ChangeCount",
    ///                                 Value = "2",
    ///                             },
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             ResourceGroupName = "TestingMetricsScaleSet",
    ///             Tags = ,
    ///             TargetResourceUri = "/subscriptions/b67f7fec-69fc-4974-9099-a26bd6ffeda3/resourceGroups/TestingMetricsScaleSet/providers/Microsoft.Compute/virtualMachineScaleSets/testingsc",
    ///         });
    ///     }
    /// 
    /// }
    /// 
    /// ```
    /// </summary>
    public partial class AutoscaleSetting : Pulumi.CustomResource
    {
        /// <summary>
        /// the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'true'.
        /// </summary>
        [Output("enabled")]
        public Output<bool?> Enabled { get; private set; } = null!;

        /// <summary>
        /// Resource location
        /// </summary>
        [Output("location")]
        public Output<string> Location { get; private set; } = null!;

        /// <summary>
        /// Azure resource name
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// the collection of notifications.
        /// </summary>
        [Output("notifications")]
        public Output<ImmutableArray<Outputs.AutoscaleNotificationResponseResult>> Notifications { get; private set; } = null!;

        /// <summary>
        /// the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.
        /// </summary>
        [Output("profiles")]
        public Output<ImmutableArray<Outputs.AutoscaleProfileResponseResult>> Profiles { get; private set; } = null!;

        /// <summary>
        /// Resource tags
        /// </summary>
        [Output("tags")]
        public Output<ImmutableDictionary<string, string>?> Tags { get; private set; } = null!;

        /// <summary>
        /// the resource identifier of the resource that the autoscale setting should be added to.
        /// </summary>
        [Output("targetResourceUri")]
        public Output<string?> TargetResourceUri { get; private set; } = null!;

        /// <summary>
        /// Azure resource type
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a AutoscaleSetting resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AutoscaleSetting(string name, AutoscaleSettingArgs args, CustomResourceOptions? options = null)
            : base("azurerm:insights/latest:AutoscaleSetting", name, args ?? new AutoscaleSettingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AutoscaleSetting(string name, Input<string> id, CustomResourceOptions? options = null)
            : base("azurerm:insights/latest:AutoscaleSetting", name, null, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                Aliases =
                {
                    new Pulumi.Alias { Type = "azurerm:insights/v20150401:AutoscaleSetting"},
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AutoscaleSetting resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AutoscaleSetting Get(string name, Input<string> id, CustomResourceOptions? options = null)
        {
            return new AutoscaleSetting(name, id, options);
        }
    }

    public sealed class AutoscaleSettingArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The autoscale setting name.
        /// </summary>
        [Input("autoscaleSettingName", required: true)]
        public Input<string> AutoscaleSettingName { get; set; } = null!;

        /// <summary>
        /// the enabled flag. Specifies whether automatic scaling is enabled for the resource. The default value is 'true'.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// Resource location
        /// </summary>
        [Input("location", required: true)]
        public Input<string> Location { get; set; } = null!;

        /// <summary>
        /// the name of the autoscale setting.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("notifications")]
        private InputList<Inputs.AutoscaleNotificationArgs>? _notifications;

        /// <summary>
        /// the collection of notifications.
        /// </summary>
        public InputList<Inputs.AutoscaleNotificationArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.AutoscaleNotificationArgs>());
            set => _notifications = value;
        }

        [Input("profiles", required: true)]
        private InputList<Inputs.AutoscaleProfileArgs>? _profiles;

        /// <summary>
        /// the collection of automatic scaling profiles that specify different scaling parameters for different time periods. A maximum of 20 profiles can be specified.
        /// </summary>
        public InputList<Inputs.AutoscaleProfileArgs> Profiles
        {
            get => _profiles ?? (_profiles = new InputList<Inputs.AutoscaleProfileArgs>());
            set => _profiles = value;
        }

        /// <summary>
        /// The name of the resource group.
        /// </summary>
        [Input("resourceGroupName", required: true)]
        public Input<string> ResourceGroupName { get; set; } = null!;

        [Input("tags")]
        private InputMap<string>? _tags;

        /// <summary>
        /// Resource tags
        /// </summary>
        public InputMap<string> Tags
        {
            get => _tags ?? (_tags = new InputMap<string>());
            set => _tags = value;
        }

        /// <summary>
        /// the resource identifier of the resource that the autoscale setting should be added to.
        /// </summary>
        [Input("targetResourceUri")]
        public Input<string>? TargetResourceUri { get; set; }

        public AutoscaleSettingArgs()
        {
        }
    }
}
